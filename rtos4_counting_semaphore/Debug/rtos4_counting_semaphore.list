
rtos4_counting_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c6c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa8  08004fa8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa8  08004fa8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa8  08004fa8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000018  08004fc8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  08004fc8  000210b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001345b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296e  00000000  00000000  0003349b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00035e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00036da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011895  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123dd  00000000  00000000  000494cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b995  00000000  00000000  0005b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c723f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  000c7294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d14 	.word	0x08004d14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08004d14 	.word	0x08004d14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b004      	add	sp, #16
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000034 	.word	0x20000034
 800025c:	20000088 	.word	0x20000088

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fd61 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f869 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8e1 	bl	8000434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000272:	f000 f8af 	bl	80003d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  CountingSem = xSemaphoreCreateCounting(3,0);
 8000276:	2100      	movs	r1, #0
 8000278:	2003      	movs	r0, #3
 800027a:	f003 f808 	bl	800328e <xQueueCreateCountingSemaphore>
 800027e:	0002      	movs	r2, r0
 8000280:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <main+0xa0>)
 8000282:	601a      	str	r2, [r3, #0]
  if (CountingSem == NULL) HAL_UART_Transmit(&huart2, (uint8_t *) "Unable to Create Semaphore\n\n", 28, 100);
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <main+0xa0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d106      	bne.n	800029a <main+0x3a>
 800028c:	491d      	ldr	r1, [pc, #116]	; (8000304 <main+0xa4>)
 800028e:	481e      	ldr	r0, [pc, #120]	; (8000308 <main+0xa8>)
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	221c      	movs	r2, #28
 8000294:	f001 ff7c 	bl	8002190 <HAL_UART_Transmit>
 8000298:	e006      	b.n	80002a8 <main+0x48>
  else HAL_UART_Transmit(&huart2, (uint8_t *) "Counting Semaphore created successfully\n\n", 41, 1000);
 800029a:	23fa      	movs	r3, #250	; 0xfa
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	491b      	ldr	r1, [pc, #108]	; (800030c <main+0xac>)
 80002a0:	4819      	ldr	r0, [pc, #100]	; (8000308 <main+0xa8>)
 80002a2:	2229      	movs	r2, #41	; 0x29
 80002a4:	f001 ff74 	bl	8002190 <HAL_UART_Transmit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */
  // create TASKS

  xTaskCreate(HPT_TASK, "HPT", 128, NULL, 3, &HPThandler);
 80002a8:	4919      	ldr	r1, [pc, #100]	; (8000310 <main+0xb0>)
 80002aa:	481a      	ldr	r0, [pc, #104]	; (8000314 <main+0xb4>)
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <main+0xb8>)
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	2303      	movs	r3, #3
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2300      	movs	r3, #0
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	f003 fb0f 	bl	80038da <xTaskCreate>
  xTaskCreate(MPT_TASK, "MPT", 128, NULL, 2, &MPThandler);
 80002bc:	4917      	ldr	r1, [pc, #92]	; (800031c <main+0xbc>)
 80002be:	4818      	ldr	r0, [pc, #96]	; (8000320 <main+0xc0>)
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <main+0xc4>)
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	2302      	movs	r3, #2
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2300      	movs	r3, #0
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	f003 fb05 	bl	80038da <xTaskCreate>
  xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1, &LPThandler);
 80002d0:	4915      	ldr	r1, [pc, #84]	; (8000328 <main+0xc8>)
 80002d2:	4816      	ldr	r0, [pc, #88]	; (800032c <main+0xcc>)
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <main+0xd0>)
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2300      	movs	r3, #0
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	f003 fafb 	bl	80038da <xTaskCreate>
  xTaskCreate(VLPT_TASK, "VLPT", 128, NULL, 0, &VLPThandler);
 80002e4:	4913      	ldr	r1, [pc, #76]	; (8000334 <main+0xd4>)
 80002e6:	4814      	ldr	r0, [pc, #80]	; (8000338 <main+0xd8>)
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <main+0xdc>)
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2300      	movs	r3, #0
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	f003 faf1 	bl	80038da <xTaskCreate>

  vTaskStartScheduler();
 80002f8:	f003 fc40 	bl	8003b7c <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <main+0x9c>
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	20000fd8 	.word	0x20000fd8
 8000304:	08004d2c 	.word	0x08004d2c
 8000308:	20000fe0 	.word	0x20000fe0
 800030c:	08004d4c 	.word	0x08004d4c
 8000310:	08004d78 	.word	0x08004d78
 8000314:	080004c9 	.word	0x080004c9
 8000318:	20000fd0 	.word	0x20000fd0
 800031c:	08004d7c 	.word	0x08004d7c
 8000320:	0800065d 	.word	0x0800065d
 8000324:	20000fd4 	.word	0x20000fd4
 8000328:	08004d80 	.word	0x08004d80
 800032c:	080007c9 	.word	0x080007c9
 8000330:	20001064 	.word	0x20001064
 8000334:	08004d84 	.word	0x08004d84
 8000338:	08000935 	.word	0x08000935
 800033c:	20000fdc 	.word	0x20000fdc

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b091      	sub	sp, #68	; 0x44
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	2410      	movs	r4, #16
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2330      	movs	r3, #48	; 0x30
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f004 fc94 	bl	8004c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	2310      	movs	r3, #16
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f004 fc8d 	bl	8004c7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	0021      	movs	r1, r4
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2202      	movs	r2, #2
 800036a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2210      	movs	r2, #16
 8000376:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2202      	movs	r2, #2
 800037c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	22a0      	movs	r2, #160	; 0xa0
 8000388:	0392      	lsls	r2, r2, #14
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	0018      	movs	r0, r3
 8000396:	f000 ffb1 	bl	80012fc <HAL_RCC_OscConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800039e:	f000 fb95 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	003b      	movs	r3, r7
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2202      	movs	r2, #2
 80003ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ba:	003b      	movs	r3, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 fab6 	bl	8001930 <HAL_RCC_ClockConfig>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003c8:	f000 fb80 	bl	8000acc <Error_Handler>
  }
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b011      	add	sp, #68	; 0x44
 80003d2:	bd90      	pop	{r4, r7, pc}

080003d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MX_USART2_UART_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e0:	2296      	movs	r2, #150	; 0x96
 80003e2:	0212      	lsls	r2, r2, #8
 80003e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fe65 	bl	80020e8 <HAL_UART_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 fb53 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000fe0 	.word	0x20000fe0
 8000430:	40004400 	.word	0x40004400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b089      	sub	sp, #36	; 0x24
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	240c      	movs	r4, #12
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2314      	movs	r3, #20
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f004 fc1a 	bl	8004c7e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	0289      	lsls	r1, r1, #10
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	029b      	lsls	r3, r3, #10
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0309      	lsls	r1, r1, #12
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	031b      	lsls	r3, r3, #12
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000482:	23c0      	movs	r3, #192	; 0xc0
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <MX_GPIO_Init+0x90>)
 8000488:	2200      	movs	r2, #0
 800048a:	0019      	movs	r1, r3
 800048c:	f000 ff18 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	22c0      	movs	r2, #192	; 0xc0
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2201      	movs	r2, #1
 800049c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <MX_GPIO_Init+0x90>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	0010      	movs	r0, r2
 80004b2:	f000 fd95 	bl	8000fe0 <HAL_GPIO_Init>

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b009      	add	sp, #36	; 0x24
 80004bc:	bd90      	pop	{r4, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000800 	.word	0x48000800

080004c8 <HPT_TASK>:

void HPT_TASK (void *pvParameters)
{
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	b0ad      	sub	sp, #180	; 0xb4
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	22ac      	movs	r2, #172	; 0xac
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	6013      	str	r3, [r2, #0]
	char ssemcount[2];

	// Give 3 semaphores at the beginning..
	xSemaphoreGive(CountingSem);
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <HPT_TASK+0x16c>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	2300      	movs	r3, #0
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fef7 	bl	80032d4 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80004e6:	4b53      	ldr	r3, [pc, #332]	; (8000634 <HPT_TASK+0x16c>)
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 fef0 	bl	80032d4 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80004f4:	4b4f      	ldr	r3, [pc, #316]	; (8000634 <HPT_TASK+0x16c>)
 80004f6:	6818      	ldr	r0, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fee9 	bl	80032d4 <xQueueGenericSend>

	while (1)
	{
		char str[150];
		strcpy(str, "Entered HPT Task\n About to ACQUIRE the Semaphore\n ");
 8000502:	240c      	movs	r4, #12
 8000504:	193a      	adds	r2, r7, r4
 8000506:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <HPT_TASK+0x170>)
 8000508:	0010      	movs	r0, r2
 800050a:	0019      	movs	r1, r3
 800050c:	2333      	movs	r3, #51	; 0x33
 800050e:	001a      	movs	r2, r3
 8000510:	f004 fbac 	bl	8004c6c <memcpy>
		semcount = uxSemaphoreGetCount(CountingSem);
 8000514:	4b47      	ldr	r3, [pc, #284]	; (8000634 <HPT_TASK+0x16c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	0018      	movs	r0, r3
 800051a:	f003 f879 	bl	8003610 <uxQueueMessagesWaiting>
 800051e:	0003      	movs	r3, r0
 8000520:	22ac      	movs	r2, #172	; 0xac
 8000522:	18b9      	adds	r1, r7, r2
 8000524:	600b      	str	r3, [r1, #0]
		itoa (semcount, ssemcount, 10);
 8000526:	25a4      	movs	r5, #164	; 0xa4
 8000528:	1979      	adds	r1, r7, r5
 800052a:	18bb      	adds	r3, r7, r2
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	220a      	movs	r2, #10
 8000530:	0018      	movs	r0, r3
 8000532:	f004 fb97 	bl	8004c64 <itoa>
		strcat (str, "Tokens available are: ");
 8000536:	193b      	adds	r3, r7, r4
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fde5 	bl	8000108 <strlen>
 800053e:	0003      	movs	r3, r0
 8000540:	001a      	movs	r2, r3
 8000542:	193b      	adds	r3, r7, r4
 8000544:	189a      	adds	r2, r3, r2
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <HPT_TASK+0x174>)
 8000548:	0010      	movs	r0, r2
 800054a:	0019      	movs	r1, r3
 800054c:	2317      	movs	r3, #23
 800054e:	001a      	movs	r2, r3
 8000550:	f004 fb8c 	bl	8004c6c <memcpy>
		strcat (str, ssemcount);
 8000554:	197a      	adds	r2, r7, r5
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f004 fb97 	bl	8004c8e <strcat>
		strcat (str, "\n\n");
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fdd0 	bl	8000108 <strlen>
 8000568:	0003      	movs	r3, r0
 800056a:	001a      	movs	r2, r3
 800056c:	193b      	adds	r3, r7, r4
 800056e:	189a      	adds	r2, r3, r2
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <HPT_TASK+0x178>)
 8000572:	0010      	movs	r0, r2
 8000574:	0019      	movs	r1, r3
 8000576:	2303      	movs	r3, #3
 8000578:	001a      	movs	r2, r3
 800057a:	f004 fb77 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800057e:	193b      	adds	r3, r7, r4
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff fdc1 	bl	8000108 <strlen>
 8000586:	0003      	movs	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	2301      	movs	r3, #1
 800058c:	425b      	negs	r3, r3
 800058e:	1939      	adds	r1, r7, r4
 8000590:	482c      	ldr	r0, [pc, #176]	; (8000644 <HPT_TASK+0x17c>)
 8000592:	f001 fdfd 	bl	8002190 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000596:	4b27      	ldr	r3, [pc, #156]	; (8000634 <HPT_TASK+0x16c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	4252      	negs	r2, r2
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 ff5b 	bl	800345c <xQueueSemaphoreTake>

		itoa (resource[indx], sresource, 10);
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <HPT_TASK+0x180>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <HPT_TASK+0x184>)
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	58d3      	ldr	r3, [r2, r3]
 80005b0:	25a8      	movs	r5, #168	; 0xa8
 80005b2:	1979      	adds	r1, r7, r5
 80005b4:	220a      	movs	r2, #10
 80005b6:	0018      	movs	r0, r3
 80005b8:	f004 fb54 	bl	8004c64 <itoa>
		strcpy (str, "Leaving HPT Task\n Data ACCESSED is:: ");
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	4a24      	ldr	r2, [pc, #144]	; (8000650 <HPT_TASK+0x188>)
 80005c0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80005c2:	c343      	stmia	r3!, {r0, r1, r6}
 80005c4:	ca43      	ldmia	r2!, {r0, r1, r6}
 80005c6:	c343      	stmia	r3!, {r0, r1, r6}
 80005c8:	ca43      	ldmia	r2!, {r0, r1, r6}
 80005ca:	c343      	stmia	r3!, {r0, r1, r6}
 80005cc:	8812      	ldrh	r2, [r2, #0]
 80005ce:	801a      	strh	r2, [r3, #0]
		strcat (str, sresource);
 80005d0:	197a      	adds	r2, r7, r5
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f004 fb59 	bl	8004c8e <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff fd92 	bl	8000108 <strlen>
 80005e4:	0003      	movs	r3, r0
 80005e6:	001a      	movs	r2, r3
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	189a      	adds	r2, r3, r2
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HPT_TASK+0x18c>)
 80005ee:	0010      	movs	r0, r2
 80005f0:	0019      	movs	r1, r3
 80005f2:	2321      	movs	r3, #33	; 0x21
 80005f4:	001a      	movs	r2, r3
 80005f6:	f004 fb39 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff fd83 	bl	8000108 <strlen>
 8000602:	0003      	movs	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	2301      	movs	r3, #1
 8000608:	425b      	negs	r3, r3
 800060a:	1939      	adds	r1, r7, r4
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HPT_TASK+0x17c>)
 800060e:	f001 fdbf 	bl	8002190 <HAL_UART_Transmit>

		indx++;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HPT_TASK+0x180>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <HPT_TASK+0x180>)
 800061a:	601a      	str	r2, [r3, #0]
		if (indx>2) indx=0;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HPT_TASK+0x180>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	dd02      	ble.n	800062a <HPT_TASK+0x162>
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HPT_TASK+0x180>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HPT_TASK+0x190>)
 800062c:	0018      	movs	r0, r3
 800062e:	f003 fa7f 	bl	8003b30 <vTaskDelay>
	{
 8000632:	e766      	b.n	8000502 <HPT_TASK+0x3a>
 8000634:	20000fd8 	.word	0x20000fd8
 8000638:	08004d8c 	.word	0x08004d8c
 800063c:	08004dc0 	.word	0x08004dc0
 8000640:	08004dd8 	.word	0x08004dd8
 8000644:	20000fe0 	.word	0x20000fe0
 8000648:	20000288 	.word	0x20000288
 800064c:	20000000 	.word	0x20000000
 8000650:	08004ddc 	.word	0x08004ddc
 8000654:	08004e04 	.word	0x08004e04
 8000658:	00000bb8 	.word	0x00000bb8

0800065c <MPT_TASK>:
	}
}


void MPT_TASK (void *pvParameters)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b0ad      	sub	sp, #180	; 0xb4
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	22ac      	movs	r2, #172	; 0xac
 8000668:	18ba      	adds	r2, r7, r2
 800066a:	6013      	str	r3, [r2, #0]
	//xSemaphoreGive(CountingSem);

	while (1)
	{
		char str[150];
		strcpy(str, "Entered MPT Task\n About to ACQUIRE the Semaphore\n ");
 800066c:	240c      	movs	r4, #12
 800066e:	193a      	adds	r2, r7, r4
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <MPT_TASK+0x144>)
 8000672:	0010      	movs	r0, r2
 8000674:	0019      	movs	r1, r3
 8000676:	2333      	movs	r3, #51	; 0x33
 8000678:	001a      	movs	r2, r3
 800067a:	f004 faf7 	bl	8004c6c <memcpy>
		semcount = uxSemaphoreGetCount(CountingSem);
 800067e:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <MPT_TASK+0x148>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f002 ffc4 	bl	8003610 <uxQueueMessagesWaiting>
 8000688:	0003      	movs	r3, r0
 800068a:	22ac      	movs	r2, #172	; 0xac
 800068c:	18b9      	adds	r1, r7, r2
 800068e:	600b      	str	r3, [r1, #0]
		itoa (semcount, ssemcount, 10);
 8000690:	25a4      	movs	r5, #164	; 0xa4
 8000692:	1979      	adds	r1, r7, r5
 8000694:	18bb      	adds	r3, r7, r2
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	220a      	movs	r2, #10
 800069a:	0018      	movs	r0, r3
 800069c:	f004 fae2 	bl	8004c64 <itoa>
		strcat (str, "Tokens available are: ");
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff fd30 	bl	8000108 <strlen>
 80006a8:	0003      	movs	r3, r0
 80006aa:	001a      	movs	r2, r3
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	189a      	adds	r2, r3, r2
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <MPT_TASK+0x14c>)
 80006b2:	0010      	movs	r0, r2
 80006b4:	0019      	movs	r1, r3
 80006b6:	2317      	movs	r3, #23
 80006b8:	001a      	movs	r2, r3
 80006ba:	f004 fad7 	bl	8004c6c <memcpy>
		strcat (str, ssemcount);
 80006be:	197a      	adds	r2, r7, r5
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fae2 	bl	8004c8e <strcat>
		strcat (str, "\n\n");
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fd1b 	bl	8000108 <strlen>
 80006d2:	0003      	movs	r3, r0
 80006d4:	001a      	movs	r2, r3
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	189a      	adds	r2, r3, r2
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MPT_TASK+0x150>)
 80006dc:	0010      	movs	r0, r2
 80006de:	0019      	movs	r1, r3
 80006e0:	2303      	movs	r3, #3
 80006e2:	001a      	movs	r2, r3
 80006e4:	f004 fac2 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd0c 	bl	8000108 <strlen>
 80006f0:	0003      	movs	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	1939      	adds	r1, r7, r4
 80006fa:	482d      	ldr	r0, [pc, #180]	; (80007b0 <MPT_TASK+0x154>)
 80006fc:	f001 fd48 	bl	8002190 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MPT_TASK+0x148>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2201      	movs	r2, #1
 8000706:	4252      	negs	r2, r2
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f002 fea6 	bl	800345c <xQueueSemaphoreTake>

		itoa (resource[indx], sresource, 10);
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <MPT_TASK+0x158>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MPT_TASK+0x15c>)
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	58d3      	ldr	r3, [r2, r3]
 800071a:	25a8      	movs	r5, #168	; 0xa8
 800071c:	1979      	adds	r1, r7, r5
 800071e:	220a      	movs	r2, #10
 8000720:	0018      	movs	r0, r3
 8000722:	f004 fa9f 	bl	8004c64 <itoa>
		strcpy (str, "Leaving MPT Task\n Data ACCESSED is:: ");
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MPT_TASK+0x160>)
 800072a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800072c:	c343      	stmia	r3!, {r0, r1, r6}
 800072e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000730:	c343      	stmia	r3!, {r0, r1, r6}
 8000732:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000734:	c343      	stmia	r3!, {r0, r1, r6}
 8000736:	8812      	ldrh	r2, [r2, #0]
 8000738:	801a      	strh	r2, [r3, #0]
		strcat (str, sresource);
 800073a:	197a      	adds	r2, r7, r5
 800073c:	193b      	adds	r3, r7, r4
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f004 faa4 	bl	8004c8e <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fcdd 	bl	8000108 <strlen>
 800074e:	0003      	movs	r3, r0
 8000750:	001a      	movs	r2, r3
 8000752:	193b      	adds	r3, r7, r4
 8000754:	189a      	adds	r2, r3, r2
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MPT_TASK+0x164>)
 8000758:	0010      	movs	r0, r2
 800075a:	0019      	movs	r1, r3
 800075c:	2321      	movs	r3, #33	; 0x21
 800075e:	001a      	movs	r2, r3
 8000760:	f004 fa84 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000764:	193b      	adds	r3, r7, r4
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fcce 	bl	8000108 <strlen>
 800076c:	0003      	movs	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	1939      	adds	r1, r7, r4
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MPT_TASK+0x154>)
 8000778:	f001 fd0a 	bl	8002190 <HAL_UART_Transmit>

		indx++;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MPT_TASK+0x158>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MPT_TASK+0x158>)
 8000784:	601a      	str	r2, [r3, #0]
		if (indx>2) indx=0;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MPT_TASK+0x158>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	dd02      	ble.n	8000794 <MPT_TASK+0x138>
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MPT_TASK+0x158>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MPT_TASK+0x168>)
 8000796:	0018      	movs	r0, r3
 8000798:	f003 f9ca 	bl	8003b30 <vTaskDelay>
	{
 800079c:	e766      	b.n	800066c <MPT_TASK+0x10>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	08004e28 	.word	0x08004e28
 80007a4:	20000fd8 	.word	0x20000fd8
 80007a8:	08004dc0 	.word	0x08004dc0
 80007ac:	08004dd8 	.word	0x08004dd8
 80007b0:	20000fe0 	.word	0x20000fe0
 80007b4:	20000288 	.word	0x20000288
 80007b8:	20000000 	.word	0x20000000
 80007bc:	08004e5c 	.word	0x08004e5c
 80007c0:	08004e04 	.word	0x08004e04
 80007c4:	00000bb8 	.word	0x00000bb8

080007c8 <LPT_TASK>:
}



void LPT_TASK (void *pvParameters)
{
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b0ad      	sub	sp, #180	; 0xb4
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	22ac      	movs	r2, #172	; 0xac
 80007d4:	18ba      	adds	r2, r7, r2
 80007d6:	6013      	str	r3, [r2, #0]
	//xSemaphoreGive(CountingSem);

	while (1)
	{
		char str[150];
		strcpy(str, "Entered LPT Task\n About to ACQUIRE the Semaphore\n ");
 80007d8:	240c      	movs	r4, #12
 80007da:	193a      	adds	r2, r7, r4
 80007dc:	4b4b      	ldr	r3, [pc, #300]	; (800090c <LPT_TASK+0x144>)
 80007de:	0010      	movs	r0, r2
 80007e0:	0019      	movs	r1, r3
 80007e2:	2333      	movs	r3, #51	; 0x33
 80007e4:	001a      	movs	r2, r3
 80007e6:	f004 fa41 	bl	8004c6c <memcpy>
		semcount = uxSemaphoreGetCount(CountingSem);
 80007ea:	4b49      	ldr	r3, [pc, #292]	; (8000910 <LPT_TASK+0x148>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 ff0e 	bl	8003610 <uxQueueMessagesWaiting>
 80007f4:	0003      	movs	r3, r0
 80007f6:	22ac      	movs	r2, #172	; 0xac
 80007f8:	18b9      	adds	r1, r7, r2
 80007fa:	600b      	str	r3, [r1, #0]
		itoa (semcount, ssemcount, 10);
 80007fc:	25a4      	movs	r5, #164	; 0xa4
 80007fe:	1979      	adds	r1, r7, r5
 8000800:	18bb      	adds	r3, r7, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	220a      	movs	r2, #10
 8000806:	0018      	movs	r0, r3
 8000808:	f004 fa2c 	bl	8004c64 <itoa>
		strcat (str, "Tokens available are: ");
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff fc7a 	bl	8000108 <strlen>
 8000814:	0003      	movs	r3, r0
 8000816:	001a      	movs	r2, r3
 8000818:	193b      	adds	r3, r7, r4
 800081a:	189a      	adds	r2, r3, r2
 800081c:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <LPT_TASK+0x14c>)
 800081e:	0010      	movs	r0, r2
 8000820:	0019      	movs	r1, r3
 8000822:	2317      	movs	r3, #23
 8000824:	001a      	movs	r2, r3
 8000826:	f004 fa21 	bl	8004c6c <memcpy>
		strcat (str, ssemcount);
 800082a:	197a      	adds	r2, r7, r5
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f004 fa2c 	bl	8004c8e <strcat>
		strcat (str, "\n\n");
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fc65 	bl	8000108 <strlen>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	193b      	adds	r3, r7, r4
 8000844:	189a      	adds	r2, r3, r2
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <LPT_TASK+0x150>)
 8000848:	0010      	movs	r0, r2
 800084a:	0019      	movs	r1, r3
 800084c:	2303      	movs	r3, #3
 800084e:	001a      	movs	r2, r3
 8000850:	f004 fa0c 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fc56 	bl	8000108 <strlen>
 800085c:	0003      	movs	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	2301      	movs	r3, #1
 8000862:	425b      	negs	r3, r3
 8000864:	1939      	adds	r1, r7, r4
 8000866:	482d      	ldr	r0, [pc, #180]	; (800091c <LPT_TASK+0x154>)
 8000868:	f001 fc92 	bl	8002190 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <LPT_TASK+0x148>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2201      	movs	r2, #1
 8000872:	4252      	negs	r2, r2
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fdf0 	bl	800345c <xQueueSemaphoreTake>

		itoa (resource[indx], sresource, 10);
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <LPT_TASK+0x158>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <LPT_TASK+0x15c>)
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	58d3      	ldr	r3, [r2, r3]
 8000886:	25a8      	movs	r5, #168	; 0xa8
 8000888:	1979      	adds	r1, r7, r5
 800088a:	220a      	movs	r2, #10
 800088c:	0018      	movs	r0, r3
 800088e:	f004 f9e9 	bl	8004c64 <itoa>
		strcpy (str, "Leaving LPT Task\n Data ACCESSED is:: ");
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a24      	ldr	r2, [pc, #144]	; (8000928 <LPT_TASK+0x160>)
 8000896:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000898:	c343      	stmia	r3!, {r0, r1, r6}
 800089a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800089c:	c343      	stmia	r3!, {r0, r1, r6}
 800089e:	ca43      	ldmia	r2!, {r0, r1, r6}
 80008a0:	c343      	stmia	r3!, {r0, r1, r6}
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	801a      	strh	r2, [r3, #0]
		strcat (str, sresource);
 80008a6:	197a      	adds	r2, r7, r5
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f004 f9ee 	bl	8004c8e <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff fc27 	bl	8000108 <strlen>
 80008ba:	0003      	movs	r3, r0
 80008bc:	001a      	movs	r2, r3
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	189a      	adds	r2, r3, r2
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <LPT_TASK+0x164>)
 80008c4:	0010      	movs	r0, r2
 80008c6:	0019      	movs	r1, r3
 80008c8:	2321      	movs	r3, #33	; 0x21
 80008ca:	001a      	movs	r2, r3
 80008cc:	f004 f9ce 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fc18 	bl	8000108 <strlen>
 80008d8:	0003      	movs	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
 80008e0:	1939      	adds	r1, r7, r4
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <LPT_TASK+0x154>)
 80008e4:	f001 fc54 	bl	8002190 <HAL_UART_Transmit>

		indx++;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <LPT_TASK+0x158>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <LPT_TASK+0x158>)
 80008f0:	601a      	str	r2, [r3, #0]
		if (indx>2) indx=0;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LPT_TASK+0x158>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dd02      	ble.n	8000900 <LPT_TASK+0x138>
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <LPT_TASK+0x158>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LPT_TASK+0x168>)
 8000902:	0018      	movs	r0, r3
 8000904:	f003 f914 	bl	8003b30 <vTaskDelay>
	{
 8000908:	e766      	b.n	80007d8 <LPT_TASK+0x10>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	08004e84 	.word	0x08004e84
 8000910:	20000fd8 	.word	0x20000fd8
 8000914:	08004dc0 	.word	0x08004dc0
 8000918:	08004dd8 	.word	0x08004dd8
 800091c:	20000fe0 	.word	0x20000fe0
 8000920:	20000288 	.word	0x20000288
 8000924:	20000000 	.word	0x20000000
 8000928:	08004eb8 	.word	0x08004eb8
 800092c:	08004e04 	.word	0x08004e04
 8000930:	00000bb8 	.word	0x00000bb8

08000934 <VLPT_TASK>:
}



void VLPT_TASK (void *pvParameters)
{
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	b0ad      	sub	sp, #180	; 0xb4
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	22ac      	movs	r2, #172	; 0xac
 8000940:	18ba      	adds	r2, r7, r2
 8000942:	6013      	str	r3, [r2, #0]
	//xSemaphoreGive(CountingSem);

	while (1)
	{
		char str[150];
		strcpy(str, "Entered VLHPT Task\n About to ACQUIRE the Semaphore\n ");
 8000944:	240c      	movs	r4, #12
 8000946:	193a      	adds	r2, r7, r4
 8000948:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <VLPT_TASK+0x14c>)
 800094a:	0010      	movs	r0, r2
 800094c:	0019      	movs	r1, r3
 800094e:	2335      	movs	r3, #53	; 0x35
 8000950:	001a      	movs	r2, r3
 8000952:	f004 f98b 	bl	8004c6c <memcpy>
		semcount = uxSemaphoreGetCount(CountingSem);
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <VLPT_TASK+0x150>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fe58 	bl	8003610 <uxQueueMessagesWaiting>
 8000960:	0003      	movs	r3, r0
 8000962:	22ac      	movs	r2, #172	; 0xac
 8000964:	18b9      	adds	r1, r7, r2
 8000966:	600b      	str	r3, [r1, #0]
		itoa (semcount, ssemcount, 10);
 8000968:	25a4      	movs	r5, #164	; 0xa4
 800096a:	1979      	adds	r1, r7, r5
 800096c:	18bb      	adds	r3, r7, r2
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	220a      	movs	r2, #10
 8000972:	0018      	movs	r0, r3
 8000974:	f004 f976 	bl	8004c64 <itoa>
		strcat (str, "Tokens available are: ");
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fbc4 	bl	8000108 <strlen>
 8000980:	0003      	movs	r3, r0
 8000982:	001a      	movs	r2, r3
 8000984:	193b      	adds	r3, r7, r4
 8000986:	189a      	adds	r2, r3, r2
 8000988:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <VLPT_TASK+0x154>)
 800098a:	0010      	movs	r0, r2
 800098c:	0019      	movs	r1, r3
 800098e:	2317      	movs	r3, #23
 8000990:	001a      	movs	r2, r3
 8000992:	f004 f96b 	bl	8004c6c <memcpy>
		strcat (str, ssemcount);
 8000996:	197a      	adds	r2, r7, r5
 8000998:	193b      	adds	r3, r7, r4
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f004 f976 	bl	8004c8e <strcat>
		strcat (str, "\n\n");
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fbaf 	bl	8000108 <strlen>
 80009aa:	0003      	movs	r3, r0
 80009ac:	001a      	movs	r2, r3
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	189a      	adds	r2, r3, r2
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <VLPT_TASK+0x158>)
 80009b4:	0010      	movs	r0, r2
 80009b6:	0019      	movs	r1, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	001a      	movs	r2, r3
 80009bc:	f004 f956 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff fba0 	bl	8000108 <strlen>
 80009c8:	0003      	movs	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	2301      	movs	r3, #1
 80009ce:	425b      	negs	r3, r3
 80009d0:	1939      	adds	r1, r7, r4
 80009d2:	482f      	ldr	r0, [pc, #188]	; (8000a90 <VLPT_TASK+0x15c>)
 80009d4:	f001 fbdc 	bl	8002190 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <VLPT_TASK+0x150>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2201      	movs	r2, #1
 80009de:	4252      	negs	r2, r2
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 fd3a 	bl	800345c <xQueueSemaphoreTake>

		itoa (resource[indx], sresource, 10);
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <VLPT_TASK+0x160>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <VLPT_TASK+0x164>)
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	58d3      	ldr	r3, [r2, r3]
 80009f2:	25a8      	movs	r5, #168	; 0xa8
 80009f4:	1979      	adds	r1, r7, r5
 80009f6:	220a      	movs	r2, #10
 80009f8:	0018      	movs	r0, r3
 80009fa:	f004 f933 	bl	8004c64 <itoa>
		strcpy (str, "Leaving VLPT Task\n Data ACCESSED is:: ");
 80009fe:	0020      	movs	r0, r4
 8000a00:	183b      	adds	r3, r7, r0
 8000a02:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <VLPT_TASK+0x168>)
 8000a04:	ca52      	ldmia	r2!, {r1, r4, r6}
 8000a06:	c352      	stmia	r3!, {r1, r4, r6}
 8000a08:	ca52      	ldmia	r2!, {r1, r4, r6}
 8000a0a:	c352      	stmia	r3!, {r1, r4, r6}
 8000a0c:	ca52      	ldmia	r2!, {r1, r4, r6}
 8000a0e:	c352      	stmia	r3!, {r1, r4, r6}
 8000a10:	8811      	ldrh	r1, [r2, #0]
 8000a12:	8019      	strh	r1, [r3, #0]
 8000a14:	7892      	ldrb	r2, [r2, #2]
 8000a16:	709a      	strb	r2, [r3, #2]
		strcat (str, sresource);
 8000a18:	197a      	adds	r2, r7, r5
 8000a1a:	0004      	movs	r4, r0
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f004 f934 	bl	8004c8e <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff fb6d 	bl	8000108 <strlen>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	001a      	movs	r2, r3
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	189a      	adds	r2, r3, r2
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <VLPT_TASK+0x16c>)
 8000a38:	0010      	movs	r0, r2
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2321      	movs	r3, #33	; 0x21
 8000a3e:	001a      	movs	r2, r3
 8000a40:	f004 f914 	bl	8004c6c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fb5e 	bl	8000108 <strlen>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	1939      	adds	r1, r7, r4
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <VLPT_TASK+0x15c>)
 8000a58:	f001 fb9a 	bl	8002190 <HAL_UART_Transmit>

		indx++;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <VLPT_TASK+0x160>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <VLPT_TASK+0x160>)
 8000a64:	601a      	str	r2, [r3, #0]
		if (indx>2) indx=0;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <VLPT_TASK+0x160>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	dd02      	ble.n	8000a74 <VLPT_TASK+0x140>
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <VLPT_TASK+0x160>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <VLPT_TASK+0x170>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 f85a 	bl	8003b30 <vTaskDelay>
	{
 8000a7c:	e762      	b.n	8000944 <VLPT_TASK+0x10>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	08004ee0 	.word	0x08004ee0
 8000a84:	20000fd8 	.word	0x20000fd8
 8000a88:	08004dc0 	.word	0x08004dc0
 8000a8c:	08004dd8 	.word	0x08004dd8
 8000a90:	20000fe0 	.word	0x20000fe0
 8000a94:	20000288 	.word	0x20000288
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08004f18 	.word	0x08004f18
 8000aa0:	08004e04 	.word	0x08004e04
 8000aa4:	00000bb8 	.word	0x00000bb8

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f94b 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40012c00 	.word	0x40012c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_MspInit+0x50>)
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_MspInit+0x50>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	619a      	str	r2, [r3, #24]
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x50>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x50>)
 8000af8:	69da      	ldr	r2, [r3, #28]
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x50>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0549      	lsls	r1, r1, #21
 8000b00:	430a      	orrs	r2, r1
 8000b02:	61da      	str	r2, [r3, #28]
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x50>)
 8000b06:	69da      	ldr	r2, [r3, #28]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	055b      	lsls	r3, r3, #21
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b12:	2302      	movs	r3, #2
 8000b14:	425b      	negs	r3, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	2103      	movs	r1, #3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f9be 	bl	8000e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f004 f89d 	bl	8004c7e <memset>
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <HAL_UART_MspInit+0xa0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d13a      	bne.n	8000bc4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0289      	lsls	r1, r1, #10
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0xa4>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	2390      	movs	r3, #144	; 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fa16 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f000 f96f 	bl	8000e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f000 f981 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00b      	add	sp, #44	; 0x2c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	0019      	movs	r1, r3
 8000bea:	200d      	movs	r0, #13
 8000bec:	f000 f956 	bl	8000e9c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000bf0:	200d      	movs	r0, #13
 8000bf2:	f000 f968 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_InitTick+0xa8>)
 8000bf8:	699a      	ldr	r2, [r3, #24]
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_InitTick+0xa8>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0109      	lsls	r1, r1, #4
 8000c00:	430a      	orrs	r2, r1
 8000c02:	619a      	str	r2, [r3, #24]
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c12:	230c      	movs	r3, #12
 8000c14:	18fa      	adds	r2, r7, r3
 8000c16:	2310      	movs	r3, #16
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 ffd9 	bl	8001bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c22:	f000 ffc1 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000c26:	0003      	movs	r3, r0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	4914      	ldr	r1, [pc, #80]	; (8000c80 <HAL_InitTick+0xac>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fa72 	bl	8000118 <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	3b01      	subs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_InitTick+0xb4>)
 8000c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_InitTick+0xb8>)
 8000c44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c48:	6a3a      	ldr	r2, [r7, #32]
 8000c4a:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 ffe4 	bl	8001c28 <HAL_TIM_Base_Init>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 f836 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	e000      	b.n	8000c72 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b00a      	add	sp, #40	; 0x28
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	000f4240 	.word	0x000f4240
 8000c84:	20001068 	.word	0x20001068
 8000c88:	40012c00 	.word	0x40012c00
 8000c8c:	000003e7 	.word	0x000003e7

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 f864 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20001068 	.word	0x20001068

08000cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <USART2_IRQHandler+0x14>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 fb12 	bl	80022e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000fe0 	.word	0x20000fe0

08000ccc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d02:	f7ff ffe3 	bl	8000ccc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d06:	f003 ff71 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff faa9 	bl	8000260 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d1c:	08004fb0 	.word	0x08004fb0
  ldr r2, =_sbss
 8000d20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d24:	200010b4 	.word	0x200010b4

08000d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_IRQHandler>
	...

08000d2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_Init+0x24>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_Init+0x24>)
 8000d36:	2110      	movs	r1, #16
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff49 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d42:	f7ff fec9 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x1c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x20>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	18d2      	adds	r2, r2, r3
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_IncTick+0x20>)
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	20000010 	.word	0x20000010
 8000d74:	200010b0 	.word	0x200010b0

08000d78 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	200010b0 	.word	0x200010b0

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0002      	movs	r2, r0
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d9e:	d809      	bhi.n	8000db4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	001a      	movs	r2, r3
 8000da6:	231f      	movs	r3, #31
 8000da8:	401a      	ands	r2, r3
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_EnableIRQ+0x30>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	4091      	lsls	r1, r2
 8000db0:	000a      	movs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
  }
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd4:	d828      	bhi.n	8000e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <__NVIC_SetPriority+0xd4>)
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	589b      	ldr	r3, [r3, r2]
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	0011      	movs	r1, r2
 8000dec:	2203      	movs	r2, #3
 8000dee:	400a      	ands	r2, r1
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	21ff      	movs	r1, #255	; 0xff
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	401a      	ands	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	4003      	ands	r3, r0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	481f      	ldr	r0, [pc, #124]	; (8000e94 <__NVIC_SetPriority+0xd4>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	33c0      	adds	r3, #192	; 0xc0
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e26:	e031      	b.n	8000e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <__NVIC_SetPriority+0xd8>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0019      	movs	r1, r3
 8000e30:	230f      	movs	r3, #15
 8000e32:	400b      	ands	r3, r1
 8000e34:	3b08      	subs	r3, #8
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3306      	adds	r3, #6
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	3304      	adds	r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1dfa      	adds	r2, r7, #7
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	0011      	movs	r1, r2
 8000e48:	2203      	movs	r2, #3
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	21ff      	movs	r1, #255	; 0xff
 8000e50:	4091      	lsls	r1, r2
 8000e52:	000a      	movs	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	401a      	ands	r2, r3
 8000e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	401a      	ands	r2, r3
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	2303      	movs	r3, #3
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <__NVIC_SetPriority+0xd8>)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	001c      	movs	r4, r3
 8000e78:	230f      	movs	r3, #15
 8000e7a:	4023      	ands	r3, r4
 8000e7c:	3b08      	subs	r3, #8
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	430a      	orrs	r2, r1
 8000e82:	3306      	adds	r3, #6
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	18c3      	adds	r3, r0, r3
 8000e88:	3304      	adds	r3, #4
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b003      	add	sp, #12
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	1c02      	adds	r2, r0, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff81 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	0002      	movs	r2, r0
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ff57 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2221      	movs	r2, #33	; 0x21
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2204      	movs	r2, #4
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	2100      	movs	r1, #0
 8000f06:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e020      	b.n	8000f4e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210e      	movs	r1, #14
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	438a      	bics	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	2101      	movs	r1, #1
 8000f36:	4091      	lsls	r1, r2
 8000f38:	000a      	movs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2221      	movs	r2, #33	; 0x21
 8000f40:	2101      	movs	r1, #1
 8000f42:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2220      	movs	r2, #32
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	210f      	movs	r1, #15
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2221      	movs	r2, #33	; 0x21
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d006      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2204      	movs	r2, #4
 8000f76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e028      	b.n	8000fd2 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	210e      	movs	r1, #14
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4091      	lsls	r1, r2
 8000fac:	000a      	movs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2221      	movs	r2, #33	; 0x21
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	0010      	movs	r0, r2
 8000fd0:	4798      	blx	r3
    } 
  }
  return status;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e14f      	b.n	8001290 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x28>
 8001006:	e140      	b.n	800128a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	2201      	movs	r2, #1
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2207      	movs	r2, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2107      	movs	r1, #7
 80010f6:	400b      	ands	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	6939      	ldr	r1, [r7, #16]
 8001110:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x174>
 8001152:	e09a      	b.n	800128a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	589b      	ldr	r3, [r3, r2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	2390      	movs	r3, #144	; 0x90
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	429a      	cmp	r2, r3
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x1e2>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x1de>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x1da>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011c2:	2300      	movs	r3, #0
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	2103      	movs	r1, #3
 80011c8:	400a      	ands	r2, r1
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	4013      	ands	r3, r2
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	035b      	lsls	r3, r3, #13
 800124e:	4013      	ands	r3, r2
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	039b      	lsls	r3, r3, #14
 8001278:	4013      	ands	r3, r2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e13      	subs	r3, r2, #0
 800129a:	d000      	beq.n	800129e <HAL_GPIO_Init+0x2be>
 800129c:	e6a8      	b.n	8000ff0 <HAL_GPIO_Init+0x10>
  } 
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b006      	add	sp, #24
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	0008      	movs	r0, r1
 80012ca:	0011      	movs	r1, r2
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	1c02      	adds	r2, r0, #0
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	1c7b      	adds	r3, r7, #1
 80012d4:	1c0a      	adds	r2, r1, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	1c7b      	adds	r3, r7, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e301      	b.n	8001912 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x1e>
 8001318:	e08d      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800131a:	4bc3      	ldr	r3, [pc, #780]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	4013      	ands	r3, r2
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00e      	beq.n	8001344 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001326:	4bc0      	ldr	r3, [pc, #768]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	220c      	movs	r2, #12
 800132c:	4013      	ands	r3, r2
 800132e:	2b08      	cmp	r3, #8
 8001330:	d116      	bne.n	8001360 <HAL_RCC_OscConfig+0x64>
 8001332:	4bbd      	ldr	r3, [pc, #756]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	401a      	ands	r2, r3
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	429a      	cmp	r2, r3
 8001342:	d10d      	bne.n	8001360 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4bb8      	ldr	r3, [pc, #736]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x56>
 8001350:	e070      	b.n	8001434 <HAL_RCC_OscConfig+0x138>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d000      	beq.n	800135c <HAL_RCC_OscConfig+0x60>
 800135a:	e06b      	b.n	8001434 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e2d8      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x7c>
 8001368:	4baf      	ldr	r3, [pc, #700]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4bae      	ldr	r3, [pc, #696]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e02f      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x9e>
 8001380:	4ba9      	ldr	r3, [pc, #676]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4ba8      	ldr	r3, [pc, #672]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001386:	49a9      	ldr	r1, [pc, #676]	; (800162c <HAL_RCC_OscConfig+0x330>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4ba6      	ldr	r3, [pc, #664]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4ba5      	ldr	r3, [pc, #660]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001392:	49a7      	ldr	r1, [pc, #668]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e01e      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0xc4>
 80013a2:	4ba1      	ldr	r3, [pc, #644]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba0      	ldr	r3, [pc, #640]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	02c9      	lsls	r1, r1, #11
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4b9d      	ldr	r3, [pc, #628]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b9c      	ldr	r3, [pc, #624]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0249      	lsls	r1, r1, #9
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 80013c0:	4b99      	ldr	r3, [pc, #612]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b98      	ldr	r3, [pc, #608]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	4999      	ldr	r1, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x330>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b96      	ldr	r3, [pc, #600]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b95      	ldr	r3, [pc, #596]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	4997      	ldr	r1, [pc, #604]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcca 	bl	8000d78 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fcc5 	bl	8000d78 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e28a      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0xee>
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fcb5 	bl	8000d78 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fcb0 	bl	8000d78 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e275      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b80      	ldr	r3, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x118>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x146>
 8001440:	e069      	b.n	8001516 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001442:	4b79      	ldr	r3, [pc, #484]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	220c      	movs	r2, #12
 8001448:	4013      	ands	r3, r2
 800144a:	d00b      	beq.n	8001464 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800144c:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b08      	cmp	r3, #8
 8001456:	d11c      	bne.n	8001492 <HAL_RCC_OscConfig+0x196>
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	4013      	ands	r3, r2
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001464:	4b70      	ldr	r3, [pc, #448]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x17e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e24b      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b6b      	ldr	r3, [pc, #428]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	22f8      	movs	r2, #248	; 0xf8
 8001480:	4393      	bics	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00da      	lsls	r2, r3, #3
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001490:	e041      	b.n	8001516 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc67 	bl	8000d78 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc62 	bl	8000d78 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e227      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f1      	beq.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4b52      	ldr	r3, [pc, #328]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc42 	bl	8000d78 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc3d 	bl	8000d78 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e202      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2208      	movs	r2, #8
 800151c:	4013      	ands	r3, r2
 800151e:	d036      	beq.n	800158e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d019      	beq.n	800155c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800152a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fc20 	bl	8000d78 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fc1b 	bl	8000d78 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1e0      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d0f1      	beq.n	800153e <HAL_RCC_OscConfig+0x242>
 800155a:	e018      	b.n	800158e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800155e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fc06 	bl	8000d78 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fc01 	bl	8000d78 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1c6      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d1f1      	bne.n	8001572 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x29e>
 8001598:	e0b4      	b.n	8001704 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	201f      	movs	r0, #31
 800159c:	183b      	adds	r3, r7, r0
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	055b      	lsls	r3, r3, #21
 80015aa:	4013      	ands	r3, r2
 80015ac:	d110      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	430a      	orrs	r2, r1
 80015ba:	61da      	str	r2, [r3, #28]
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ca:	183b      	adds	r3, r7, r0
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d11a      	bne.n	8001612 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fbc5 	bl	8000d78 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff fbc0 	bl	8000d78 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e185      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0x33c>
 800161a:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_RCC_OscConfig+0x32c>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	621a      	str	r2, [r3, #32]
 8001626:	e035      	b.n	8001694 <HAL_RCC_OscConfig+0x398>
 8001628:	40021000 	.word	0x40021000
 800162c:	fffeffff 	.word	0xfffeffff
 8001630:	fffbffff 	.word	0xfffbffff
 8001634:	40007000 	.word	0x40007000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x35e>
 8001640:	4bb6      	ldr	r3, [pc, #728]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	4bb5      	ldr	r3, [pc, #724]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001646:	2101      	movs	r1, #1
 8001648:	438a      	bics	r2, r1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	4bb3      	ldr	r3, [pc, #716]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4bb2      	ldr	r3, [pc, #712]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001652:	2104      	movs	r1, #4
 8001654:	438a      	bics	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x398>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x380>
 8001662:	4bae      	ldr	r3, [pc, #696]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	4bad      	ldr	r3, [pc, #692]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001668:	2104      	movs	r1, #4
 800166a:	430a      	orrs	r2, r1
 800166c:	621a      	str	r2, [r3, #32]
 800166e:	4bab      	ldr	r3, [pc, #684]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	4baa      	ldr	r3, [pc, #680]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	621a      	str	r2, [r3, #32]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0x398>
 800167c:	4ba7      	ldr	r3, [pc, #668]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	4ba6      	ldr	r3, [pc, #664]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	621a      	str	r2, [r3, #32]
 8001688:	4ba4      	ldr	r3, [pc, #656]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800168e:	2104      	movs	r1, #4
 8001690:	438a      	bics	r2, r1
 8001692:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d014      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fb6c 	bl	8000d78 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb67 	bl	8000d78 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a9b      	ldr	r2, [pc, #620]	; (8001920 <HAL_RCC_OscConfig+0x624>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e12b      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	4b98      	ldr	r3, [pc, #608]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3aa>
 80016c4:	e013      	b.n	80016ee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb57 	bl	8000d78 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	e009      	b.n	80016e4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb52 	bl	8000d78 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a91      	ldr	r2, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x624>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e116      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b8d      	ldr	r3, [pc, #564]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ee:	231f      	movs	r3, #31
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	4b87      	ldr	r3, [pc, #540]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80016fe:	4989      	ldr	r1, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001700:	400a      	ands	r2, r1
 8001702:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2210      	movs	r2, #16
 800170a:	4013      	ands	r3, r2
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d12a      	bne.n	800176c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171a:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800171c:	2104      	movs	r1, #4
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001722:	4b7e      	ldr	r3, [pc, #504]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb23 	bl	8000d78 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001738:	f7ff fb1e 	bl	8000d78 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0e3      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800174a:	4b74      	ldr	r3, [pc, #464]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0f1      	beq.n	8001738 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001754:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	22f8      	movs	r2, #248	; 0xf8
 800175a:	4393      	bics	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	00da      	lsls	r2, r3, #3
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	e034      	b.n	80017d6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	3305      	adds	r3, #5
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001774:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800177a:	2104      	movs	r1, #4
 800177c:	438a      	bics	r2, r1
 800177e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001780:	4b66      	ldr	r3, [pc, #408]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	22f8      	movs	r2, #248	; 0xf8
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	00da      	lsls	r2, r3, #3
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001792:	430a      	orrs	r2, r1
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
 8001796:	e01e      	b.n	80017d6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001798:	4b60      	ldr	r3, [pc, #384]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800179a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800179e:	2104      	movs	r1, #4
 80017a0:	430a      	orrs	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fae2 	bl	8000d78 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017ba:	f7ff fadd 	bl	8000d78 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0a2      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f1      	bne.n	80017ba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4e4>
 80017de:	e097      	b.n	8001910 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b4e      	ldr	r3, [pc, #312]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	220c      	movs	r2, #12
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x4f2>
 80017ec:	e06b      	b.n	80018c6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d14c      	bne.n	8001890 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80017fc:	494a      	ldr	r1, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x62c>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fab9 	bl	8000d78 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fab4 	bl	8000d78 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e079      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	220f      	movs	r2, #15
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a3a      	ldr	r2, [pc, #232]	; (800192c <HAL_RCC_OscConfig+0x630>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	431a      	orrs	r2, r3
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_OscConfig+0x620>)
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	0449      	lsls	r1, r1, #17
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fa87 	bl	8000d78 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa82 	bl	8000d78 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e047      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x574>
 800188e:	e03f      	b.n	8001910 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001896:	4924      	ldr	r1, [pc, #144]	; (8001928 <HAL_RCC_OscConfig+0x62c>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fa6c 	bl	8000d78 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fa67 	bl	8000d78 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e02c      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	049b      	lsls	r3, r3, #18
 80018c0:	4013      	ands	r3, r2
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5aa>
 80018c4:	e024      	b.n	8001910 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e01f      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x620>)
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d10e      	bne.n	800190c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	220f      	movs	r2, #15
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	23f0      	movs	r3, #240	; 0xf0
 8001900:	039b      	lsls	r3, r3, #14
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b008      	add	sp, #32
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff
 8001928:	feffffff 	.word	0xfeffffff
 800192c:	ffc2ffff 	.word	0xffc2ffff

08001930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b3      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	4013      	ands	r3, r2
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d911      	bls.n	8001976 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e09a      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d015      	beq.n	80019ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2204      	movs	r2, #4
 8001986:	4013      	ands	r3, r2
 8001988:	d006      	beq.n	8001998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001990:	21e0      	movs	r1, #224	; 0xe0
 8001992:	00c9      	lsls	r1, r1, #3
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	22f0      	movs	r2, #240	; 0xf0
 800199e:	4393      	bics	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d114      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e06e      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e062      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e05b      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	4393      	bics	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f9b6 	bl	8000d78 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7ff f9b1 	bl	8000d78 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_RCC_ClockConfig+0x18c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e042      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1ec      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d211      	bcs.n	8001a6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_RCC_ClockConfig+0x184>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e020      	b.n	8001aac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_RCC_ClockConfig+0x190>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a88:	f000 f820 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x188>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	220f      	movs	r2, #15
 8001a96:	4013      	ands	r3, r2
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x194>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	40da      	lsrs	r2, r3
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x198>)
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff f895 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	00001388 	.word	0x00001388
 8001ac0:	fffff8ff 	.word	0xfffff8ff
 8001ac4:	08004f68 	.word	0x08004f68
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b08f      	sub	sp, #60	; 0x3c
 8001ad0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ad2:	2314      	movs	r3, #20
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ada:	c313      	stmia	r3!, {r0, r1, r4}
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ae6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	220c      	movs	r2, #12
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d002      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d003      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x50>
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b1a:	e02d      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	220f      	movs	r2, #15
 8001b22:	4013      	ands	r3, r2
 8001b24:	2214      	movs	r2, #20
 8001b26:	18ba      	adds	r2, r7, r2
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	220f      	movs	r2, #15
 8001b32:	4013      	ands	r3, r2
 8001b34:	1d3a      	adds	r2, r7, #4
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	4013      	ands	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b48:	f7fe fae6 	bl	8000118 <__udivsi3>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	001a      	movs	r2, r3
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	4353      	muls	r3, r2
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
 8001b56:	e009      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	0152      	lsls	r2, r2, #5
 8001b5e:	1a52      	subs	r2, r2, r1
 8001b60:	0193      	lsls	r3, r2, #6
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	185b      	adds	r3, r3, r1
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b70:	e002      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b00f      	add	sp, #60	; 0x3c
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	08004f40 	.word	0x08004f40
 8001b88:	08004f50 	.word	0x08004f50
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}    
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004f78 	.word	0x08004f78

08001bd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_RCC_GetClockConfig+0x4c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_GetClockConfig+0x4c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	22f0      	movs	r2, #240	; 0xf0
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_RCC_GetClockConfig+0x4c>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	23e0      	movs	r3, #224	; 0xe0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	401a      	ands	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_GetClockConfig+0x50>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	401a      	ands	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40022000 	.word	0x40022000

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e042      	b.n	8001cc0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	223d      	movs	r2, #61	; 0x3d
 8001c3e:	5c9b      	ldrb	r3, [r3, r2]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223c      	movs	r2, #60	; 0x3c
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 f839 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	223d      	movs	r2, #61	; 0x3d
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	0019      	movs	r1, r3
 8001c68:	0010      	movs	r0, r2
 8001c6a:	f000 f9b7 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2246      	movs	r2, #70	; 0x46
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223e      	movs	r2, #62	; 0x3e
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2241      	movs	r2, #65	; 0x41
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2242      	movs	r2, #66	; 0x42
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2243      	movs	r2, #67	; 0x43
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2244      	movs	r2, #68	; 0x44
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2245      	movs	r2, #69	; 0x45
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223d      	movs	r2, #61	; 0x3d
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e035      	b.n	8001d5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	223d      	movs	r2, #61	; 0x3d
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_TIM_Base_Start_IT+0x8c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_TIM_Base_Start_IT+0x4e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_TIM_Base_Start_IT+0x90>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_TIM_Base_Start_IT+0x4e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIM_Base_Start_IT+0x94>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d111      	bne.n	8001d4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d010      	beq.n	8001d5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d48:	e007      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40014000 	.word	0x40014000

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d124      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d11d      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4252      	negs	r2, r2
 8001d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2203      	movs	r2, #3
 8001dac:	4013      	ands	r3, r2
 8001dae:	d004      	beq.n	8001dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 f8fa 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001db8:	e007      	b.n	8001dca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 f8ed 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f000 f8f9 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d125      	bne.n	8001e2a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2204      	movs	r2, #4
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11e      	bne.n	8001e2a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2205      	movs	r2, #5
 8001df2:	4252      	negs	r2, r2
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 f8cd 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e12:	e007      	b.n	8001e24 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 f8c0 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f8cc 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2208      	movs	r2, #8
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d124      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11d      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2209      	movs	r2, #9
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2204      	movs	r2, #4
 8001e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 f8a1 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f894 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f8a0 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d125      	bne.n	8001edc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2210      	movs	r2, #16
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d11e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2211      	movs	r2, #17
 8001ea4:	4252      	negs	r2, r2
 8001ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f874 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e007      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 f867 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f873 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10f      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2202      	movs	r2, #2
 8001efe:	4252      	negs	r2, r2
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7fe fdcf 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d10f      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b80      	cmp	r3, #128	; 0x80
 8001f24:	d108      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2281      	movs	r2, #129	; 0x81
 8001f2c:	4252      	negs	r2, r2
 8001f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f8d0 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d10f      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d108      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2241      	movs	r2, #65	; 0x41
 8001f5a:	4252      	negs	r2, r2
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f833 	bl	8001fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d10f      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d108      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2221      	movs	r2, #33	; 0x21
 8001f88:	4252      	negs	r2, r2
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f89a 	bl	80020c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <TIM_Base_SetConfig+0xd0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <TIM_Base_SetConfig+0x20>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <TIM_Base_SetConfig+0xd4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d108      	bne.n	800200e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2270      	movs	r2, #112	; 0x70
 8002000:	4393      	bics	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <TIM_Base_SetConfig+0xd0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0x62>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0xd4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0x62>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <TIM_Base_SetConfig+0xd8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0x62>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <TIM_Base_SetConfig+0xdc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0x62>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <TIM_Base_SetConfig+0xe0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <TIM_Base_SetConfig+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <TIM_Base_SetConfig+0xe8>)
 8002042:	4013      	ands	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	4393      	bics	r3, r2
 8002056:	001a      	movs	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <TIM_Base_SetConfig+0xd0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00b      	beq.n	8002096 <TIM_Base_SetConfig+0xba>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <TIM_Base_SetConfig+0xdc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0xba>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <TIM_Base_SetConfig+0xe0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0xba>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <TIM_Base_SetConfig+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d103      	bne.n	800209e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	615a      	str	r2, [r3, #20]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40002000 	.word	0x40002000
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	fffffcff 	.word	0xfffffcff

080020c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e044      	b.n	8002184 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2274      	movs	r2, #116	; 0x74
 8002106:	2100      	movs	r1, #0
 8002108:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe fd0d 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fbb6 	bl	800289c <UART_SetConfig>
 8002130:	0003      	movs	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e024      	b.n	8002184 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fce9 	bl	8002b1c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	490d      	ldr	r1, [pc, #52]	; (800218c <HAL_UART_Init+0xa4>)
 8002156:	400a      	ands	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2108      	movs	r1, #8
 8002166:	438a      	bics	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fd81 	bl	8002c84 <UART_CheckIdleState>
 8002182:	0003      	movs	r3, r0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}
 800218c:	fffff7ff 	.word	0xfffff7ff

08002190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	1dbb      	adds	r3, r7, #6
 800219e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d000      	beq.n	80021aa <HAL_UART_Transmit+0x1a>
 80021a8:	e096      	b.n	80022d8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_UART_Transmit+0x28>
 80021b0:	1dbb      	adds	r3, r7, #6
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e08e      	b.n	80022da <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	015b      	lsls	r3, r3, #5
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d109      	bne.n	80021dc <HAL_UART_Transmit+0x4c>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d001      	beq.n	80021dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e07e      	b.n	80022da <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2274      	movs	r2, #116	; 0x74
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Transmit+0x5a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e077      	b.n	80022da <HAL_UART_Transmit+0x14a>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2274      	movs	r2, #116	; 0x74
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	2100      	movs	r1, #0
 80021f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2221      	movs	r2, #33	; 0x21
 80021fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002200:	f7fe fdba 	bl	8000d78 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1dba      	adds	r2, r7, #6
 800220c:	2150      	movs	r1, #80	; 0x50
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1dba      	adds	r2, r7, #6
 8002216:	2152      	movs	r1, #82	; 0x52
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	429a      	cmp	r2, r3
 8002226:	d108      	bne.n	800223a <HAL_UART_Transmit+0xaa>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e003      	b.n	8002242 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2274      	movs	r2, #116	; 0x74
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800224a:	e02d      	b.n	80022a8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0013      	movs	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	f000 fd5b 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d001      	beq.n	8002266 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e039      	b.n	80022da <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	05d2      	lsls	r2, r2, #23
 8002276:	0dd2      	lsrs	r2, r2, #23
 8002278:	b292      	uxth	r2, r2
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	3302      	adds	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e008      	b.n	8002296 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b292      	uxth	r2, r2
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2252      	movs	r2, #82	; 0x52
 800229a:	5a9b      	ldrh	r3, [r3, r2]
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b299      	uxth	r1, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2252      	movs	r2, #82	; 0x52
 80022a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2252      	movs	r2, #82	; 0x52
 80022ac:	5a9b      	ldrh	r3, [r3, r2]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1cb      	bne.n	800224c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	0013      	movs	r3, r2
 80022be:	2200      	movs	r2, #0
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	f000 fd27 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d001      	beq.n	80022ce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e005      	b.n	80022da <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b008      	add	sp, #32
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b0ab      	sub	sp, #172	; 0xac
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	22a4      	movs	r2, #164	; 0xa4
 80022f4:	18b9      	adds	r1, r7, r2
 80022f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	20a0      	movs	r0, #160	; 0xa0
 8002300:	1839      	adds	r1, r7, r0
 8002302:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	219c      	movs	r1, #156	; 0x9c
 800230c:	1879      	adds	r1, r7, r1
 800230e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002310:	0011      	movs	r1, r2
 8002312:	18bb      	adds	r3, r7, r2
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a99      	ldr	r2, [pc, #612]	; (800257c <HAL_UART_IRQHandler+0x298>)
 8002318:	4013      	ands	r3, r2
 800231a:	2298      	movs	r2, #152	; 0x98
 800231c:	18bc      	adds	r4, r7, r2
 800231e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002320:	18bb      	adds	r3, r7, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002328:	187b      	adds	r3, r7, r1
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	4013      	ands	r3, r2
 8002330:	d00f      	beq.n	8002352 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002332:	183b      	adds	r3, r7, r0
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2220      	movs	r2, #32
 8002338:	4013      	ands	r3, r2
 800233a:	d00a      	beq.n	8002352 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002340:	2b00      	cmp	r3, #0
 8002342:	d100      	bne.n	8002346 <HAL_UART_IRQHandler+0x62>
 8002344:	e27e      	b.n	8002844 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	0010      	movs	r0, r2
 800234e:	4798      	blx	r3
      }
      return;
 8002350:	e278      	b.n	8002844 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002352:	2398      	movs	r3, #152	; 0x98
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d100      	bne.n	800235e <HAL_UART_IRQHandler+0x7a>
 800235c:	e114      	b.n	8002588 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800235e:	239c      	movs	r3, #156	; 0x9c
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d106      	bne.n	8002378 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a83      	ldr	r2, [pc, #524]	; (8002580 <HAL_UART_IRQHandler+0x29c>)
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_UART_IRQHandler+0x94>
 8002376:	e107      	b.n	8002588 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002378:	23a4      	movs	r3, #164	; 0xa4
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4013      	ands	r3, r2
 8002382:	d012      	beq.n	80023aa <HAL_UART_IRQHandler+0xc6>
 8002384:	23a0      	movs	r3, #160	; 0xa0
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d00b      	beq.n	80023aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	589b      	ldr	r3, [r3, r2]
 80023a0:	2201      	movs	r2, #1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023aa:	23a4      	movs	r3, #164	; 0xa4
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d011      	beq.n	80023da <HAL_UART_IRQHandler+0xf6>
 80023b6:	239c      	movs	r3, #156	; 0x9c
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2202      	movs	r2, #2
 80023c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	2204      	movs	r2, #4
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023da:	23a4      	movs	r3, #164	; 0xa4
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2204      	movs	r2, #4
 80023e2:	4013      	ands	r3, r2
 80023e4:	d011      	beq.n	800240a <HAL_UART_IRQHandler+0x126>
 80023e6:	239c      	movs	r3, #156	; 0x9c
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2204      	movs	r2, #4
 80023f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	589b      	ldr	r3, [r3, r2]
 8002400:	2202      	movs	r2, #2
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800240a:	23a4      	movs	r3, #164	; 0xa4
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2208      	movs	r2, #8
 8002412:	4013      	ands	r3, r2
 8002414:	d017      	beq.n	8002446 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002416:	23a0      	movs	r3, #160	; 0xa0
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	4013      	ands	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002422:	239c      	movs	r3, #156	; 0x9c
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800242c:	d00b      	beq.n	8002446 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2208      	movs	r2, #8
 8002434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	589b      	ldr	r3, [r3, r2]
 800243c:	2208      	movs	r2, #8
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002446:	23a4      	movs	r3, #164	; 0xa4
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4013      	ands	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_UART_IRQHandler+0x198>
 8002454:	23a0      	movs	r3, #160	; 0xa0
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	04db      	lsls	r3, r3, #19
 800245e:	4013      	ands	r3, r2
 8002460:	d00c      	beq.n	800247c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	589b      	ldr	r3, [r3, r2]
 8002472:	2220      	movs	r2, #32
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	589b      	ldr	r3, [r3, r2]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d100      	bne.n	8002488 <HAL_UART_IRQHandler+0x1a4>
 8002486:	e1df      	b.n	8002848 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002488:	23a4      	movs	r3, #164	; 0xa4
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2220      	movs	r2, #32
 8002490:	4013      	ands	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002494:	23a0      	movs	r3, #160	; 0xa0
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2220      	movs	r2, #32
 800249c:	4013      	ands	r3, r2
 800249e:	d008      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	0010      	movs	r0, r2
 80024b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	589b      	ldr	r3, [r3, r2]
 80024b8:	2194      	movs	r1, #148	; 0x94
 80024ba:	187a      	adds	r2, r7, r1
 80024bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2228      	movs	r2, #40	; 0x28
 80024d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024d4:	d047      	beq.n	8002566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fcdf 	bl	8002e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d137      	bne.n	800255c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ec:	f3ef 8310 	mrs	r3, PRIMASK
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80024f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f4:	2090      	movs	r0, #144	; 0x90
 80024f6:	183a      	adds	r2, r7, r0
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002500:	f383 8810 	msr	PRIMASK, r3
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2140      	movs	r1, #64	; 0x40
 8002512:	438a      	bics	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	183b      	adds	r3, r7, r0
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800251e:	f383 8810 	msr	PRIMASK, r3
}
 8002522:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_UART_IRQHandler+0x2a0>)
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	0018      	movs	r0, r3
 800253a:	f7fe fd0c 	bl	8000f56 <HAL_DMA_Abort_IT>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d01a      	beq.n	8002578 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	0018      	movs	r0, r3
 800254e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	e012      	b.n	8002578 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f98d 	bl	8002874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255a:	e00d      	b.n	8002578 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 f988 	bl	8002874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e008      	b.n	8002578 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f983 	bl	8002874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	2100      	movs	r1, #0
 8002574:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002576:	e167      	b.n	8002848 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	46c0      	nop			; (mov r8, r8)
    return;
 800257a:	e165      	b.n	8002848 <HAL_UART_IRQHandler+0x564>
 800257c:	0000080f 	.word	0x0000080f
 8002580:	04000120 	.word	0x04000120
 8002584:	08002f61 	.word	0x08002f61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258c:	2b01      	cmp	r3, #1
 800258e:	d000      	beq.n	8002592 <HAL_UART_IRQHandler+0x2ae>
 8002590:	e131      	b.n	80027f6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002592:	23a4      	movs	r3, #164	; 0xa4
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	4013      	ands	r3, r2
 800259c:	d100      	bne.n	80025a0 <HAL_UART_IRQHandler+0x2bc>
 800259e:	e12a      	b.n	80027f6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025a0:	23a0      	movs	r3, #160	; 0xa0
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2210      	movs	r2, #16
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_UART_IRQHandler+0x2ca>
 80025ac:	e123      	b.n	80027f6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2210      	movs	r2, #16
 80025b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	4013      	ands	r3, r2
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d000      	beq.n	80025c6 <HAL_UART_IRQHandler+0x2e2>
 80025c4:	e09b      	b.n	80026fe <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	217e      	movs	r1, #126	; 0x7e
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <HAL_UART_IRQHandler+0x2fa>
 80025dc:	e136      	b.n	800284c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2258      	movs	r2, #88	; 0x58
 80025e2:	5a9b      	ldrh	r3, [r3, r2]
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d300      	bcc.n	80025ee <HAL_UART_IRQHandler+0x30a>
 80025ec:	e12e      	b.n	800284c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	187a      	adds	r2, r7, r1
 80025f2:	215a      	movs	r1, #90	; 0x5a
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d06e      	beq.n	80026e0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002602:	f3ef 8310 	mrs	r3, PRIMASK
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800260a:	67bb      	str	r3, [r7, #120]	; 0x78
 800260c:	2301      	movs	r3, #1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	f383 8810 	msr	PRIMASK, r3
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	498e      	ldr	r1, [pc, #568]	; (800285c <HAL_UART_IRQHandler+0x578>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002634:	f3ef 8310 	mrs	r3, PRIMASK
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263c:	677b      	str	r3, [r7, #116]	; 0x74
 800263e:	2301      	movs	r3, #1
 8002640:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002644:	f383 8810 	msr	PRIMASK, r3
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	438a      	bics	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800266c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	673b      	str	r3, [r7, #112]	; 0x70
 8002670:	2301      	movs	r3, #1
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a4:	f3ef 8310 	mrs	r3, PRIMASK
 80026a8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ae:	2301      	movs	r3, #1
 80026b0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2110      	movs	r1, #16
 80026c6:	438a      	bics	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d0:	f383 8810 	msr	PRIMASK, r3
}
 80026d4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	0018      	movs	r0, r3
 80026dc:	f7fe fc03 	bl	8000ee6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2258      	movs	r2, #88	; 0x58
 80026e4:	5a9a      	ldrh	r2, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	215a      	movs	r1, #90	; 0x5a
 80026ea:	5a5b      	ldrh	r3, [r3, r1]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f8c4 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026fc:	e0a6      	b.n	800284c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2258      	movs	r2, #88	; 0x58
 8002702:	5a99      	ldrh	r1, [r3, r2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	225a      	movs	r2, #90	; 0x5a
 8002708:	5a9b      	ldrh	r3, [r3, r2]
 800270a:	b29a      	uxth	r2, r3
 800270c:	208e      	movs	r0, #142	; 0x8e
 800270e:	183b      	adds	r3, r7, r0
 8002710:	1a8a      	subs	r2, r1, r2
 8002712:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	225a      	movs	r2, #90	; 0x5a
 8002718:	5a9b      	ldrh	r3, [r3, r2]
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d100      	bne.n	8002722 <HAL_UART_IRQHandler+0x43e>
 8002720:	e096      	b.n	8002850 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8002722:	183b      	adds	r3, r7, r0
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d100      	bne.n	800272c <HAL_UART_IRQHandler+0x448>
 800272a:	e091      	b.n	8002850 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	60fb      	str	r3, [r7, #12]
  return(result);
 8002732:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002734:	2488      	movs	r4, #136	; 0x88
 8002736:	193a      	adds	r2, r7, r4
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	2301      	movs	r3, #1
 800273c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f383 8810 	msr	PRIMASK, r3
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4943      	ldr	r1, [pc, #268]	; (8002860 <HAL_UART_IRQHandler+0x57c>)
 8002752:	400a      	ands	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	193b      	adds	r3, r7, r4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f383 8810 	msr	PRIMASK, r3
}
 8002762:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	61bb      	str	r3, [r7, #24]
  return(result);
 800276a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	2484      	movs	r4, #132	; 0x84
 800276e:	193a      	adds	r2, r7, r4
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	438a      	bics	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	193b      	adds	r3, r7, r4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ae:	f3ef 8310 	mrs	r3, PRIMASK
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	2480      	movs	r4, #128	; 0x80
 80027b8:	193a      	adds	r2, r7, r4
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2110      	movs	r1, #16
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	f383 8810 	msr	PRIMASK, r3
}
 80027e4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f848 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027f4:	e02c      	b.n	8002850 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027f6:	23a4      	movs	r3, #164	; 0xa4
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	4013      	ands	r3, r2
 8002800:	d00f      	beq.n	8002822 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002802:	23a0      	movs	r3, #160	; 0xa0
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	4013      	ands	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01e      	beq.n	8002854 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	0010      	movs	r0, r2
 800281e:	4798      	blx	r3
    }
    return;
 8002820:	e018      	b.n	8002854 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002822:	23a4      	movs	r3, #164	; 0xa4
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	4013      	ands	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_UART_IRQHandler+0x572>
 800282e:	23a0      	movs	r3, #160	; 0xa0
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	4013      	ands	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fba6 	bl	8002f8e <UART_EndTransmit_IT>
    return;
 8002842:	e008      	b.n	8002856 <HAL_UART_IRQHandler+0x572>
      return;
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	e006      	b.n	8002856 <HAL_UART_IRQHandler+0x572>
    return;
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	e004      	b.n	8002856 <HAL_UART_IRQHandler+0x572>
      return;
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	e002      	b.n	8002856 <HAL_UART_IRQHandler+0x572>
      return;
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	e000      	b.n	8002856 <HAL_UART_IRQHandler+0x572>
    return;
 8002854:	46c0      	nop			; (mov r8, r8)
  }

}
 8002856:	46bd      	mov	sp, r7
 8002858:	b02b      	add	sp, #172	; 0xac
 800285a:	bd90      	pop	{r4, r7, pc}
 800285c:	fffffeff 	.word	0xfffffeff
 8002860:	fffffedf 	.word	0xfffffedf

08002864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	000a      	movs	r2, r1
 800288e:	1cbb      	adds	r3, r7, #2
 8002890:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	b002      	add	sp, #8
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028a4:	231e      	movs	r3, #30
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a8d      	ldr	r2, [pc, #564]	; (8002b00 <UART_SetConfig+0x264>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a88      	ldr	r2, [pc, #544]	; (8002b04 <UART_SetConfig+0x268>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a7f      	ldr	r2, [pc, #508]	; (8002b08 <UART_SetConfig+0x26c>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <UART_SetConfig+0x270>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d127      	bne.n	8002972 <UART_SetConfig+0xd6>
 8002922:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <UART_SetConfig+0x274>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	2203      	movs	r2, #3
 8002928:	4013      	ands	r3, r2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d00d      	beq.n	800294a <UART_SetConfig+0xae>
 800292e:	d81b      	bhi.n	8002968 <UART_SetConfig+0xcc>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d014      	beq.n	800295e <UART_SetConfig+0xc2>
 8002934:	d818      	bhi.n	8002968 <UART_SetConfig+0xcc>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <UART_SetConfig+0xa4>
 800293a:	2b01      	cmp	r3, #1
 800293c:	d00a      	beq.n	8002954 <UART_SetConfig+0xb8>
 800293e:	e013      	b.n	8002968 <UART_SetConfig+0xcc>
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e021      	b.n	800298e <UART_SetConfig+0xf2>
 800294a:	231f      	movs	r3, #31
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e01c      	b.n	800298e <UART_SetConfig+0xf2>
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e017      	b.n	800298e <UART_SetConfig+0xf2>
 800295e:	231f      	movs	r3, #31
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2208      	movs	r2, #8
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e012      	b.n	800298e <UART_SetConfig+0xf2>
 8002968:	231f      	movs	r3, #31
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2210      	movs	r2, #16
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e00d      	b.n	800298e <UART_SetConfig+0xf2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a67      	ldr	r2, [pc, #412]	; (8002b14 <UART_SetConfig+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d104      	bne.n	8002986 <UART_SetConfig+0xea>
 800297c:	231f      	movs	r3, #31
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e003      	b.n	800298e <UART_SetConfig+0xf2>
 8002986:	231f      	movs	r3, #31
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2210      	movs	r2, #16
 800298c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	429a      	cmp	r2, r3
 8002998:	d15d      	bne.n	8002a56 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800299a:	231f      	movs	r3, #31
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d015      	beq.n	80029d0 <UART_SetConfig+0x134>
 80029a4:	dc18      	bgt.n	80029d8 <UART_SetConfig+0x13c>
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00d      	beq.n	80029c6 <UART_SetConfig+0x12a>
 80029aa:	dc15      	bgt.n	80029d8 <UART_SetConfig+0x13c>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <UART_SetConfig+0x11a>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d005      	beq.n	80029c0 <UART_SetConfig+0x124>
 80029b4:	e010      	b.n	80029d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b6:	f7ff f8f7 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 80029ba:	0003      	movs	r3, r0
 80029bc:	61bb      	str	r3, [r7, #24]
        break;
 80029be:	e012      	b.n	80029e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <UART_SetConfig+0x27c>)
 80029c2:	61bb      	str	r3, [r7, #24]
        break;
 80029c4:	e00f      	b.n	80029e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c6:	f7ff f881 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 80029ca:	0003      	movs	r3, r0
 80029cc:	61bb      	str	r3, [r7, #24]
        break;
 80029ce:	e00a      	b.n	80029e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	61bb      	str	r3, [r7, #24]
        break;
 80029d6:	e006      	b.n	80029e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029dc:	231e      	movs	r3, #30
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
        break;
 80029e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d100      	bne.n	80029ee <UART_SetConfig+0x152>
 80029ec:	e07b      	b.n	8002ae6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	005a      	lsls	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	18d2      	adds	r2, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f7fd fb89 	bl	8000118 <__udivsi3>
 8002a06:	0003      	movs	r3, r0
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	d91c      	bls.n	8002a4c <UART_SetConfig+0x1b0>
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d217      	bcs.n	8002a4c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	200e      	movs	r0, #14
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	210f      	movs	r1, #15
 8002a26:	438a      	bics	r2, r1
 8002a28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2207      	movs	r2, #7
 8002a32:	4013      	ands	r3, r2
 8002a34:	b299      	uxth	r1, r3
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	183a      	adds	r2, r7, r0
 8002a3a:	8812      	ldrh	r2, [r2, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	183a      	adds	r2, r7, r0
 8002a46:	8812      	ldrh	r2, [r2, #0]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	e04c      	b.n	8002ae6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002a4c:	231e      	movs	r3, #30
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e047      	b.n	8002ae6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a56:	231f      	movs	r3, #31
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d015      	beq.n	8002a8c <UART_SetConfig+0x1f0>
 8002a60:	dc18      	bgt.n	8002a94 <UART_SetConfig+0x1f8>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d00d      	beq.n	8002a82 <UART_SetConfig+0x1e6>
 8002a66:	dc15      	bgt.n	8002a94 <UART_SetConfig+0x1f8>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <UART_SetConfig+0x1d6>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d005      	beq.n	8002a7c <UART_SetConfig+0x1e0>
 8002a70:	e010      	b.n	8002a94 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff f899 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002a76:	0003      	movs	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]
        break;
 8002a7a:	e012      	b.n	8002aa2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <UART_SetConfig+0x27c>)
 8002a7e:	61bb      	str	r3, [r7, #24]
        break;
 8002a80:	e00f      	b.n	8002aa2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a82:	f7ff f823 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        break;
 8002a8a:	e00a      	b.n	8002aa2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	61bb      	str	r3, [r7, #24]
        break;
 8002a92:	e006      	b.n	8002aa2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a98:	231e      	movs	r3, #30
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
        break;
 8002aa0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01e      	beq.n	8002ae6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	085a      	lsrs	r2, r3, #1
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	18d2      	adds	r2, r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f7fd fb2d 	bl	8000118 <__udivsi3>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	d909      	bls.n	8002ade <UART_SetConfig+0x242>
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d204      	bcs.n	8002ade <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	e003      	b.n	8002ae6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ade:	231e      	movs	r3, #30
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002af2:	231e      	movs	r3, #30
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b008      	add	sp, #32
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	ffff69f3 	.word	0xffff69f3
 8002b04:	ffffcfff 	.word	0xffffcfff
 8002b08:	fffff4ff 	.word	0xfffff4ff
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40004400 	.word	0x40004400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <UART_AdvFeatureConfig+0x144>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <UART_AdvFeatureConfig+0x148>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <UART_AdvFeatureConfig+0x14c>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2208      	movs	r2, #8
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00b      	beq.n	8002bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <UART_AdvFeatureConfig+0x150>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <UART_AdvFeatureConfig+0x154>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <UART_AdvFeatureConfig+0x158>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <UART_AdvFeatureConfig+0x15c>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	035b      	lsls	r3, r3, #13
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d10b      	bne.n	8002c36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <UART_AdvFeatureConfig+0x160>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <UART_AdvFeatureConfig+0x164>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fffdffff 	.word	0xfffdffff
 8002c64:	fffeffff 	.word	0xfffeffff
 8002c68:	fffbffff 	.word	0xfffbffff
 8002c6c:	ffff7fff 	.word	0xffff7fff
 8002c70:	ffffefff 	.word	0xffffefff
 8002c74:	ffffdfff 	.word	0xffffdfff
 8002c78:	ffefffff 	.word	0xffefffff
 8002c7c:	ff9fffff 	.word	0xff9fffff
 8002c80:	fff7ffff 	.word	0xfff7ffff

08002c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	2100      	movs	r1, #0
 8002c92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c94:	f7fe f870 	bl	8000d78 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d10c      	bne.n	8002cc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0391      	lsls	r1, r2, #14
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <UART_CheckIdleState+0x8c>)
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f000 f82c 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d001      	beq.n	8002cc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e021      	b.n	8002d08 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d10c      	bne.n	8002cec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	03d1      	lsls	r1, r2, #15
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <UART_CheckIdleState+0x8c>)
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f000 f818 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e00d      	b.n	8002d08 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2274      	movs	r2, #116	; 0x74
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	01ffffff 	.word	0x01ffffff

08002d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b094      	sub	sp, #80	; 0x50
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d24:	e0a3      	b.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	3301      	adds	r3, #1
 8002d2a:	d100      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002d2c:	e09f      	b.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fe f823 	bl	8000d78 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13d      	bne.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8310 	mrs	r3, PRIMASK
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	2301      	movs	r3, #1
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	f383 8810 	msr	PRIMASK, r3
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	494c      	ldr	r1, [pc, #304]	; (8002e98 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d80:	2301      	movs	r3, #1
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2274      	movs	r2, #116	; 0x74
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e067      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d050      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d146      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8310 	mrs	r3, PRIMASK
 8002dee:	613b      	str	r3, [r7, #16]
  return(result);
 8002df0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	2301      	movs	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4923      	ldr	r1, [pc, #140]	; (8002e98 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e20:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e22:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e26:	2301      	movs	r3, #1
 8002e28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	438a      	bics	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	2120      	movs	r1, #32
 8002e60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2274      	movs	r2, #116	; 0x74
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e010      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	425a      	negs	r2, r3
 8002e7e:	4153      	adcs	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	001a      	movs	r2, r3
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d100      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e8c:	e74b      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b014      	add	sp, #80	; 0x50
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	fffffe5f 	.word	0xfffffe5f

08002e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4925      	ldr	r1, [pc, #148]	; (8002f5c <UART_EndRxTransfer+0xc0>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	623b      	str	r3, [r7, #32]
  return(result);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d118      	bne.n	8002f42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2110      	movs	r1, #16
 8002f32:	438a      	bics	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b00e      	add	sp, #56	; 0x38
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	fffffedf 	.word	0xfffffedf

08002f60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	225a      	movs	r2, #90	; 0x5a
 8002f72:	2100      	movs	r1, #0
 8002f74:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2252      	movs	r2, #82	; 0x52
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fc77 	bl	8002874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f96:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fc44 	bl	8002864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4252      	negs	r2, r2
 8002ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3308      	adds	r3, #8
 8003002:	001a      	movs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3308      	adds	r3, #8
 800300c:	001a      	movs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}

08003020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}

08003036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}

0800307a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	3301      	adds	r3, #1
 800308e:	d103      	bne.n	8003098 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e00c      	b.n	80030b2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3308      	adds	r3, #8
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e002      	b.n	80030a6 <vListInsert+0x2c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d2f6      	bcs.n	80030a0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d103      	bne.n	800311a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <xQueueGenericReset+0x18>
 800314a:	b672      	cpsid	i
 800314c:	e7fe      	b.n	800314c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800314e:	f001 fb0f 	bl	8004770 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	434b      	muls	r3, r1
 8003160:	18d2      	adds	r2, r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	1e59      	subs	r1, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	434b      	muls	r3, r1
 8003184:	18d2      	adds	r2, r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2244      	movs	r2, #68	; 0x44
 800318e:	21ff      	movs	r1, #255	; 0xff
 8003190:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2245      	movs	r2, #69	; 0x45
 8003196:	21ff      	movs	r1, #255	; 0xff
 8003198:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3310      	adds	r3, #16
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 feef 	bl	8003f90 <xTaskRemoveFromEventList>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d00c      	beq.n	80031d0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031b6:	f001 facb 	bl	8004750 <vPortYield>
 80031ba:	e009      	b.n	80031d0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3310      	adds	r3, #16
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7ff ff0f 	bl	8002fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3324      	adds	r3, #36	; 0x24
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff ff0a 	bl	8002fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031d0:	f001 fae0 	bl	8004794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b08b      	sub	sp, #44	; 0x2c
 80031e2:	af02      	add	r7, sp, #8
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <xQueueGenericCreate+0x18>
 80031f2:	b672      	cpsid	i
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e003      	b.n	800320a <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4353      	muls	r3, r2
 8003208:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3348      	adds	r3, #72	; 0x48
 800320e:	0018      	movs	r0, r3
 8003210:	f001 fb46 	bl	80048a0 <pvPortMalloc>
 8003214:	0003      	movs	r3, r0
 8003216:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3348      	adds	r3, #72	; 0x48
 8003222:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2246      	movs	r2, #70	; 0x46
 8003228:	2100      	movs	r1, #0
 800322a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	781c      	ldrb	r4, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	0023      	movs	r3, r4
 800323c:	f000 f805 	bl	800324a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003240:	69bb      	ldr	r3, [r7, #24]
	}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b009      	add	sp, #36	; 0x24
 8003248:	bd90      	pop	{r4, r7, pc}

0800324a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	001a      	movs	r2, r3
 8003258:	1cfb      	adds	r3, r7, #3
 800325a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e002      	b.n	8003270 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2101      	movs	r1, #1
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff ff58 	bl	8003136 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}

0800328e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <xQueueCreateCountingSemaphore+0x14>
 800329e:	b672      	cpsid	i
 80032a0:	e7fe      	b.n	80032a0 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d901      	bls.n	80032ae <xQueueCreateCountingSemaphore+0x20>
 80032aa:	b672      	cpsid	i
 80032ac:	e7fe      	b.n	80032ac <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	2100      	movs	r1, #0
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff ff92 	bl	80031de <xQueueGenericCreate>
 80032ba:	0003      	movs	r3, r0
 80032bc:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80032ca:	68fb      	ldr	r3, [r7, #12]
	}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <xQueueGenericSend+0x20>
 80032f0:	b672      	cpsid	i
 80032f2:	e7fe      	b.n	80032f2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <xQueueGenericSend+0x2e>
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <xQueueGenericSend+0x32>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericSend+0x34>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <xQueueGenericSend+0x3c>
 800330c:	b672      	cpsid	i
 800330e:	e7fe      	b.n	800330e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x4a>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <xQueueGenericSend+0x4e>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueGenericSend+0x50>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <xQueueGenericSend+0x58>
 8003328:	b672      	cpsid	i
 800332a:	e7fe      	b.n	800332a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800332c:	f000 ffc8 	bl	80042c0 <xTaskGetSchedulerState>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d102      	bne.n	800333a <xQueueGenericSend+0x66>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <xQueueGenericSend+0x6a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <xQueueGenericSend+0x6c>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <xQueueGenericSend+0x74>
 8003344:	b672      	cpsid	i
 8003346:	e7fe      	b.n	8003346 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003348:	f001 fa12 	bl	8004770 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <xQueueGenericSend+0x8a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d11e      	bne.n	800339c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f97e 	bl	8003666 <prvCopyDataToQueue>
 800336a:	0003      	movs	r3, r0
 800336c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	3324      	adds	r3, #36	; 0x24
 800337a:	0018      	movs	r0, r3
 800337c:	f000 fe08 	bl	8003f90 <xTaskRemoveFromEventList>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d007      	beq.n	8003394 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003384:	f001 f9e4 	bl	8004750 <vPortYield>
 8003388:	e004      	b.n	8003394 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003390:	f001 f9de 	bl	8004750 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003394:	f001 f9fe 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 8003398:	2301      	movs	r3, #1
 800339a:	e05b      	b.n	8003454 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033a2:	f001 f9f7 	bl	8004794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e054      	b.n	8003454 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033b0:	2314      	movs	r3, #20
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 fe47 	bl	8004048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033be:	f001 f9e9 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033c2:	f000 fc29 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033c6:	f001 f9d3 	bl	8004770 <vPortEnterCritical>
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2244      	movs	r2, #68	; 0x44
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	d103      	bne.n	80033de <xQueueGenericSend+0x10a>
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	2244      	movs	r2, #68	; 0x44
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2245      	movs	r2, #69	; 0x45
 80033e2:	5c9b      	ldrb	r3, [r3, r2]
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	d103      	bne.n	80033f2 <xQueueGenericSend+0x11e>
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2245      	movs	r2, #69	; 0x45
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	f001 f9cf 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033f6:	1d3a      	adds	r2, r7, #4
 80033f8:	2314      	movs	r3, #20
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	0011      	movs	r1, r2
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 fe36 	bl	8004070 <xTaskCheckForTimeOut>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d11e      	bne.n	8003446 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fa0a 	bl	8003824 <prvIsQueueFull>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d011      	beq.n	8003438 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	3310      	adds	r3, #16
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fd99 	bl	8003f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f989 	bl	800373c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800342a:	f000 fc01 	bl	8003c30 <xTaskResumeAll>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d18a      	bne.n	8003348 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003432:	f001 f98d 	bl	8004750 <vPortYield>
 8003436:	e787      	b.n	8003348 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f97e 	bl	800373c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003440:	f000 fbf6 	bl	8003c30 <xTaskResumeAll>
 8003444:	e780      	b.n	8003348 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f977 	bl	800373c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800344e:	f000 fbef 	bl	8003c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003452:	2300      	movs	r3, #0
		}
	}
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b00a      	add	sp, #40	; 0x28
 800345a:	bd80      	pop	{r7, pc}

0800345c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <xQueueSemaphoreTake+0x20>
 8003478:	b672      	cpsid	i
 800347a:	e7fe      	b.n	800347a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <xQueueSemaphoreTake+0x2c>
 8003484:	b672      	cpsid	i
 8003486:	e7fe      	b.n	8003486 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003488:	f000 ff1a 	bl	80042c0 <xTaskGetSchedulerState>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d102      	bne.n	8003496 <xQueueSemaphoreTake+0x3a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xQueueSemaphoreTake+0x3e>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueSemaphoreTake+0x40>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <xQueueSemaphoreTake+0x48>
 80034a0:	b672      	cpsid	i
 80034a2:	e7fe      	b.n	80034a2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034a4:	f001 f964 	bl	8004770 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01d      	beq.n	80034f0 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80034c4:	f001 f856 	bl	8004574 <pvTaskIncrementMutexHeldCount>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3310      	adds	r3, #16
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fd58 	bl	8003f90 <xTaskRemoveFromEventList>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034e4:	f001 f934 	bl	8004750 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034e8:	f001 f954 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e08b      	b.n	8003608 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <xQueueSemaphoreTake+0xa4>
 80034fc:	b672      	cpsid	i
 80034fe:	e7fe      	b.n	80034fe <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003500:	f001 f948 	bl	8004794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003504:	2300      	movs	r3, #0
 8003506:	e07f      	b.n	8003608 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800350e:	230c      	movs	r3, #12
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	0018      	movs	r0, r3
 8003514:	f000 fd98 	bl	8004048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800351c:	f001 f93a 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003520:	f000 fb7a 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003524:	f001 f924 	bl	8004770 <vPortEnterCritical>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2244      	movs	r2, #68	; 0x44
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	d103      	bne.n	800353c <xQueueSemaphoreTake+0xe0>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2244      	movs	r2, #68	; 0x44
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2245      	movs	r2, #69	; 0x45
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	d103      	bne.n	8003550 <xQueueSemaphoreTake+0xf4>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2245      	movs	r2, #69	; 0x45
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]
 8003550:	f001 f920 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003554:	003a      	movs	r2, r7
 8003556:	230c      	movs	r3, #12
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fd87 	bl	8004070 <xTaskCheckForTimeOut>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d12e      	bne.n	80035c4 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 f945 	bl	80037f8 <prvIsQueueEmpty>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d021      	beq.n	80035b6 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800357a:	f001 f8f9 	bl	8004770 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 feb8 	bl	80042f8 <xTaskPriorityInherit>
 8003588:	0003      	movs	r3, r0
 800358a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800358c:	f001 f902 	bl	8004794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3324      	adds	r3, #36	; 0x24
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fcdb 	bl	8003f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f8cb 	bl	800373c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035a6:	f000 fb43 	bl	8003c30 <xTaskResumeAll>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d000      	beq.n	80035b0 <xQueueSemaphoreTake+0x154>
 80035ae:	e779      	b.n	80034a4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80035b0:	f001 f8ce 	bl	8004750 <vPortYield>
 80035b4:	e776      	b.n	80034a4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 f8bf 	bl	800373c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035be:	f000 fb37 	bl	8003c30 <xTaskResumeAll>
 80035c2:	e76f      	b.n	80034a4 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f8b8 	bl	800373c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035cc:	f000 fb30 	bl	8003c30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f910 	bl	80037f8 <prvIsQueueEmpty>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d100      	bne.n	80035de <xQueueSemaphoreTake+0x182>
 80035dc:	e762      	b.n	80034a4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80035e4:	f001 f8c4 	bl	8004770 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f825 	bl	800363a <prvGetDisinheritPriorityAfterTimeout>
 80035f0:	0003      	movs	r3, r0
 80035f2:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 ff45 	bl	800448c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003602:	f001 f8c7 	bl	8004794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003606:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b00a      	add	sp, #40	; 0x28
 800360e:	bd80      	pop	{r7, pc}

08003610 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <uxQueueMessagesWaiting+0x12>
 800361e:	b672      	cpsid	i
 8003620:	e7fe      	b.n	8003620 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8003622:	f001 f8a5 	bl	8004770 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800362c:	f001 f8b2 	bl	8004794 <vPortExitCritical>

	return uxReturn;
 8003630:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}

0800363a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2207      	movs	r2, #7
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e001      	b.n	800365c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800365c:	68fb      	ldr	r3, [r7, #12]
	}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b004      	add	sp, #16
 8003664:	bd80      	pop	{r7, pc}

08003666 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10e      	bne.n	80036a2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d14e      	bne.n	800372a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 fe9f 	bl	80043d4 <xTaskPriorityDisinherit>
 8003696:	0003      	movs	r3, r0
 8003698:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e043      	b.n	800372a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d119      	bne.n	80036dc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6898      	ldr	r0, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	0019      	movs	r1, r3
 80036b4:	f001 fada 	bl	8004c6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	18d2      	adds	r2, r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d32b      	bcc.n	800372a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	e026      	b.n	800372a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68d8      	ldr	r0, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	0019      	movs	r1, r3
 80036e8:	f001 fac0 	bl	8004c6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	425b      	negs	r3, r3
 80036f6:	18d2      	adds	r2, r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	425b      	negs	r3, r3
 8003712:	18d2      	adds	r2, r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d105      	bne.n	800372a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	3b01      	subs	r3, #1
 8003728:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003732:	697b      	ldr	r3, [r7, #20]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003744:	f001 f814 	bl	8004770 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003748:	230f      	movs	r3, #15
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	2145      	movs	r1, #69	; 0x45
 8003750:	5c52      	ldrb	r2, [r2, r1]
 8003752:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003754:	e013      	b.n	800377e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3324      	adds	r3, #36	; 0x24
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fc14 	bl	8003f90 <xTaskRemoveFromEventList>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800376c:	f000 fcd0 	bl	8004110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003770:	210f      	movs	r1, #15
 8003772:	187b      	adds	r3, r7, r1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	187b      	adds	r3, r7, r1
 800377c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800377e:	230f      	movs	r3, #15
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b25b      	sxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	dce5      	bgt.n	8003756 <prvUnlockQueue+0x1a>
 800378a:	e000      	b.n	800378e <prvUnlockQueue+0x52>
					break;
 800378c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2245      	movs	r2, #69	; 0x45
 8003792:	21ff      	movs	r1, #255	; 0xff
 8003794:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003796:	f000 fffd 	bl	8004794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800379a:	f000 ffe9 	bl	8004770 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800379e:	230e      	movs	r3, #14
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	2144      	movs	r1, #68	; 0x44
 80037a6:	5c52      	ldrb	r2, [r2, r1]
 80037a8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037aa:	e013      	b.n	80037d4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d016      	beq.n	80037e2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3310      	adds	r3, #16
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 fbe9 	bl	8003f90 <xTaskRemoveFromEventList>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80037c2:	f000 fca5 	bl	8004110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037c6:	210e      	movs	r1, #14
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d4:	230e      	movs	r3, #14
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dce5      	bgt.n	80037ac <prvUnlockQueue+0x70>
 80037e0:	e000      	b.n	80037e4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80037e2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2244      	movs	r2, #68	; 0x44
 80037e8:	21ff      	movs	r1, #255	; 0xff
 80037ea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80037ec:	f000 ffd2 	bl	8004794 <vPortExitCritical>
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003800:	f000 ffb6 	bl	8004770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e001      	b.n	8003816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003816:	f000 ffbd 	bl	8004794 <vPortExitCritical>

	return xReturn;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b004      	add	sp, #16
 8003822:	bd80      	pop	{r7, pc}

08003824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800382c:	f000 ffa0 	bl	8004770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	429a      	cmp	r2, r3
 800383a:	d102      	bne.n	8003842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e001      	b.n	8003846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f000 ffa5 	bl	8004794 <vPortExitCritical>

	return xReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b004      	add	sp, #16
 8003852:	bd80      	pop	{r7, pc}

08003854 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b08d      	sub	sp, #52	; 0x34
 8003858:	af04      	add	r7, sp, #16
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <xTaskCreateStatic+0x18>
 8003868:	b672      	cpsid	i
 800386a:	e7fe      	b.n	800386a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <xTaskCreateStatic+0x22>
 8003872:	b672      	cpsid	i
 8003874:	e7fe      	b.n	8003874 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003876:	2354      	movs	r3, #84	; 0x54
 8003878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b54      	cmp	r3, #84	; 0x54
 800387e:	d001      	beq.n	8003884 <xTaskCreateStatic+0x30>
 8003880:	b672      	cpsid	i
 8003882:	e7fe      	b.n	8003882 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <xTaskCreateStatic+0x78>
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01d      	beq.n	80038cc <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2251      	movs	r2, #81	; 0x51
 800389e:	2102      	movs	r1, #2
 80038a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a2:	683c      	ldr	r4, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9303      	str	r3, [sp, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	9302      	str	r3, [sp, #8]
 80038b2:	2318      	movs	r3, #24
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	0023      	movs	r3, r4
 80038be:	f000 f859 	bl	8003974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f8cf 	bl	8003a68 <prvAddNewTaskToReadyList>
 80038ca:	e001      	b.n	80038d0 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038d0:	69bb      	ldr	r3, [r7, #24]
	}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b009      	add	sp, #36	; 0x24
 80038d8:	bd90      	pop	{r4, r7, pc}

080038da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038da:	b590      	push	{r4, r7, lr}
 80038dc:	b08d      	sub	sp, #52	; 0x34
 80038de:	af04      	add	r7, sp, #16
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 ffd5 	bl	80048a0 <pvPortMalloc>
 80038f6:	0003      	movs	r3, r0
 80038f8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003900:	2054      	movs	r0, #84	; 0x54
 8003902:	f000 ffcd 	bl	80048a0 <pvPortMalloc>
 8003906:	0003      	movs	r3, r0
 8003908:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
 8003916:	e006      	b.n	8003926 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	0018      	movs	r0, r3
 800391c:	f001 f866 	bl	80049ec <vPortFree>
 8003920:	e001      	b.n	8003926 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2251      	movs	r2, #81	; 0x51
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	683c      	ldr	r4, [r7, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	0023      	movs	r3, r4
 8003950:	f000 f810 	bl	8003974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f886 	bl	8003a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800395c:	2301      	movs	r3, #1
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e002      	b.n	8003968 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003962:	2301      	movs	r3, #1
 8003964:	425b      	negs	r3, r3
 8003966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003968:	69bb      	ldr	r3, [r7, #24]
	}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b009      	add	sp, #36	; 0x24
 8003970:	bd90      	pop	{r4, r7, pc}
	...

08003974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4936      	ldr	r1, [pc, #216]	; (8003a64 <prvInitialiseNewTask+0xf0>)
 800398a:	468c      	mov	ip, r1
 800398c:	4463      	add	r3, ip
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	18d3      	adds	r3, r2, r3
 8003992:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2207      	movs	r2, #7
 8003998:	4393      	bics	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2207      	movs	r2, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	d001      	beq.n	80039a8 <prvInitialiseNewTask+0x34>
 80039a4:	b672      	cpsid	i
 80039a6:	e7fe      	b.n	80039a6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	e013      	b.n	80039d6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	7818      	ldrb	r0, [r3, #0]
 80039b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b8:	2134      	movs	r1, #52	; 0x34
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	185b      	adds	r3, r3, r1
 80039c0:	1c02      	adds	r2, r0, #0
 80039c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	18d3      	adds	r3, r2, r3
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3301      	adds	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d9e8      	bls.n	80039ae <prvInitialiseNewTask+0x3a>
 80039dc:	e000      	b.n	80039e0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80039de:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	2243      	movs	r2, #67	; 0x43
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d901      	bls.n	80039f2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ee:	2306      	movs	r3, #6
 80039f0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	3304      	adds	r3, #4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff fb09 	bl	8003020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	3318      	adds	r3, #24
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff fb04 	bl	8003020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2207      	movs	r2, #7
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	2250      	movs	r2, #80	; 0x50
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 fdfc 	bl	8004640 <pxPortInitialiseStack>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b006      	add	sp, #24
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	3fffffff 	.word	0x3fffffff

08003a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a70:	f000 fe7e 	bl	8004770 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <prvAddNewTaskToReadyList+0xb0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <prvAddNewTaskToReadyList+0xb0>)
 8003a7c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <prvAddNewTaskToReadyList+0xb4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a86:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <prvAddNewTaskToReadyList+0xb4>)
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <prvAddNewTaskToReadyList+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d110      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a94:	f000 fb56 	bl	8004144 <prvInitialiseTaskLists>
 8003a98:	e00d      	b.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a9a:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <prvAddNewTaskToReadyList+0xb8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <prvAddNewTaskToReadyList+0xb4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d802      	bhi.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <prvAddNewTaskToReadyList+0xb4>)
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <prvAddNewTaskToReadyList+0xbc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <prvAddNewTaskToReadyList+0xbc>)
 8003abe:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <prvAddNewTaskToReadyList+0xc0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d903      	bls.n	8003ad4 <prvAddNewTaskToReadyList+0x6c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <prvAddNewTaskToReadyList+0xc0>)
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	0013      	movs	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003ae2:	189a      	adds	r2, r3, r2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	0019      	movs	r1, r3
 8003aea:	0010      	movs	r0, r2
 8003aec:	f7ff faa3 	bl	8003036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003af0:	f000 fe50 	bl	8004794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvAddNewTaskToReadyList+0xb8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <prvAddNewTaskToReadyList+0xb4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d201      	bcs.n	8003b0e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b0a:	f000 fe21 	bl	8004750 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	2000038c 	.word	0x2000038c
 8003b1c:	2000028c 	.word	0x2000028c
 8003b20:	20000398 	.word	0x20000398
 8003b24:	200003a8 	.word	0x200003a8
 8003b28:	20000394 	.word	0x20000394
 8003b2c:	20000290 	.word	0x20000290

08003b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <vTaskDelay+0x48>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <vTaskDelay+0x1e>
 8003b4a:	b672      	cpsid	i
 8003b4c:	e7fe      	b.n	8003b4c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003b4e:	f000 f863 	bl	8003c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2100      	movs	r1, #0
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fd1e 	bl	8004598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b5c:	f000 f868 	bl	8003c30 <xTaskResumeAll>
 8003b60:	0003      	movs	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003b6a:	f000 fdf1 	bl	8004750 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	200003b4 	.word	0x200003b4

08003b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b8a:	003a      	movs	r2, r7
 8003b8c:	1d39      	adds	r1, r7, #4
 8003b8e:	2308      	movs	r3, #8
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	0018      	movs	r0, r3
 8003b94:	f7fc fb4c 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b98:	683c      	ldr	r4, [r7, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4918      	ldr	r1, [pc, #96]	; (8003c00 <vTaskStartScheduler+0x84>)
 8003ba0:	4818      	ldr	r0, [pc, #96]	; (8003c04 <vTaskStartScheduler+0x88>)
 8003ba2:	9202      	str	r2, [sp, #8]
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	0022      	movs	r2, r4
 8003bae:	f7ff fe51 	bl	8003854 <xTaskCreateStatic>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <vTaskStartScheduler+0x8c>)
 8003bb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <vTaskStartScheduler+0x8c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e001      	b.n	8003bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d10d      	bne.n	8003bec <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003bd0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <vTaskStartScheduler+0x90>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4252      	negs	r2, r2
 8003bd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <vTaskStartScheduler+0x94>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <vTaskStartScheduler+0x98>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003be6:	f000 fd8f 	bl	8004708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bea:	e004      	b.n	8003bf6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <vTaskStartScheduler+0x7a>
 8003bf2:	b672      	cpsid	i
 8003bf4:	e7fe      	b.n	8003bf4 <vTaskStartScheduler+0x78>
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b005      	add	sp, #20
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	08004f60 	.word	0x08004f60
 8003c04:	08004125 	.word	0x08004125
 8003c08:	200003b0 	.word	0x200003b0
 8003c0c:	200003ac 	.word	0x200003ac
 8003c10:	20000398 	.word	0x20000398
 8003c14:	20000390 	.word	0x20000390

08003c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <vTaskSuspendAll+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	4b02      	ldr	r3, [pc, #8]	; (8003c2c <vTaskSuspendAll+0x14>)
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200003b4 	.word	0x200003b4

08003c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <xTaskResumeAll+0xf8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <xTaskResumeAll+0x1a>
 8003c46:	b672      	cpsid	i
 8003c48:	e7fe      	b.n	8003c48 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c4a:	f000 fd91 	bl	8004770 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <xTaskResumeAll+0xf8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <xTaskResumeAll+0xf8>)
 8003c56:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c58:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <xTaskResumeAll+0xf8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d15b      	bne.n	8003d18 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <xTaskResumeAll+0xfc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d057      	beq.n	8003d18 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c68:	e02f      	b.n	8003cca <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <xTaskResumeAll+0x100>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3318      	adds	r3, #24
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fa35 	bl	80030e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7ff fa30 	bl	80030e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <xTaskResumeAll+0x104>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d903      	bls.n	8003c9a <xTaskResumeAll+0x6a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <xTaskResumeAll+0x104>)
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	0013      	movs	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <xTaskResumeAll+0x108>)
 8003ca8:	189a      	adds	r2, r3, r2
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	0019      	movs	r1, r3
 8003cb0:	0010      	movs	r0, r2
 8003cb2:	f7ff f9c0 	bl	8003036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <xTaskResumeAll+0x10c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <xTaskResumeAll+0x110>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <xTaskResumeAll+0x100>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1cb      	bne.n	8003c6a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cd8:	f000 face 	bl	8004278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <xTaskResumeAll+0x114>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ce8:	f000 f82e 	bl	8003d48 <xTaskIncrementTick>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d002      	beq.n	8003cf6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <xTaskResumeAll+0x110>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f2      	bne.n	8003ce8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <xTaskResumeAll+0x114>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <xTaskResumeAll+0x110>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d14:	f000 fd1c 	bl	8004750 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d18:	f000 fd3c 	bl	8004794 <vPortExitCritical>

	return xAlreadyYielded;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	200003b4 	.word	0x200003b4
 8003d2c:	2000038c 	.word	0x2000038c
 8003d30:	2000034c 	.word	0x2000034c
 8003d34:	20000394 	.word	0x20000394
 8003d38:	20000290 	.word	0x20000290
 8003d3c:	2000028c 	.word	0x2000028c
 8003d40:	200003a0 	.word	0x200003a0
 8003d44:	2000039c 	.word	0x2000039c

08003d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d52:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <xTaskIncrementTick+0x13c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d000      	beq.n	8003d5c <xTaskIncrementTick+0x14>
 8003d5a:	e083      	b.n	8003e64 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d5c:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <xTaskIncrementTick+0x140>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <xTaskIncrementTick+0x140>)
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d117      	bne.n	8003da0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d70:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <xTaskIncrementTick+0x144>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <xTaskIncrementTick+0x36>
 8003d7a:	b672      	cpsid	i
 8003d7c:	e7fe      	b.n	8003d7c <xTaskIncrementTick+0x34>
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <xTaskIncrementTick+0x144>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <xTaskIncrementTick+0x148>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <xTaskIncrementTick+0x144>)
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <xTaskIncrementTick+0x148>)
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <xTaskIncrementTick+0x14c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <xTaskIncrementTick+0x14c>)
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f000 fa6c 	bl	8004278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da0:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d34e      	bcc.n	8003e48 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <xTaskIncrementTick+0x144>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <xTaskIncrementTick+0x70>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <xTaskIncrementTick+0x72>
 8003db8:	2300      	movs	r3, #0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4252      	negs	r2, r2
 8003dc4:	601a      	str	r2, [r3, #0]
					break;
 8003dc6:	e03f      	b.n	8003e48 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <xTaskIncrementTick+0x144>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d203      	bcs.n	8003de8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
						break;
 8003de6:	e02f      	b.n	8003e48 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3304      	adds	r3, #4
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff f97a 	bl	80030e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3318      	adds	r3, #24
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff f971 	bl	80030e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <xTaskIncrementTick+0x154>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d903      	bls.n	8003e18 <xTaskIncrementTick+0xd0>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <xTaskIncrementTick+0x154>)
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <xTaskIncrementTick+0x158>)
 8003e26:	189a      	adds	r2, r3, r2
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	0010      	movs	r0, r2
 8003e30:	f7ff f901 	bl	8003036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <xTaskIncrementTick+0x15c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b3      	bcc.n	8003daa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e46:	e7b0      	b.n	8003daa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <xTaskIncrementTick+0x15c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4914      	ldr	r1, [pc, #80]	; (8003ea0 <xTaskIncrementTick+0x158>)
 8003e50:	0013      	movs	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	585b      	ldr	r3, [r3, r1]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d907      	bls.n	8003e6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e004      	b.n	8003e6e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <xTaskIncrementTick+0x160>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <xTaskIncrementTick+0x160>)
 8003e6c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <xTaskIncrementTick+0x164>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200003b4 	.word	0x200003b4
 8003e88:	20000390 	.word	0x20000390
 8003e8c:	20000344 	.word	0x20000344
 8003e90:	20000348 	.word	0x20000348
 8003e94:	200003a4 	.word	0x200003a4
 8003e98:	200003ac 	.word	0x200003ac
 8003e9c:	20000394 	.word	0x20000394
 8003ea0:	20000290 	.word	0x20000290
 8003ea4:	2000028c 	.word	0x2000028c
 8003ea8:	2000039c 	.word	0x2000039c
 8003eac:	200003a0 	.word	0x200003a0

08003eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <vTaskSwitchContext+0x90>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ebe:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <vTaskSwitchContext+0x94>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec4:	e037      	b.n	8003f36 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <vTaskSwitchContext+0x94>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <vTaskSwitchContext+0x98>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	e007      	b.n	8003ee4 <vTaskSwitchContext+0x34>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <vTaskSwitchContext+0x2e>
 8003eda:	b672      	cpsid	i
 8003edc:	e7fe      	b.n	8003edc <vTaskSwitchContext+0x2c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	4919      	ldr	r1, [pc, #100]	; (8003f4c <vTaskSwitchContext+0x9c>)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	0013      	movs	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	585b      	ldr	r3, [r3, r1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <vTaskSwitchContext+0x24>
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	0013      	movs	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <vTaskSwitchContext+0x9c>)
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d104      	bne.n	8003f26 <vTaskSwitchContext+0x76>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <vTaskSwitchContext+0xa0>)
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <vTaskSwitchContext+0x98>)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	200003b4 	.word	0x200003b4
 8003f44:	200003a0 	.word	0x200003a0
 8003f48:	20000394 	.word	0x20000394
 8003f4c:	20000290 	.word	0x20000290
 8003f50:	2000028c 	.word	0x2000028c

08003f54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <vTaskPlaceOnEventList+0x14>
 8003f64:	b672      	cpsid	i
 8003f66:	e7fe      	b.n	8003f66 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <vTaskPlaceOnEventList+0x38>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	001a      	movs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	0011      	movs	r1, r2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff f880 	bl	800307a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 fb0a 	bl	8004598 <prvAddCurrentTaskToDelayedList>
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	2000028c 	.word	0x2000028c

08003f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xTaskRemoveFromEventList+0x1a>
 8003fa6:	b672      	cpsid	i
 8003fa8:	e7fe      	b.n	8003fa8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3318      	adds	r3, #24
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff f899 	bl	80030e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <xTaskRemoveFromEventList+0xa0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11d      	bne.n	8003ff8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff f890 	bl	80030e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <xTaskRemoveFromEventList+0xa4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d903      	bls.n	8003fda <xTaskRemoveFromEventList+0x4a>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <xTaskRemoveFromEventList+0xa4>)
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	0013      	movs	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a14      	ldr	r2, [pc, #80]	; (8004038 <xTaskRemoveFromEventList+0xa8>)
 8003fe8:	189a      	adds	r2, r3, r2
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3304      	adds	r3, #4
 8003fee:	0019      	movs	r1, r3
 8003ff0:	0010      	movs	r0, r2
 8003ff2:	f7ff f820 	bl	8003036 <vListInsertEnd>
 8003ff6:	e007      	b.n	8004008 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <xTaskRemoveFromEventList+0xac>)
 8004000:	0011      	movs	r1, r2
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff f817 	bl	8003036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <xTaskRemoveFromEventList+0xb0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d905      	bls.n	8004022 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <xTaskRemoveFromEventList+0xb4>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e001      	b.n	8004026 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}
 8004030:	200003b4 	.word	0x200003b4
 8004034:	20000394 	.word	0x20000394
 8004038:	20000290 	.word	0x20000290
 800403c:	2000034c 	.word	0x2000034c
 8004040:	2000028c 	.word	0x2000028c
 8004044:	200003a0 	.word	0x200003a0

08004048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <vTaskInternalSetTimeOutState+0x20>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <vTaskInternalSetTimeOutState+0x24>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200003a4 	.word	0x200003a4
 800406c:	20000390 	.word	0x20000390

08004070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xTaskCheckForTimeOut+0x14>
 8004080:	b672      	cpsid	i
 8004082:	e7fe      	b.n	8004082 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <xTaskCheckForTimeOut+0x1e>
 800408a:	b672      	cpsid	i
 800408c:	e7fe      	b.n	800408c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800408e:	f000 fb6f 	bl	8004770 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <xTaskCheckForTimeOut+0x98>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	d102      	bne.n	80040b0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e024      	b.n	80040fa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b15      	ldr	r3, [pc, #84]	; (800410c <xTaskCheckForTimeOut+0x9c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d007      	beq.n	80040cc <xTaskCheckForTimeOut+0x5c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e016      	b.n	80040fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d20c      	bcs.n	80040f0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad2      	subs	r2, r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff ffaf 	bl	8004048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e004      	b.n	80040fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80040fa:	f000 fb4b 	bl	8004794 <vPortExitCritical>

	return xReturn;
 80040fe:	697b      	ldr	r3, [r7, #20]
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b006      	add	sp, #24
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000390 	.word	0x20000390
 800410c:	200003a4 	.word	0x200003a4

08004110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <vTaskMissedYield+0x10>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200003a0 	.word	0x200003a0

08004124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800412c:	f000 f84e 	bl	80041cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <prvIdleTask+0x1c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d9f9      	bls.n	800412c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004138:	f000 fb0a 	bl	8004750 <vPortYield>
		prvCheckTasksWaitingTermination();
 800413c:	e7f6      	b.n	800412c <prvIdleTask+0x8>
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	20000290 	.word	0x20000290

08004144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	e00c      	b.n	800416a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	0013      	movs	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	189b      	adds	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a14      	ldr	r2, [pc, #80]	; (80041ac <prvInitialiseTaskLists+0x68>)
 800415c:	189b      	adds	r3, r3, r2
 800415e:	0018      	movs	r0, r3
 8004160:	f7fe ff40 	bl	8002fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3301      	adds	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b06      	cmp	r3, #6
 800416e:	d9ef      	bls.n	8004150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <prvInitialiseTaskLists+0x6c>)
 8004172:	0018      	movs	r0, r3
 8004174:	f7fe ff36 	bl	8002fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <prvInitialiseTaskLists+0x70>)
 800417a:	0018      	movs	r0, r3
 800417c:	f7fe ff32 	bl	8002fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <prvInitialiseTaskLists+0x74>)
 8004182:	0018      	movs	r0, r3
 8004184:	f7fe ff2e 	bl	8002fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x78>)
 800418a:	0018      	movs	r0, r3
 800418c:	f7fe ff2a 	bl	8002fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x7c>)
 8004192:	0018      	movs	r0, r3
 8004194:	f7fe ff26 	bl	8002fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvInitialiseTaskLists+0x80>)
 800419a:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x6c>)
 800419c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvInitialiseTaskLists+0x84>)
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <prvInitialiseTaskLists+0x70>)
 80041a2:	601a      	str	r2, [r3, #0]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000290 	.word	0x20000290
 80041b0:	2000031c 	.word	0x2000031c
 80041b4:	20000330 	.word	0x20000330
 80041b8:	2000034c 	.word	0x2000034c
 80041bc:	20000360 	.word	0x20000360
 80041c0:	20000378 	.word	0x20000378
 80041c4:	20000344 	.word	0x20000344
 80041c8:	20000348 	.word	0x20000348

080041cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d2:	e01a      	b.n	800420a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80041d4:	f000 facc 	bl	8004770 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7fe ff7e 	bl	80030e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041f2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041fc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80041fe:	f000 fac9 	bl	8004794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f80f 	bl	8004228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e0      	bne.n	80041d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000360 	.word	0x20000360
 8004220:	2000038c 	.word	0x2000038c
 8004224:	20000374 	.word	0x20000374

08004228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2251      	movs	r2, #81	; 0x51
 8004234:	5c9b      	ldrb	r3, [r3, r2]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	0018      	movs	r0, r3
 8004240:	f000 fbd4 	bl	80049ec <vPortFree>
				vPortFree( pxTCB );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	0018      	movs	r0, r3
 8004248:	f000 fbd0 	bl	80049ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800424c:	e010      	b.n	8004270 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2251      	movs	r2, #81	; 0x51
 8004252:	5c9b      	ldrb	r3, [r3, r2]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d104      	bne.n	8004262 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fbc6 	bl	80049ec <vPortFree>
	}
 8004260:	e006      	b.n	8004270 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2251      	movs	r2, #81	; 0x51
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d001      	beq.n	8004270 <prvDeleteTCB+0x48>
 800426c:	b672      	cpsid	i
 800426e:	e7fe      	b.n	800426e <prvDeleteTCB+0x46>
	}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <prvResetNextTaskUnblockTime+0x40>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <prvResetNextTaskUnblockTime+0x14>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <prvResetNextTaskUnblockTime+0x16>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <prvResetNextTaskUnblockTime+0x44>)
 8004294:	2201      	movs	r2, #1
 8004296:	4252      	negs	r2, r2
 8004298:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800429a:	e008      	b.n	80042ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <prvResetNextTaskUnblockTime+0x40>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <prvResetNextTaskUnblockTime+0x44>)
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20000344 	.word	0x20000344
 80042bc:	200003ac 	.word	0x200003ac

080042c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <xTaskGetSchedulerState+0x30>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ce:	2301      	movs	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	e008      	b.n	80042e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <xTaskGetSchedulerState+0x34>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042dc:	2302      	movs	r3, #2
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e001      	b.n	80042e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042e6:	687b      	ldr	r3, [r7, #4]
	}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000398 	.word	0x20000398
 80042f4:	200003b4 	.word	0x200003b4

080042f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d056      	beq.n	80043bc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <xTaskPriorityInherit+0xd0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d246      	bcs.n	80043aa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db06      	blt.n	8004332 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <xTaskPriorityInherit+0xd0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	2207      	movs	r2, #7
 800432c:	1ad2      	subs	r2, r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6959      	ldr	r1, [r3, #20]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	0013      	movs	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	189b      	adds	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <xTaskPriorityInherit+0xd4>)
 8004344:	189b      	adds	r3, r3, r2
 8004346:	4299      	cmp	r1, r3
 8004348:	d101      	bne.n	800434e <xTaskPriorityInherit+0x56>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xTaskPriorityInherit+0x58>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3304      	adds	r3, #4
 8004358:	0018      	movs	r0, r3
 800435a:	f7fe fec4 	bl	80030e6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <xTaskPriorityInherit+0xd0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <xTaskPriorityInherit+0xd8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d903      	bls.n	800437c <xTaskPriorityInherit+0x84>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <xTaskPriorityInherit+0xd8>)
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	0013      	movs	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	189b      	adds	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4a10      	ldr	r2, [pc, #64]	; (80043cc <xTaskPriorityInherit+0xd4>)
 800438a:	189a      	adds	r2, r3, r2
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3304      	adds	r3, #4
 8004390:	0019      	movs	r1, r3
 8004392:	0010      	movs	r0, r2
 8004394:	f7fe fe4f 	bl	8003036 <vListInsertEnd>
 8004398:	e004      	b.n	80043a4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <xTaskPriorityInherit+0xd0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e008      	b.n	80043bc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <xTaskPriorityInherit+0xd0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d201      	bcs.n	80043bc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043bc:	68fb      	ldr	r3, [r7, #12]
	}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b004      	add	sp, #16
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	2000028c 	.word	0x2000028c
 80043cc:	20000290 	.word	0x20000290
 80043d0:	20000394 	.word	0x20000394

080043d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d044      	beq.n	8004474 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <xTaskPriorityDisinherit+0xac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <xTaskPriorityDisinherit+0x24>
 80043f4:	b672      	cpsid	i
 80043f6:	e7fe      	b.n	80043f6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <xTaskPriorityDisinherit+0x30>
 8004400:	b672      	cpsid	i
 8004402:	e7fe      	b.n	8004402 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	429a      	cmp	r2, r3
 8004418:	d02c      	beq.n	8004474 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441e:	2b00      	cmp	r3, #0
 8004420:	d128      	bne.n	8004474 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3304      	adds	r3, #4
 8004426:	0018      	movs	r0, r3
 8004428:	f7fe fe5d 	bl	80030e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2207      	movs	r2, #7
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <xTaskPriorityDisinherit+0xb0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d903      	bls.n	8004454 <xTaskPriorityDisinherit+0x80>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xTaskPriorityDisinherit+0xb0>)
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	0013      	movs	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	189b      	adds	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4a09      	ldr	r2, [pc, #36]	; (8004488 <xTaskPriorityDisinherit+0xb4>)
 8004462:	189a      	adds	r2, r3, r2
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	3304      	adds	r3, #4
 8004468:	0019      	movs	r1, r3
 800446a:	0010      	movs	r0, r2
 800446c:	f7fe fde3 	bl	8003036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004474:	68fb      	ldr	r3, [r7, #12]
	}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	2000028c 	.word	0x2000028c
 8004484:	20000394 	.word	0x20000394
 8004488:	20000290 	.word	0x20000290

0800448c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800449a:	2301      	movs	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d05d      	beq.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80044ac:	b672      	cpsid	i
 80044ae:	e7fe      	b.n	80044ae <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d902      	bls.n	80044c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e002      	b.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d047      	beq.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d142      	bne.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d101      	bne.n	80044e8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80044e4:	b672      	cpsid	i
 80044e6:	e7fe      	b.n	80044e6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db04      	blt.n	8004506 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2207      	movs	r2, #7
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	0013      	movs	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	189b      	adds	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004516:	189b      	adds	r3, r3, r2
 8004518:	4299      	cmp	r1, r3
 800451a:	d101      	bne.n	8004520 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01c      	beq.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	3304      	adds	r3, #4
 800452a:	0018      	movs	r0, r3
 800452c:	f7fe fddb 	bl	80030e6 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d903      	bls.n	8004544 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	0013      	movs	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	189b      	adds	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4a06      	ldr	r2, [pc, #24]	; (800456c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004552:	189a      	adds	r2, r3, r2
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3304      	adds	r3, #4
 8004558:	0019      	movs	r1, r3
 800455a:	0010      	movs	r0, r2
 800455c:	f7fe fd6b 	bl	8003036 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	2000028c 	.word	0x2000028c
 800456c:	20000290 	.word	0x20000290
 8004570:	20000394 	.word	0x20000394

08004574 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <pvTaskIncrementMutexHeldCount+0x20>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <pvTaskIncrementMutexHeldCount+0x20>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004586:	3201      	adds	r2, #1
 8004588:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800458a:	4b02      	ldr	r3, [pc, #8]	; (8004594 <pvTaskIncrementMutexHeldCount+0x20>)
 800458c:	681b      	ldr	r3, [r3, #0]
	}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000028c 	.word	0x2000028c

08004598 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <prvAddCurrentTaskToDelayedList+0x90>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3304      	adds	r3, #4
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7fe fd99 	bl	80030e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3301      	adds	r3, #1
 80045b8:	d10b      	bne.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <prvAddCurrentTaskToDelayedList+0x98>)
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7fe fd33 	bl	8003036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045d0:	e026      	b.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	18d3      	adds	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d209      	bcs.n	80045fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3304      	adds	r3, #4
 80045f4:	0019      	movs	r1, r3
 80045f6:	0010      	movs	r0, r2
 80045f8:	f7fe fd3f 	bl	800307a <vListInsert>
}
 80045fc:	e010      	b.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3304      	adds	r3, #4
 8004608:	0019      	movs	r1, r3
 800460a:	0010      	movs	r0, r2
 800460c:	f7fe fd35 	bl	800307a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d202      	bcs.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <prvAddCurrentTaskToDelayedList+0xa4>)
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b004      	add	sp, #16
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000390 	.word	0x20000390
 800462c:	2000028c 	.word	0x2000028c
 8004630:	20000378 	.word	0x20000378
 8004634:	20000348 	.word	0x20000348
 8004638:	20000344 	.word	0x20000344
 800463c:	200003ac 	.word	0x200003ac

08004640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b04      	subs	r3, #4
 8004650:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	0452      	lsls	r2, r2, #17
 8004658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b04      	subs	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800466c:	4a08      	ldr	r2, [pc, #32]	; (8004690 <pxPortInitialiseStack+0x50>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b14      	subs	r3, #20
 8004676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b20      	subs	r3, #32
 8004682:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004684:	68fb      	ldr	r3, [r7, #12]
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b004      	add	sp, #16
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	08004695 	.word	0x08004695

08004694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <prvTaskExitError+0x2c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	d001      	beq.n	80046aa <prvTaskExitError+0x16>
 80046a6:	b672      	cpsid	i
 80046a8:	e7fe      	b.n	80046a8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80046aa:	b672      	cpsid	i
	while( ulDummy == 0 )
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0fc      	beq.n	80046ae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b002      	add	sp, #8
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000014 	.word	0x20000014

080046c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <pxCurrentTCBConst2>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	3020      	adds	r0, #32
 80046d8:	f380 8809 	msr	PSP, r0
 80046dc:	2002      	movs	r0, #2
 80046de:	f380 8814 	msr	CONTROL, r0
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80046e8:	46ae      	mov	lr, r5
 80046ea:	bc08      	pop	{r3}
 80046ec:	bc04      	pop	{r2}
 80046ee:	b662      	cpsie	i
 80046f0:	4718      	bx	r3
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46c0      	nop			; (mov r8, r8)

08004700 <pxCurrentTCBConst2>:
 8004700:	2000028c 	.word	0x2000028c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46c0      	nop			; (mov r8, r8)

08004708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <xPortStartScheduler+0x40>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <xPortStartScheduler+0x40>)
 8004712:	21ff      	movs	r1, #255	; 0xff
 8004714:	0409      	lsls	r1, r1, #16
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <xPortStartScheduler+0x40>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <xPortStartScheduler+0x40>)
 8004720:	21ff      	movs	r1, #255	; 0xff
 8004722:	0609      	lsls	r1, r1, #24
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004728:	f000 f898 	bl	800485c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <xPortStartScheduler+0x44>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004732:	f7ff ffcd 	bl	80046d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004736:	f7ff fbbb 	bl	8003eb0 <vTaskSwitchContext>
	prvTaskExitError();
 800473a:	f7ff ffab 	bl	8004694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	e000ed20 	.word	0xe000ed20
 800474c:	20000014 	.word	0x20000014

08004750 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <vPortYield+0x1c>)
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	0552      	lsls	r2, r2, #21
 800475a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800475c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004760:	f3bf 8f6f 	isb	sy
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004774:	b672      	cpsid	i
    uxCriticalNesting++;
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <vPortEnterCritical+0x20>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vPortEnterCritical+0x20>)
 800477e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004780:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004784:	f3bf 8f6f 	isb	sy
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000014 	.word	0x20000014

08004794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <vPortExitCritical+0x2c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <vPortExitCritical+0x10>
 80047a0:	b672      	cpsid	i
 80047a2:	e7fe      	b.n	80047a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <vPortExitCritical+0x2c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <vPortExitCritical+0x2c>)
 80047ac:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortExitCritical+0x2c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d100      	bne.n	80047b8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80047b6:	b662      	cpsie	i
    }
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	20000014 	.word	0x20000014

080047c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80047c4:	f3ef 8010 	mrs	r0, PRIMASK
 80047c8:	b672      	cpsid	i
 80047ca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	0018      	movs	r0, r3

080047d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80047d0:	f380 8810 	msr	PRIMASK, r0
 80047d4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80047d6:	46c0      	nop			; (mov r8, r8)
	...

080047e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047e0:	f3ef 8009 	mrs	r0, PSP
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <pxCurrentTCBConst>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	3820      	subs	r0, #32
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047ee:	4644      	mov	r4, r8
 80047f0:	464d      	mov	r5, r9
 80047f2:	4656      	mov	r6, sl
 80047f4:	465f      	mov	r7, fp
 80047f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047f8:	b508      	push	{r3, lr}
 80047fa:	b672      	cpsid	i
 80047fc:	f7ff fb58 	bl	8003eb0 <vTaskSwitchContext>
 8004800:	b662      	cpsie	i
 8004802:	bc0c      	pop	{r2, r3}
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	6808      	ldr	r0, [r1, #0]
 8004808:	3010      	adds	r0, #16
 800480a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800480c:	46a0      	mov	r8, r4
 800480e:	46a9      	mov	r9, r5
 8004810:	46b2      	mov	sl, r6
 8004812:	46bb      	mov	fp, r7
 8004814:	f380 8809 	msr	PSP, r0
 8004818:	3820      	subs	r0, #32
 800481a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800481c:	4718      	bx	r3
 800481e:	46c0      	nop			; (mov r8, r8)

08004820 <pxCurrentTCBConst>:
 8004820:	2000028c 	.word	0x2000028c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46c0      	nop			; (mov r8, r8)

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800482e:	f7ff ffc9 	bl	80047c4 <ulSetInterruptMaskFromISR>
 8004832:	0003      	movs	r3, r0
 8004834:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7ff fa87 	bl	8003d48 <xTaskIncrementTick>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d003      	beq.n	8004846 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <SysTick_Handler+0x30>)
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	0552      	lsls	r2, r2, #21
 8004844:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f7ff ffc1 	bl	80047d0 <vClearInterruptMaskFromISR>
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <prvSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <prvSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <prvSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	22fa      	movs	r2, #250	; 0xfa
 8004872:	0091      	lsls	r1, r2, #2
 8004874:	0018      	movs	r0, r3
 8004876:	f7fb fc4f 	bl	8000118 <__udivsi3>
 800487a:	0003      	movs	r3, r0
 800487c:	001a      	movs	r2, r3
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <prvSetupTimerInterrupt+0x40>)
 8004880:	3a01      	subs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <prvSetupTimerInterrupt+0x34>)
 8004886:	2207      	movs	r2, #7
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	2000000c 	.word	0x2000000c
 800489c:	e000e014 	.word	0xe000e014

080048a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80048ac:	f7ff f9b4 	bl	8003c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <pvPortMalloc+0x138>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048b8:	f000 f8e0 	bl	8004a7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <pvPortMalloc+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4013      	ands	r3, r2
 80048c4:	d000      	beq.n	80048c8 <pvPortMalloc+0x28>
 80048c6:	e079      	b.n	80049bc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80048ce:	2208      	movs	r2, #8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2207      	movs	r2, #7
 80048da:	4013      	ands	r3, r2
 80048dc:	d00a      	beq.n	80048f4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2207      	movs	r2, #7
 80048e2:	4393      	bics	r3, r2
 80048e4:	3308      	adds	r3, #8
 80048e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2207      	movs	r2, #7
 80048ec:	4013      	ands	r3, r2
 80048ee:	d001      	beq.n	80048f4 <pvPortMalloc+0x54>
 80048f0:	b672      	cpsid	i
 80048f2:	e7fe      	b.n	80048f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d060      	beq.n	80049bc <pvPortMalloc+0x11c>
 80048fa:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <pvPortMalloc+0x140>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d85b      	bhi.n	80049bc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <pvPortMalloc+0x144>)
 8004906:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <pvPortMalloc+0x144>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800490e:	e004      	b.n	800491a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d903      	bls.n	800492c <pvPortMalloc+0x8c>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f1      	bne.n	8004910 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <pvPortMalloc+0x138>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	429a      	cmp	r2, r3
 8004934:	d042      	beq.n	80049bc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2208      	movs	r2, #8
 800493c:	189b      	adds	r3, r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	2308      	movs	r3, #8
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	429a      	cmp	r2, r3
 8004956:	d916      	bls.n	8004986 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2207      	movs	r2, #7
 8004964:	4013      	ands	r3, r2
 8004966:	d001      	beq.n	800496c <pvPortMalloc+0xcc>
 8004968:	b672      	cpsid	i
 800496a:	e7fe      	b.n	800496a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 f8db 	bl	8004b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <pvPortMalloc+0x140>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <pvPortMalloc+0x140>)
 8004992:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004994:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <pvPortMalloc+0x140>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <pvPortMalloc+0x148>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d203      	bcs.n	80049a8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <pvPortMalloc+0x140>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <pvPortMalloc+0x148>)
 80049a6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <pvPortMalloc+0x13c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049bc:	f7ff f938 	bl	8003c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2207      	movs	r2, #7
 80049c4:	4013      	ands	r3, r2
 80049c6:	d001      	beq.n	80049cc <pvPortMalloc+0x12c>
 80049c8:	b672      	cpsid	i
 80049ca:	e7fe      	b.n	80049ca <pvPortMalloc+0x12a>
	return pvReturn;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b006      	add	sp, #24
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	20000fc0 	.word	0x20000fc0
 80049dc:	20000fcc 	.word	0x20000fcc
 80049e0:	20000fc4 	.word	0x20000fc4
 80049e4:	20000fb8 	.word	0x20000fb8
 80049e8:	20000fc8 	.word	0x20000fc8

080049ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d035      	beq.n	8004a6a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049fe:	2308      	movs	r3, #8
 8004a00:	425b      	negs	r3, r3
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	18d3      	adds	r3, r2, r3
 8004a06:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <vPortFree+0x88>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4013      	ands	r3, r2
 8004a16:	d101      	bne.n	8004a1c <vPortFree+0x30>
 8004a18:	b672      	cpsid	i
 8004a1a:	e7fe      	b.n	8004a1a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <vPortFree+0x3c>
 8004a24:	b672      	cpsid	i
 8004a26:	e7fe      	b.n	8004a26 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <vPortFree+0x88>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4013      	ands	r3, r2
 8004a32:	d01a      	beq.n	8004a6a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <vPortFree+0x88>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a4c:	f7ff f8e4 	bl	8003c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <vPortFree+0x8c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	18d2      	adds	r2, r2, r3
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <vPortFree+0x8c>)
 8004a5c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f86b 	bl	8004b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a66:	f7ff f8e3 	bl	8003c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	20000fcc 	.word	0x20000fcc
 8004a78:	20000fc4 	.word	0x20000fc4

08004a7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a82:	23c0      	movs	r3, #192	; 0xc0
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <prvHeapInit+0xa8>)
 8004a8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2207      	movs	r2, #7
 8004a90:	4013      	ands	r3, r2
 8004a92:	d00c      	beq.n	8004aae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3307      	adds	r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2207      	movs	r2, #7
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <prvHeapInit+0xa8>)
 8004aaa:	18d3      	adds	r3, r2, r3
 8004aac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <prvHeapInit+0xac>)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <prvHeapInit+0xac>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <prvHeapInit+0xb0>)
 8004ada:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <prvHeapInit+0xb0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <prvHeapInit+0xb0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvHeapInit+0xb0>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvHeapInit+0xb4>)
 8004b08:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <prvHeapInit+0xb8>)
 8004b10:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <prvHeapInit+0xbc>)
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	0612      	lsls	r2, r2, #24
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b004      	add	sp, #16
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	200003b8 	.word	0x200003b8
 8004b28:	20000fb8 	.word	0x20000fb8
 8004b2c:	20000fc0 	.word	0x20000fc0
 8004b30:	20000fc8 	.word	0x20000fc8
 8004b34:	20000fc4 	.word	0x20000fc4
 8004b38:	20000fcc 	.word	0x20000fcc

08004b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b44:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <prvInsertBlockIntoFreeList+0xa8>)
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <prvInsertBlockIntoFreeList+0x14>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d8f7      	bhi.n	8004b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d108      	bne.n	8004b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	18d2      	adds	r2, r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	18d2      	adds	r2, r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d118      	bne.n	8004bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <prvInsertBlockIntoFreeList+0xac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d00d      	beq.n	8004bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	18d2      	adds	r2, r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e008      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvInsertBlockIntoFreeList+0xac>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e003      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	20000fb8 	.word	0x20000fb8
 8004be8:	20000fc0 	.word	0x20000fc0

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2600      	movs	r6, #0
 8004bf0:	4d0c      	ldr	r5, [pc, #48]	; (8004c24 <__libc_init_array+0x38>)
 8004bf2:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	f000 f889 	bl	8004d14 <_init>
 8004c02:	4d0a      	ldr	r5, [pc, #40]	; (8004c2c <__libc_init_array+0x40>)
 8004c04:	4c0a      	ldr	r4, [pc, #40]	; (8004c30 <__libc_init_array+0x44>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	00b3      	lsls	r3, r6, #2
 8004c12:	58eb      	ldr	r3, [r5, r3]
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	00b3      	lsls	r3, r6, #2
 8004c1c:	58eb      	ldr	r3, [r5, r3]
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004fa8 	.word	0x08004fa8
 8004c28:	08004fa8 	.word	0x08004fa8
 8004c2c:	08004fa8 	.word	0x08004fa8
 8004c30:	08004fac 	.word	0x08004fac

08004c34 <__itoa>:
 8004c34:	1e93      	subs	r3, r2, #2
 8004c36:	b510      	push	{r4, lr}
 8004c38:	000c      	movs	r4, r1
 8004c3a:	2b22      	cmp	r3, #34	; 0x22
 8004c3c:	d904      	bls.n	8004c48 <__itoa+0x14>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	001c      	movs	r4, r3
 8004c42:	700b      	strb	r3, [r1, #0]
 8004c44:	0020      	movs	r0, r4
 8004c46:	bd10      	pop	{r4, pc}
 8004c48:	2a0a      	cmp	r2, #10
 8004c4a:	d109      	bne.n	8004c60 <__itoa+0x2c>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	da07      	bge.n	8004c60 <__itoa+0x2c>
 8004c50:	232d      	movs	r3, #45	; 0x2d
 8004c52:	700b      	strb	r3, [r1, #0]
 8004c54:	2101      	movs	r1, #1
 8004c56:	4240      	negs	r0, r0
 8004c58:	1861      	adds	r1, r4, r1
 8004c5a:	f000 f825 	bl	8004ca8 <__utoa>
 8004c5e:	e7f1      	b.n	8004c44 <__itoa+0x10>
 8004c60:	2100      	movs	r1, #0
 8004c62:	e7f9      	b.n	8004c58 <__itoa+0x24>

08004c64 <itoa>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	f7ff ffe5 	bl	8004c34 <__itoa>
 8004c6a:	bd10      	pop	{r4, pc}

08004c6c <memcpy>:
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d100      	bne.n	8004c76 <memcpy+0xa>
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	5ccc      	ldrb	r4, [r1, r3]
 8004c78:	54c4      	strb	r4, [r0, r3]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	e7f8      	b.n	8004c70 <memcpy+0x4>

08004c7e <memset>:
 8004c7e:	0003      	movs	r3, r0
 8004c80:	1882      	adds	r2, r0, r2
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d100      	bne.n	8004c88 <memset+0xa>
 8004c86:	4770      	bx	lr
 8004c88:	7019      	strb	r1, [r3, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	e7f9      	b.n	8004c82 <memset+0x4>

08004c8e <strcat>:
 8004c8e:	0002      	movs	r2, r0
 8004c90:	b510      	push	{r4, lr}
 8004c92:	7813      	ldrb	r3, [r2, #0]
 8004c94:	0014      	movs	r4, r2
 8004c96:	3201      	adds	r2, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1fa      	bne.n	8004c92 <strcat+0x4>
 8004c9c:	5cca      	ldrb	r2, [r1, r3]
 8004c9e:	54e2      	strb	r2, [r4, r3]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d1fa      	bne.n	8004c9c <strcat+0xe>
 8004ca6:	bd10      	pop	{r4, pc}

08004ca8 <__utoa>:
 8004ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004caa:	0016      	movs	r6, r2
 8004cac:	b08d      	sub	sp, #52	; 0x34
 8004cae:	0007      	movs	r7, r0
 8004cb0:	000c      	movs	r4, r1
 8004cb2:	2225      	movs	r2, #37	; 0x25
 8004cb4:	4916      	ldr	r1, [pc, #88]	; (8004d10 <__utoa+0x68>)
 8004cb6:	a802      	add	r0, sp, #8
 8004cb8:	f7ff ffd8 	bl	8004c6c <memcpy>
 8004cbc:	1eb3      	subs	r3, r6, #2
 8004cbe:	2500      	movs	r5, #0
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	d820      	bhi.n	8004d06 <__utoa+0x5e>
 8004cc4:	1e63      	subs	r3, r4, #1
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	ab02      	add	r3, sp, #8
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	0038      	movs	r0, r7
 8004cce:	0031      	movs	r1, r6
 8004cd0:	f7fb faa8 	bl	8000224 <__aeabi_uidivmod>
 8004cd4:	000b      	movs	r3, r1
 8004cd6:	9a01      	ldr	r2, [sp, #4]
 8004cd8:	0029      	movs	r1, r5
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	9a00      	ldr	r2, [sp, #0]
 8004cde:	3501      	adds	r5, #1
 8004ce0:	5553      	strb	r3, [r2, r5]
 8004ce2:	003b      	movs	r3, r7
 8004ce4:	0007      	movs	r7, r0
 8004ce6:	429e      	cmp	r6, r3
 8004ce8:	d9f0      	bls.n	8004ccc <__utoa+0x24>
 8004cea:	2300      	movs	r3, #0
 8004cec:	0022      	movs	r2, r4
 8004cee:	5563      	strb	r3, [r4, r5]
 8004cf0:	000b      	movs	r3, r1
 8004cf2:	1ac8      	subs	r0, r1, r3
 8004cf4:	4283      	cmp	r3, r0
 8004cf6:	dd08      	ble.n	8004d0a <__utoa+0x62>
 8004cf8:	7810      	ldrb	r0, [r2, #0]
 8004cfa:	5ce5      	ldrb	r5, [r4, r3]
 8004cfc:	7015      	strb	r5, [r2, #0]
 8004cfe:	54e0      	strb	r0, [r4, r3]
 8004d00:	3201      	adds	r2, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	e7f5      	b.n	8004cf2 <__utoa+0x4a>
 8004d06:	7025      	strb	r5, [r4, #0]
 8004d08:	002c      	movs	r4, r5
 8004d0a:	0020      	movs	r0, r4
 8004d0c:	b00d      	add	sp, #52	; 0x34
 8004d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d10:	08004f80 	.word	0x08004f80

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
