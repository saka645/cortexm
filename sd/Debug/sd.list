
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003290  08003290  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003290  08003290  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003290  08003290  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08003308  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003308  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c216  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca0  00000000  00000000  0002c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001056d  00000000  00000000  0002ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b589  00000000  00000000  0003f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ef3a  00000000  00000000  0004aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a99b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000a9a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003238 	.word	0x08003238

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003238 	.word	0x08003238

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <read_sector>:

#include "fat32.h"
#include <stdlib.h>

void * read_sector ( unsigned long sector_address, void *buf )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	fat -> read_single_block ( sector_address, ( unsigned char * ) buf );
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <read_sector+0x24>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	6839      	ldr	r1, [r7, #0]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	0010      	movs	r0, r2
 8000236:	4798      	blx	r3
	return buf;
 8000238:	683b      	ldr	r3, [r7, #0]
}
 800023a:	0018      	movs	r0, r3
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	20000098 	.word	0x20000098

08000248 <fat32_init>:

unsigned char fat32_init ( void )
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	boot_sector *bpb;
	partition_info *mbr;
	first_partition_info *partition;

	bpb = ( boot_sector * ) read_sector ( 0, malloc ( 512 ) );
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f002 ff08 	bl	8003068 <malloc>
 8000258:	0003      	movs	r3, r0
 800025a:	0019      	movs	r1, r3
 800025c:	2000      	movs	r0, #0
 800025e:	f7ff ffdf 	bl	8000220 <read_sector>
 8000262:	0003      	movs	r3, r0
 8000264:	60fb      	str	r3, [r7, #12]

	if ( ( bpb -> jumpboot [ 0 ] != 0xE9 ) && ( bpb -> jumpboot [ 0 ] != 0xEB ) )   //check if it is boot sector
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2be9      	cmp	r3, #233	; 0xe9
 800026c:	d029      	beq.n	80002c2 <fat32_init+0x7a>
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2beb      	cmp	r3, #235	; 0xeb
 8000274:	d025      	beq.n	80002c2 <fat32_init+0x7a>
	{																			    //otherwise it must be mbr
		mbr = ( partition_info * ) bpb;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  		
		if ( mbr -> signature != 0xaa55 ) 
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	58d3      	ldr	r3, [r2, r3]
 8000282:	4a26      	ldr	r2, [pc, #152]	; (800031c <fat32_init+0xd4>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d001      	beq.n	800028c <fat32_init+0x44>
			return 1;       													     //not FAT32
 8000288:	2301      	movs	r3, #1
 800028a:	e043      	b.n	8000314 <fat32_init+0xcc>
		else;

		partition = ( first_partition_info * )( mbr -> partitiondata );			     //first partition
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	33bf      	adds	r3, #191	; 0xbf
 8000290:	33ff      	adds	r3, #255	; 0xff
 8000292:	607b      	str	r3, [r7, #4]
  		fat -> first_used_sector = partition -> firstsector; 								     //the unused sectors, hidden to the FAT	
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <fat32_init+0xd8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6912      	ldr	r2, [r2, #16]
 800029c:	601a      	str	r2, [r3, #0]
	
		read_sector ( fat -> first_used_sector, bpb );
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <fat32_init+0xd8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	0011      	movs	r1, r2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f7ff ffb9 	bl	8000220 <read_sector>
		
		if ( ( bpb -> jumpboot [ 0 ] != 0xE9 ) && ( bpb -> jumpboot [ 0 ] != 0xEB ) ) 
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2be9      	cmp	r3, #233	; 0xe9
 80002b4:	d005      	beq.n	80002c2 <fat32_init+0x7a>
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2beb      	cmp	r3, #235	; 0xeb
 80002bc:	d001      	beq.n	80002c2 <fat32_init+0x7a>
			return 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	e028      	b.n	8000314 <fat32_init+0xcc>
		else;
	}else;

	fat -> bytes_per_sector = bpb -> bytespersector;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <fat32_init+0xd8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	68d2      	ldr	r2, [r2, #12]
 80002ca:	60da      	str	r2, [r3, #12]
	fat -> sector_per_cluster = bpb -> sectorpercluster;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	7c1a      	ldrb	r2, [r3, #16]
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <fat32_init+0xd8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	611a      	str	r2, [r3, #16]
	fat -> reserved_sector_count = bpb -> reservedsectorcount;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <fat32_init+0xd8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	6952      	ldr	r2, [r2, #20]
 80002de:	615a      	str	r2, [r3, #20]
	fat -> root_cluster = bpb -> rootcluster;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <fat32_init+0xd8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80002e8:	609a      	str	r2, [r3, #8]
	fat -> first_data_sector = bpb -> hiddensectors + fat -> reserved_sector_count + ( bpb -> numberoffats * bpb -> fatsize_f32 );
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <fat32_init+0xd8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	18d1      	adds	r1, r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	7e1b      	ldrb	r3, [r3, #24]
 80002fa:	001a      	movs	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000300:	435a      	muls	r2, r3
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <fat32_init+0xd8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	188a      	adds	r2, r1, r2
 8000308:	605a      	str	r2, [r3, #4]

	free ( bpb );
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	0018      	movs	r0, r3
 800030e:	f002 feb5 	bl	800307c <free>

	return 0;
 8000312:	2300      	movs	r3, #0

}
 8000314:	0018      	movs	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	b004      	add	sp, #16
 800031a:	bd80      	pop	{r7, pc}
 800031c:	0000aa55 	.word	0x0000aa55
 8000320:	20000098 	.word	0x20000098

08000324 <first_sector_of_cluster>:

unsigned long first_sector_of_cluster ( unsigned long cluster_number )
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  return ( ( ( cluster_number - 2 ) * fat -> sector_per_cluster ) + fat -> first_data_sector );
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	1e9a      	subs	r2, r3, #2
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <first_sector_of_cluster+0x24>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	435a      	muls	r2, r3
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <first_sector_of_cluster+0x24>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	18d3      	adds	r3, r2, r3
}
 8000340:	0018      	movs	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000098 	.word	0x20000098

0800034c <next_cluster_number>:
	}
	return 0;
}

unsigned long next_cluster_number ( unsigned long current_cluster_number )
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	unsigned int offset_of_current_cluster;
	unsigned char *sector_data;
	unsigned long *fat_sector_data;
	unsigned long next_cluster;

	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <next_cluster_number+0x88>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <next_cluster_number+0x88>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	18d4      	adds	r4, r2, r3
									 + ( ( current_cluster_number * 4 ) / fat -> bytes_per_sector );
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	009a      	lsls	r2, r3, #2
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <next_cluster_number+0x88>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	0019      	movs	r1, r3
 800036e:	0010      	movs	r0, r2
 8000370:	f7ff feca 	bl	8000108 <__udivsi3>
 8000374:	0003      	movs	r3, r0
	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
 8000376:	18e3      	adds	r3, r4, r3
 8000378:	61fb      	str	r3, [r7, #28]
	offset_of_current_cluster = ( unsigned int ) ( ( current_cluster_number * 4 ) % fat -> bytes_per_sector );
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	009a      	lsls	r2, r3, #2
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <next_cluster_number+0x88>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f7ff ff44 	bl	8000214 <__aeabi_uidivmod>
 800038c:	000b      	movs	r3, r1
 800038e:	61bb      	str	r3, [r7, #24]

	sector_data = ( unsigned char * ) read_sector ( 
														    fat_sector_for_current_cluster,
															malloc ( fat -> bytes_per_sector )
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <next_cluster_number+0x88>)
 8000392:	681b      	ldr	r3, [r3, #0]
	sector_data = ( unsigned char * ) read_sector ( 
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	0018      	movs	r0, r3
 8000398:	f002 fe66 	bl	8003068 <malloc>
 800039c:	0003      	movs	r3, r0
 800039e:	001a      	movs	r2, r3
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f7ff ff3b 	bl	8000220 <read_sector>
 80003aa:	0003      	movs	r3, r0
 80003ac:	617b      	str	r3, [r7, #20]
							    		   		   );	
	fat_sector_data = ( unsigned long * ) &sector_data [ offset_of_current_cluster ];
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	613b      	str	r3, [r7, #16]

	next_cluster = ( ( *fat_sector_data ) & 0x0fffffff );
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	011b      	lsls	r3, r3, #4
 80003bc:	091b      	lsrs	r3, r3, #4
 80003be:	60fb      	str	r3, [r7, #12]

	free ( sector_data );
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	0018      	movs	r0, r3
 80003c4:	f002 fe5a 	bl	800307c <free>

	return next_cluster;
 80003c8:	68fb      	ldr	r3, [r7, #12]

}
 80003ca:	0018      	movs	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b009      	add	sp, #36	; 0x24
 80003d0:	bd90      	pop	{r4, r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	20000098 	.word	0x20000098

080003d8 <list_files>:
    }
	return 0;
}

unsigned char list_files ( void )
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
	unsigned long cluster_number, sector_number;
	int i, j;
	fs_dir *dir;

	cluster_number = fat -> root_cluster;
 80003de:	4b37      	ldr	r3, [pc, #220]	; (80004bc <list_files+0xe4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	617b      	str	r3, [r7, #20]

	while ( cluster_number < 0x0ffffff6 )
 80003e6:	e060      	b.n	80004aa <list_files+0xd2>
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	e051      	b.n	8000492 <list_files+0xba>
   		{	
			dir = ( fs_dir * ) read_sector ( 
												(
													first_sector_of_cluster ( cluster_number )
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	0018      	movs	r0, r3
 80003f2:	f7ff ff97 	bl	8000324 <first_sector_of_cluster>
 80003f6:	0002      	movs	r2, r0
			dir = ( fs_dir * ) read_sector ( 
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	18d4      	adds	r4, r2, r3
													+ sector_number
												),
												malloc ( fat -> bytes_per_sector )
 80003fc:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <list_files+0xe4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
			dir = ( fs_dir * ) read_sector ( 
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	0018      	movs	r0, r3
 8000404:	f002 fe30 	bl	8003068 <malloc>
 8000408:	0003      	movs	r3, r0
 800040a:	0019      	movs	r1, r3
 800040c:	0020      	movs	r0, r4
 800040e:	f7ff ff07 	bl	8000220 <read_sector>
 8000412:	0003      	movs	r3, r0
 8000414:	607b      	str	r3, [r7, #4]
							    		   );

			for ( i = 0; i < 16; i ++ )
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	e030      	b.n	800047e <list_files+0xa6>
		    {
				if ( 0x20 == dir [ i ] . attrib )
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	0013      	movs	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	189b      	adds	r3, r3, r2
 8000424:	011b      	lsls	r3, r3, #4
 8000426:	001a      	movs	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	189b      	adds	r3, r3, r2
 800042c:	7adb      	ldrb	r3, [r3, #11]
 800042e:	2b20      	cmp	r3, #32
 8000430:	d122      	bne.n	8000478 <list_files+0xa0>
				{
					for ( j = 0; j < 11; j ++ )
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	e012      	b.n	800045e <list_files+0x86>
						fat -> send_data_byte ( dir [ i ] . name [ j ] );
 8000438:	4b20      	ldr	r3, [pc, #128]	; (80004bc <list_files+0xe4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	69d9      	ldr	r1, [r3, #28]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	0013      	movs	r3, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	189b      	adds	r3, r3, r2
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	001a      	movs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	189a      	adds	r2, r3, r2
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	18d3      	adds	r3, r2, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	0018      	movs	r0, r3
 8000456:	4788      	blx	r1
					for ( j = 0; j < 11; j ++ )
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	3301      	adds	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2b0a      	cmp	r3, #10
 8000462:	dde9      	ble.n	8000438 <list_files+0x60>
					fat -> send_data_byte ( '\n' );
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <list_files+0xe4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	200a      	movs	r0, #10
 800046c:	4798      	blx	r3
					fat -> send_data_byte ( '\r' );
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <list_files+0xe4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	200d      	movs	r0, #13
 8000476:	4798      	blx	r3
			for ( i = 0; i < 16; i ++ )
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b0f      	cmp	r3, #15
 8000482:	ddcb      	ble.n	800041c <list_files+0x44>
				}
				else;
			}
			free ( dir );
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	0018      	movs	r0, r3
 8000488:	f002 fdf8 	bl	800307c <free>
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	3301      	adds	r3, #1
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <list_files+0xe4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	691b      	ldr	r3, [r3, #16]
 8000498:	693a      	ldr	r2, [r7, #16]
 800049a:	429a      	cmp	r2, r3
 800049c:	d3a7      	bcc.n	80003ee <list_files+0x16>
		}
		cluster_number = next_cluster_number ( cluster_number );
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff ff53 	bl	800034c <next_cluster_number>
 80004a6:	0003      	movs	r3, r0
 80004a8:	617b      	str	r3, [r7, #20]
	while ( cluster_number < 0x0ffffff6 )
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <list_files+0xe8>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d99a      	bls.n	80003e8 <list_files+0x10>
	}
	return 0;
 80004b2:	2300      	movs	r3, #0
}
 80004b4:	0018      	movs	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b007      	add	sp, #28
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	20000098 	.word	0x20000098
 80004c0:	0ffffff5 	.word	0x0ffffff5

080004c4 <SPI_TxByte>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
static void SPI_TxByte(uint8_t data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	0002      	movs	r2, r0
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <SPI_TxByte+0x34>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 f81d 	bl	8002514 <HAL_SPI_GetState>
 80004da:	0003      	movs	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d1f8      	bne.n	80004d2 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80004e0:	23fa      	movs	r3, #250	; 0xfa
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	1df9      	adds	r1, r7, #7
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <SPI_TxByte+0x34>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f001 fce9 	bl	8001ec0 <HAL_SPI_Transmit>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000120 	.word	0x20000120

080004fc <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	22ff      	movs	r2, #255	; 0xff
 8000506:	701a      	strb	r2, [r3, #0]
  data = 0;
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <SPI_RxByte+0x40>)
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fffe 	bl	8002514 <HAL_SPI_GetState>
 8000518:	0003      	movs	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d1f8      	bne.n	8000510 <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, 1000);
 800051e:	1dba      	adds	r2, r7, #6
 8000520:	1df9      	adds	r1, r7, #7
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <SPI_RxByte+0x40>)
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	f001 fe20 	bl	8002170 <HAL_SPI_TransmitReceive>

  return data;
 8000530:	1dbb      	adds	r3, r7, #6
 8000532:	781b      	ldrb	r3, [r3, #0]
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000120 	.word	0x20000120

08000540 <SELECT>:
static void SELECT(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <SELECT+0x18>)
 8000546:	2200      	movs	r2, #0
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fea8 	bl	80012a0 <HAL_GPIO_WritePin>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	48000400 	.word	0x48000400

0800055c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <DESELECT+0x18>)
 8000562:	2201      	movs	r2, #1
 8000564:	2140      	movs	r1, #64	; 0x40
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fe9a 	bl	80012a0 <HAL_GPIO_WritePin>
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	48000400 	.word	0x48000400

08000578 <usart_putch>:
void usart_putch(uint8_t dat)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &dat, 1, 1000);
 8000584:	23fa      	movs	r3, #250	; 0xfa
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	1df9      	adds	r1, r7, #7
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <usart_putch+0x24>)
 800058c:	2201      	movs	r2, #1
 800058e:	f002 f997 	bl	80028c0 <HAL_UART_Transmit>
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	2000009c 	.word	0x2000009c

080005a0 <init_devices>:
void init_devices ( void )
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0


	sdsc = ( sdsc_interface * ) malloc ( sizeof ( sdsc_interface ) );
 80005a4:	2010      	movs	r0, #16
 80005a6:	f002 fd5f 	bl	8003068 <malloc>
 80005aa:	0003      	movs	r3, r0
 80005ac:	001a      	movs	r2, r3
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <init_devices+0x60>)
 80005b0:	601a      	str	r2, [r3, #0]
	sdsc -> spi_tx = SPI_TxByte;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <init_devices+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <init_devices+0x64>)
 80005b8:	601a      	str	r2, [r3, #0]
	sdsc -> spi_rx = SPI_RxByte;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <init_devices+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <init_devices+0x68>)
 80005c0:	605a      	str	r2, [r3, #4]
	//sdsc -> spi_init = 0;
	//sdsc -> spi_init_2x = 0;
	sdsc -> sdsc_assert = SELECT;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <init_devices+0x60>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <init_devices+0x6c>)
 80005c8:	609a      	str	r2, [r3, #8]
	sdsc -> sdsc_deassert = DESELECT;
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <init_devices+0x60>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <init_devices+0x70>)
 80005d0:	60da      	str	r2, [r3, #12]
	sdsc_init ();
 80005d2:	f000 fa03 	bl	80009dc <sdsc_init>

	fat = ( fat32_interface * ) malloc ( sizeof ( fat32_interface ) );
 80005d6:	2020      	movs	r0, #32
 80005d8:	f002 fd46 	bl	8003068 <malloc>
 80005dc:	0003      	movs	r3, r0
 80005de:	001a      	movs	r2, r3
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <init_devices+0x74>)
 80005e2:	601a      	str	r2, [r3, #0]
	fat -> read_single_block = read_single_block;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <init_devices+0x74>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <init_devices+0x78>)
 80005ea:	619a      	str	r2, [r3, #24]
	fat -> send_data_byte = usart_putch;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <init_devices+0x74>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <init_devices+0x7c>)
 80005f2:	61da      	str	r2, [r3, #28]
	fat32_init ();
 80005f4:	f7ff fe28 	bl	8000248 <fat32_init>

	//usart_init ();
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000184 	.word	0x20000184
 8000604:	080004c5 	.word	0x080004c5
 8000608:	080004fd 	.word	0x080004fd
 800060c:	08000541 	.word	0x08000541
 8000610:	0800055d 	.word	0x0800055d
 8000614:	20000098 	.word	0x20000098
 8000618:	08000a4d 	.word	0x08000a4d
 800061c:	08000579 	.word	0x08000579

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fb90 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f816 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8e4 	bl	80007f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000630:	f000 f874 	bl	800071c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f8b0 	bl	8000798 <MX_USART1_UART_Init>

  HAL_UART_Transmit(&huart1, "HELLO\n", 6, 1000);
 8000638:	23fa      	movs	r3, #250	; 0xfa
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4904      	ldr	r1, [pc, #16]	; (8000650 <main+0x30>)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <main+0x34>)
 8000640:	2206      	movs	r2, #6
 8000642:	f002 f93d 	bl	80028c0 <HAL_UART_Transmit>
  /* USER CODE BEGIN 2 */
  init_devices();
 8000646:	f7ff ffab 	bl	80005a0 <init_devices>
  /* USER CODE END 2 */
  list_files();
 800064a:	f7ff fec5 	bl	80003d8 <list_files>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x2e>
 8000650:	08003250 	.word	0x08003250
 8000654:	2000009c 	.word	0x2000009c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b095      	sub	sp, #84	; 0x54
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2420      	movs	r4, #32
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2330      	movs	r3, #48	; 0x30
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fd11 	bl	8003090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	2310      	movs	r3, #16
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2310      	movs	r3, #16
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fd09 	bl	8003090 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	2310      	movs	r3, #16
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fd02 	bl	8003090 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2210      	movs	r2, #16
 800069e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	22a0      	movs	r2, #160	; 0xa0
 80006b0:	0392      	lsls	r2, r2, #14
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fe0d 	bl	80012dc <HAL_RCC_OscConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c6:	f000 f91d 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	2110      	movs	r1, #16
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2207      	movs	r2, #7
 80006d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2101      	movs	r1, #1
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 f911 	bl	8001910 <HAL_RCC_ClockConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f907 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	003b      	movs	r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fa55 	bl	8001bb4 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800070e:	f000 f8f9 	bl	8000904 <Error_Handler>
  }
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b015      	add	sp, #84	; 0x54
 8000718:	bd90      	pop	{r4, r7, pc}
	...

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI1_Init+0x74>)
 8000728:	2282      	movs	r2, #130	; 0x82
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x74>)
 8000736:	22c0      	movs	r2, #192	; 0xc0
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x74>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x74>)
 8000752:	2220      	movs	r2, #32
 8000754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_SPI1_Init+0x74>)
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fae7 	bl	8001d50 <HAL_SPI_Init>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8bd 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000120 	.word	0x20000120
 8000794:	40013000 	.word	0x40013000

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART1_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2296      	movs	r2, #150	; 0x96
 80007a6:	0212      	lsls	r2, r2, #8
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f81b 	bl	8002818 <HAL_UART_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f88d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	40013800 	.word	0x40013800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	240c      	movs	r4, #12
 8000800:	193b      	adds	r3, r7, r4
 8000802:	0018      	movs	r0, r3
 8000804:	2314      	movs	r3, #20
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f002 fc41 	bl	8003090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <MX_GPIO_Init+0x100>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MX_GPIO_Init+0x100>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x100>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <MX_GPIO_Init+0x100>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_GPIO_Init+0x100>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0309      	lsls	r1, r1, #12
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x100>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	031b      	lsls	r3, r3, #12
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_GPIO_Init+0x100>)
 8000848:	695a      	ldr	r2, [r3, #20]
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_GPIO_Init+0x100>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	02c9      	lsls	r1, r1, #11
 8000850:	430a      	orrs	r2, r1
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x100>)
 8000856:	695a      	ldr	r2, [r3, #20]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	02db      	lsls	r3, r3, #11
 800085c:	4013      	ands	r3, r2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000862:	23c0      	movs	r3, #192	; 0xc0
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_GPIO_Init+0x104>)
 8000868:	2200      	movs	r2, #0
 800086a:	0019      	movs	r1, r3
 800086c:	f000 fd18 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0x108>)
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd12 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2290      	movs	r2, #144	; 0x90
 8000886:	0352      	lsls	r2, r2, #13
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fb91 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800089e:	0021      	movs	r1, r4
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	22c0      	movs	r2, #192	; 0xc0
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	000c      	movs	r4, r1
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_GPIO_Init+0x104>)
 80008c0:	0019      	movs	r1, r3
 80008c2:	0010      	movs	r0, r2
 80008c4:	f000 fb7c 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <MX_GPIO_Init+0x108>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f000 fb69 	bl	8000fc0 <HAL_GPIO_Init>

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b009      	add	sp, #36	; 0x24
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800
 8000900:	48000400 	.word	0x48000400

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <sdsc_command>:

#include "sdsc.h"
#include "main.h"
extern UART_HandleTypeDef huart1;
unsigned char sdsc_command ( unsigned char cmd, unsigned long arg )
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
	unsigned char r1;

	sdsc -> spi_tx ( cmd | 0x40 ); 
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <sdsc_command+0xc4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1dfa      	adds	r2, r7, #7
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	430a      	orrs	r2, r1
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	0010      	movs	r0, r2
 8000930:	4798      	blx	r3
	sdsc -> spi_tx ( arg >> 24 );
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <sdsc_command+0xc4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	0e12      	lsrs	r2, r2, #24
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	0010      	movs	r0, r2
 8000940:	4798      	blx	r3
	sdsc -> spi_tx ( arg >> 16 );
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <sdsc_command+0xc4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	0c12      	lsrs	r2, r2, #16
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	0010      	movs	r0, r2
 8000950:	4798      	blx	r3
	sdsc -> spi_tx ( arg >> 8 );
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <sdsc_command+0xc4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	0a12      	lsrs	r2, r2, #8
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	0010      	movs	r0, r2
 8000960:	4798      	blx	r3
	sdsc -> spi_tx ( arg );
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <sdsc_command+0xc4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	0010      	movs	r0, r2
 800096e:	4798      	blx	r3

	if ( cmd == SEND_IF_COND )
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b08      	cmp	r3, #8
 8000976:	d105      	bne.n	8000984 <sdsc_command+0x74>
	  sdsc -> spi_tx ( 0x87 );     
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <sdsc_command+0xc4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2087      	movs	r0, #135	; 0x87
 8000980:	4798      	blx	r3
 8000982:	e004      	b.n	800098e <sdsc_command+0x7e>
	else 
	  sdsc -> spi_tx ( 0x95 ); 
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <sdsc_command+0xc4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2095      	movs	r0, #149	; 0x95
 800098c:	4798      	blx	r3

	while ( ( r1 = sdsc -> spi_rx () ) == 0xff ); //wait response
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <sdsc_command+0xc4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4798      	blx	r3
 8000998:	0003      	movs	r3, r0
 800099a:	001a      	movs	r2, r3
 800099c:	210f      	movs	r1, #15
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	000a      	movs	r2, r1
 80009a4:	18bb      	adds	r3, r7, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2bff      	cmp	r3, #255	; 0xff
 80009aa:	d0f1      	beq.n	8000990 <sdsc_command+0x80>

	HAL_UART_Transmit(&huart1, &r1, 1, 1000);
 80009ac:	23fa      	movs	r3, #250	; 0xfa
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	0014      	movs	r4, r2
 80009b2:	18b9      	adds	r1, r7, r2
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <sdsc_command+0xc8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	f001 ff82 	bl	80028c0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80009bc:	23fa      	movs	r3, #250	; 0xfa
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fa25 	bl	8000e10 <HAL_Delay>

	return r1; 
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b005      	add	sp, #20
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000184 	.word	0x20000184
 80009d8:	2000009c 	.word	0x2000009c

080009dc <sdsc_init>:

void sdsc_init ( void )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	//sdsc -> spi_init ();

	sdsc -> sdsc_assert ();
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <sdsc_init+0x6c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	4798      	blx	r3
	while ( 0x01 != sdsc_command ( GO_IDLE_STATE, 0 ) );
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ff8f 	bl	8000910 <sdsc_command>
 80009f2:	0003      	movs	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d1f8      	bne.n	80009ea <sdsc_init+0xe>
	while ( 0x01 != sdsc_command ( SEND_IF_COND, 0x000001AA ) );
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	23d5      	movs	r3, #213	; 0xd5
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	0019      	movs	r1, r3
 8000a00:	2008      	movs	r0, #8
 8000a02:	f7ff ff85 	bl	8000910 <sdsc_command>
 8000a06:	0003      	movs	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d1f6      	bne.n	80009fa <sdsc_init+0x1e>
	while ( sdsc_command ( APP_CMD, 0 ) && sdsc_command ( SD_SEND_OP_COND, 0x40000000 ) );
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2037      	movs	r0, #55	; 0x37
 8000a12:	f7ff ff7d 	bl	8000910 <sdsc_command>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d007      	beq.n	8000a2a <sdsc_init+0x4e>
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0019      	movs	r1, r3
 8000a20:	2029      	movs	r0, #41	; 0x29
 8000a22:	f7ff ff75 	bl	8000910 <sdsc_command>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d1f1      	bne.n	8000a0e <sdsc_init+0x32>
	while ( 0x00 != sdsc_command ( READ_OCR, 0 ) );
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	203a      	movs	r0, #58	; 0x3a
 8000a30:	f7ff ff6e 	bl	8000910 <sdsc_command>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d1f9      	bne.n	8000a2c <sdsc_init+0x50>
	sdsc -> sdsc_deassert ();
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <sdsc_init+0x6c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	4798      	blx	r3
	
	//sdsc -> spi_init_2x ();
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000184 	.word	0x20000184

08000a4c <read_single_block>:

void read_single_block ( unsigned long block_address, unsigned char *buf )
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	int i;

	block_address = block_address << 9;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	607b      	str	r3, [r7, #4]

	sdsc -> sdsc_assert ();
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <read_single_block+0x80>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4798      	blx	r3
	while ( 0x00 != sdsc_command ( READ_SINGLE_BLOCK, block_address ) );
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	2011      	movs	r0, #17
 8000a6c:	f7ff ff50 	bl	8000910 <sdsc_command>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d1f8      	bne.n	8000a66 <read_single_block+0x1a>
	while ( 0xfe != sdsc -> spi_rx () );
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <read_single_block+0x80>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4798      	blx	r3
 8000a7e:	0003      	movs	r3, r0
 8000a80:	2bfe      	cmp	r3, #254	; 0xfe
 8000a82:	d1f8      	bne.n	8000a76 <read_single_block+0x2a>
	for ( i = 0; i < 512; i ++ )
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e00b      	b.n	8000aa2 <read_single_block+0x56>
  		buf [ i ] = sdsc -> spi_rx ();
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <read_single_block+0x80>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	188c      	adds	r4, r1, r2
 8000a96:	4798      	blx	r3
 8000a98:	0003      	movs	r3, r0
 8000a9a:	7023      	strb	r3, [r4, #0]
	for ( i = 0; i < 512; i ++ )
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbee      	blt.n	8000a8a <read_single_block+0x3e>
	sdsc -> spi_rx (); 
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <read_single_block+0x80>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4798      	blx	r3
	sdsc -> spi_rx ();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <read_single_block+0x80>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4798      	blx	r3
	sdsc -> sdsc_deassert ();;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <read_single_block+0x80>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	4798      	blx	r3
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b005      	add	sp, #20
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000184 	.word	0x20000184

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_MspInit+0x44>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	619a      	str	r2, [r3, #24]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4013      	ands	r3, r2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x44>)
 8000af0:	69da      	ldr	r2, [r3, #28]
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_MspInit+0x44>)
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0549      	lsls	r1, r1, #21
 8000af8:	430a      	orrs	r2, r1
 8000afa:	61da      	str	r2, [r3, #28]
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_MspInit+0x44>)
 8000afe:	69da      	ldr	r2, [r3, #28]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	055b      	lsls	r3, r3, #21
 8000b04:	4013      	ands	r3, r2
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	2414      	movs	r4, #20
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2314      	movs	r3, #20
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f002 fab0 	bl	8003090 <memset>
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_SPI_MspInit+0x90>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d132      	bne.n	8000ba0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b3c:	699a      	ldr	r2, [r3, #24]
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0149      	lsls	r1, r1, #5
 8000b44:	430a      	orrs	r2, r1
 8000b46:	619a      	str	r2, [r3, #24]
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b4a:	699a      	ldr	r2, [r3, #24]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	015b      	lsls	r3, r3, #5
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0289      	lsls	r1, r1, #10
 8000b60:	430a      	orrs	r2, r1
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	0021      	movs	r1, r4
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	22e0      	movs	r2, #224	; 0xe0
 8000b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	187a      	adds	r2, r7, r1
 8000b94:	2390      	movs	r3, #144	; 0x90
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fa10 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b00b      	add	sp, #44	; 0x2c
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b08b      	sub	sp, #44	; 0x2c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2414      	movs	r4, #20
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fa64 	bl	8003090 <memset>
  if(huart->Instance==USART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_UART_MspInit+0x94>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d133      	bne.n	8000c3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000bd4:	699a      	ldr	r2, [r3, #24]
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	01c9      	lsls	r1, r1, #7
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	619a      	str	r2, [r3, #24]
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	01db      	lsls	r3, r3, #7
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	0289      	lsls	r1, r1, #10
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_UART_MspInit+0x98>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	029b      	lsls	r3, r3, #10
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	22c0      	movs	r2, #192	; 0xc0
 8000c0e:	00d2      	lsls	r2, r2, #3
 8000c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	0021      	movs	r1, r4
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2202      	movs	r2, #2
 8000c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2203      	movs	r2, #3
 8000c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	187a      	adds	r2, r7, r1
 8000c2e:	2390      	movs	r3, #144	; 0x90
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f9c3 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b00b      	add	sp, #44	; 0x2c
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40013800 	.word	0x40013800
 8000c48:	40021000 	.word	0x40021000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8b2 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f002 f9b2 	bl	8003014 <__errno>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	425b      	negs	r3, r3
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	18d2      	adds	r2, r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b006      	add	sp, #24
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20002000 	.word	0x20002000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	200001a0 	.word	0x200001a0

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d1e:	f7ff ffe3 	bl	8000ce8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d22:	f002 f97d 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d26:	f7ff fc7b 	bl	8000620 <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   r0, =_estack
 8000d2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d38:	08003298 	.word	0x08003298
  ldr r2, =_sbss
 8000d3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d40:	2000019c 	.word	0x2000019c

08000d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_IRQHandler>
	...

08000d48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_Init+0x24>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_Init+0x24>)
 8000d52:	2110      	movs	r1, #16
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f809 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5e:	f7ff feb7 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_InitTick+0x5c>)
 8000d7a:	681c      	ldr	r4, [r3, #0]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	23fa      	movs	r3, #250	; 0xfa
 8000d84:	0098      	lsls	r0, r3, #2
 8000d86:	f7ff f9bf 	bl	8000108 <__udivsi3>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f7ff f9ba 	bl	8000108 <__udivsi3>
 8000d94:	0003      	movs	r3, r0
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f905 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e00f      	b.n	8000dc4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d80b      	bhi.n	8000dc2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	2301      	movs	r3, #1
 8000dae:	425b      	negs	r3, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 f8e2 	bl	8000f7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_InitTick+0x64>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b003      	add	sp, #12
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	001a      	movs	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	18d2      	adds	r2, r2, r3
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	601a      	str	r2, [r3, #0]
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000188 	.word	0x20000188

08000dfc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000188 	.word	0x20000188

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	001a      	movs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	189b      	adds	r3, r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000008 	.word	0x20000008

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e6c:	d828      	bhi.n	8000ec0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <__NVIC_SetPriority+0xd4>)
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	33c0      	adds	r3, #192	; 0xc0
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	589b      	ldr	r3, [r3, r2]
 8000e7e:	1dfa      	adds	r2, r7, #7
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	0011      	movs	r1, r2
 8000e84:	2203      	movs	r2, #3
 8000e86:	400a      	ands	r2, r1
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	21ff      	movs	r1, #255	; 0xff
 8000e8c:	4091      	lsls	r1, r2
 8000e8e:	000a      	movs	r2, r1
 8000e90:	43d2      	mvns	r2, r2
 8000e92:	401a      	ands	r2, r3
 8000e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	019b      	lsls	r3, r3, #6
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	4003      	ands	r3, r0
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eac:	481f      	ldr	r0, [pc, #124]	; (8000f2c <__NVIC_SetPriority+0xd4>)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	33c0      	adds	r3, #192	; 0xc0
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ebe:	e031      	b.n	8000f24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <__NVIC_SetPriority+0xd8>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	230f      	movs	r3, #15
 8000eca:	400b      	ands	r3, r1
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3306      	adds	r3, #6
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1dfa      	adds	r2, r7, #7
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	401a      	ands	r2, r3
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	4003      	ands	r3, r0
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <__NVIC_SetPriority+0xd8>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	001c      	movs	r4, r3
 8000f10:	230f      	movs	r3, #15
 8000f12:	4023      	ands	r3, r4
 8000f14:	3b08      	subs	r3, #8
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	3306      	adds	r3, #6
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	18c3      	adds	r3, r0, r3
 8000f20:	3304      	adds	r3, #4
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	045b      	lsls	r3, r3, #17
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d301      	bcc.n	8000f4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e010      	b.n	8000f6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <SysTick_Config+0x44>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	3a01      	subs	r2, #1
 8000f52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f54:	2301      	movs	r3, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	2103      	movs	r1, #3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff ff7c 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x44>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x44>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	210f      	movs	r1, #15
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	1c02      	adds	r2, r0, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff ffbf 	bl	8000f34 <SysTick_Config>
 8000fb6:	0003      	movs	r3, r0
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e14f      	b.n	8001270 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e140      	b.n	800126a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e09a      	b.n	800126a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1de>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1da>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1d6>
 8001192:	2303      	movs	r3, #3
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001196:	2305      	movs	r3, #5
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	035b      	lsls	r3, r3, #13
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	039b      	lsls	r3, r3, #14
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	40da      	lsrs	r2, r3
 8001278:	1e13      	subs	r3, r2, #0
 800127a:	d000      	beq.n	800127e <HAL_GPIO_Init+0x2be>
 800127c:	e6a8      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	0008      	movs	r0, r1
 80012aa:	0011      	movs	r1, r2
 80012ac:	1cbb      	adds	r3, r7, #2
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	1c7b      	adds	r3, r7, #1
 80012b4:	1c0a      	adds	r2, r1, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	1c7b      	adds	r3, r7, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c0:	1cbb      	adds	r3, r7, #2
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e301      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4013      	ands	r3, r2
 80012f6:	d100      	bne.n	80012fa <HAL_RCC_OscConfig+0x1e>
 80012f8:	e08d      	b.n	8001416 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012fa:	4bc3      	ldr	r3, [pc, #780]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	220c      	movs	r2, #12
 8001300:	4013      	ands	r3, r2
 8001302:	2b04      	cmp	r3, #4
 8001304:	d00e      	beq.n	8001324 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001306:	4bc0      	ldr	r3, [pc, #768]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	220c      	movs	r2, #12
 800130c:	4013      	ands	r3, r2
 800130e:	2b08      	cmp	r3, #8
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x64>
 8001312:	4bbd      	ldr	r3, [pc, #756]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	401a      	ands	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d10d      	bne.n	8001340 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4bb8      	ldr	r3, [pc, #736]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	d100      	bne.n	8001332 <HAL_RCC_OscConfig+0x56>
 8001330:	e070      	b.n	8001414 <HAL_RCC_OscConfig+0x138>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <HAL_RCC_OscConfig+0x60>
 800133a:	e06b      	b.n	8001414 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e2d8      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x7c>
 8001348:	4baf      	ldr	r3, [pc, #700]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4bae      	ldr	r3, [pc, #696]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0249      	lsls	r1, r1, #9
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e02f      	b.n	80013b8 <HAL_RCC_OscConfig+0xdc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x9e>
 8001360:	4ba9      	ldr	r3, [pc, #676]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4ba8      	ldr	r3, [pc, #672]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001366:	49a9      	ldr	r1, [pc, #676]	; (800160c <HAL_RCC_OscConfig+0x330>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	4ba6      	ldr	r3, [pc, #664]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4ba5      	ldr	r3, [pc, #660]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001372:	49a7      	ldr	r1, [pc, #668]	; (8001610 <HAL_RCC_OscConfig+0x334>)
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e01e      	b.n	80013b8 <HAL_RCC_OscConfig+0xdc>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0xc4>
 8001382:	4ba1      	ldr	r3, [pc, #644]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	02c9      	lsls	r1, r1, #11
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	4b9d      	ldr	r3, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b9c      	ldr	r3, [pc, #624]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xdc>
 80013a0:	4b99      	ldr	r3, [pc, #612]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b98      	ldr	r3, [pc, #608]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	4999      	ldr	r1, [pc, #612]	; (800160c <HAL_RCC_OscConfig+0x330>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	4b96      	ldr	r3, [pc, #600]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b95      	ldr	r3, [pc, #596]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	4997      	ldr	r1, [pc, #604]	; (8001610 <HAL_RCC_OscConfig+0x334>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d014      	beq.n	80013ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fd1c 	bl	8000dfc <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ca:	f7ff fd17 	bl	8000dfc <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e28a      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	4b8a      	ldr	r3, [pc, #552]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0xee>
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fd07 	bl	8000dfc <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fd02 	bl	8000dfc <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e275      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x118>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x146>
 8001420:	e069      	b.n	80014f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001422:	4b79      	ldr	r3, [pc, #484]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	220c      	movs	r2, #12
 8001428:	4013      	ands	r3, r2
 800142a:	d00b      	beq.n	8001444 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800142c:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	220c      	movs	r2, #12
 8001432:	4013      	ands	r3, r2
 8001434:	2b08      	cmp	r3, #8
 8001436:	d11c      	bne.n	8001472 <HAL_RCC_OscConfig+0x196>
 8001438:	4b73      	ldr	r3, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	4013      	ands	r3, r2
 8001442:	d116      	bne.n	8001472 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001444:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x17e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e24b      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	22f8      	movs	r2, #248	; 0xf8
 8001460:	4393      	bics	r3, r2
 8001462:	0019      	movs	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00da      	lsls	r2, r3, #3
 800146a:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001470:	e041      	b.n	80014f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d024      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fcb9 	bl	8000dfc <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fcb4 	bl	8000dfc <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e227      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b59      	ldr	r3, [pc, #356]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0f1      	beq.n	8001490 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	22f8      	movs	r2, #248	; 0xf8
 80014b2:	4393      	bics	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00da      	lsls	r2, r3, #3
 80014bc:	4b52      	ldr	r3, [pc, #328]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e018      	b.n	80014f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc94 	bl	8000dfc <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc8f 	bl	8000dfc <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e202      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f1      	bne.n	80014da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	4013      	ands	r3, r2
 80014fe:	d036      	beq.n	800156e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d019      	beq.n	800153c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800150a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fc72 	bl	8000dfc <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fc6d 	bl	8000dfc <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1e0      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d0f1      	beq.n	800151e <HAL_RCC_OscConfig+0x242>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800153e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fc58 	bl	8000dfc <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fc53 	bl	8000dfc <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1c6      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x29e>
 8001578:	e0b4      	b.n	80016e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	201f      	movs	r0, #31
 800157c:	183b      	adds	r3, r7, r0
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	055b      	lsls	r3, r3, #21
 800158a:	4013      	ands	r3, r2
 800158c:	d110      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	430a      	orrs	r2, r1
 800159a:	61da      	str	r2, [r3, #28]
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	055b      	lsls	r3, r3, #21
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015aa:	183b      	adds	r3, r7, r0
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d11a      	bne.n	80015f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0x338>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_RCC_OscConfig+0x338>)
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0049      	lsls	r1, r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fc17 	bl	8000dfc <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff fc12 	bl	8000dfc <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e185      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x338>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10e      	bne.n	8001618 <HAL_RCC_OscConfig+0x33c>
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_OscConfig+0x32c>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	621a      	str	r2, [r3, #32]
 8001606:	e035      	b.n	8001674 <HAL_RCC_OscConfig+0x398>
 8001608:	40021000 	.word	0x40021000
 800160c:	fffeffff 	.word	0xfffeffff
 8001610:	fffbffff 	.word	0xfffbffff
 8001614:	40007000 	.word	0x40007000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x35e>
 8001620:	4bb6      	ldr	r3, [pc, #728]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	4bb5      	ldr	r3, [pc, #724]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001626:	2101      	movs	r1, #1
 8001628:	438a      	bics	r2, r1
 800162a:	621a      	str	r2, [r3, #32]
 800162c:	4bb3      	ldr	r3, [pc, #716]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	4bb2      	ldr	r3, [pc, #712]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001632:	2104      	movs	r1, #4
 8001634:	438a      	bics	r2, r1
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	e01c      	b.n	8001674 <HAL_RCC_OscConfig+0x398>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x380>
 8001642:	4bae      	ldr	r3, [pc, #696]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	4bad      	ldr	r3, [pc, #692]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001648:	2104      	movs	r1, #4
 800164a:	430a      	orrs	r2, r1
 800164c:	621a      	str	r2, [r3, #32]
 800164e:	4bab      	ldr	r3, [pc, #684]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001650:	6a1a      	ldr	r2, [r3, #32]
 8001652:	4baa      	ldr	r3, [pc, #680]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	621a      	str	r2, [r3, #32]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x398>
 800165c:	4ba7      	ldr	r3, [pc, #668]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
 8001668:	4ba4      	ldr	r3, [pc, #656]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4ba3      	ldr	r3, [pc, #652]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800166e:	2104      	movs	r1, #4
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d014      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fbbe 	bl	8000dfc <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e009      	b.n	800169a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fbb9 	bl	8000dfc <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a9b      	ldr	r2, [pc, #620]	; (8001900 <HAL_RCC_OscConfig+0x624>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e12b      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	4b98      	ldr	r3, [pc, #608]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x3aa>
 80016a4:	e013      	b.n	80016ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fba9 	bl	8000dfc <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	e009      	b.n	80016c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fba4 	bl	8000dfc <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	4a91      	ldr	r2, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x624>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e116      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	4b8d      	ldr	r3, [pc, #564]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ce:	231f      	movs	r3, #31
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80016de:	4989      	ldr	r1, [pc, #548]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2210      	movs	r2, #16
 80016ea:	4013      	ands	r3, r2
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d12a      	bne.n	800174c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80016fc:	2104      	movs	r1, #4
 80016fe:	430a      	orrs	r2, r1
 8001700:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001702:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001706:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff fb75 	bl	8000dfc <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001718:	f7ff fb70 	bl	8000dfc <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0e3      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d0f1      	beq.n	8001718 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	22f8      	movs	r2, #248	; 0xf8
 800173a:	4393      	bics	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	00da      	lsls	r2, r3, #3
 8001744:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	e034      	b.n	80017b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	3305      	adds	r3, #5
 8001752:	d111      	bne.n	8001778 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001754:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800175a:	2104      	movs	r1, #4
 800175c:	438a      	bics	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	22f8      	movs	r2, #248	; 0xf8
 8001766:	4393      	bics	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	00da      	lsls	r2, r3, #3
 8001770:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
 8001776:	e01e      	b.n	80017b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001778:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800177a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800177e:	2104      	movs	r1, #4
 8001780:	430a      	orrs	r2, r1
 8001782:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001788:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800178a:	2101      	movs	r1, #1
 800178c:	438a      	bics	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fb34 	bl	8000dfc <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800179a:	f7ff fb2f 	bl	8000dfc <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0a2      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d1f1      	bne.n	800179a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d100      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4e4>
 80017be:	e097      	b.n	80018f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	220c      	movs	r2, #12
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d100      	bne.n	80017ce <HAL_RCC_OscConfig+0x4f2>
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d14c      	bne.n	8001870 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <HAL_RCC_OscConfig+0x62c>)
 80017de:	400a      	ands	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb0b 	bl	8000dfc <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb06 	bl	8000dfc <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e079      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	049b      	lsls	r3, r3, #18
 8001806:	4013      	ands	r3, r2
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	220f      	movs	r2, #15
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800181a:	430a      	orrs	r2, r1
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a3a      	ldr	r2, [pc, #232]	; (800190c <HAL_RCC_OscConfig+0x630>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	431a      	orrs	r2, r3
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0449      	lsls	r1, r1, #17
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fad9 	bl	8000dfc <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fad4 	bl	8000dfc <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e047      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	049b      	lsls	r3, r3, #18
 800186a:	4013      	ands	r3, r2
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x574>
 800186e:	e03f      	b.n	80018f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 8001876:	4924      	ldr	r1, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x62c>)
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fabe 	bl	8000dfc <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fab9 	bl	8000dfc <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e02c      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	049b      	lsls	r3, r3, #18
 80018a0:	4013      	ands	r3, r2
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x5aa>
 80018a4:	e024      	b.n	80018f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e01f      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x620>)
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	025b      	lsls	r3, r3, #9
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d10e      	bne.n	80018ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	220f      	movs	r2, #15
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	23f0      	movs	r3, #240	; 0xf0
 80018e0:	039b      	lsls	r3, r3, #14
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b008      	add	sp, #32
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40021000 	.word	0x40021000
 8001900:	00001388 	.word	0x00001388
 8001904:	efffffff 	.word	0xefffffff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	ffc2ffff 	.word	0xffc2ffff

08001910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b3      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d911      	bls.n	8001956 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	4013      	ands	r3, r2
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e09a      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d015      	beq.n	800198c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2204      	movs	r2, #4
 8001966:	4013      	ands	r3, r2
 8001968:	d006      	beq.n	8001978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001970:	21e0      	movs	r1, #224	; 0xe0
 8001972:	00c9      	lsls	r1, r1, #3
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	22f0      	movs	r2, #240	; 0xf0
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	4013      	ands	r3, r2
 80019a8:	d114      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06e      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d108      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e062      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e05b      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa08 	bl	8000dfc <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff fa03 	bl	8000dfc <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_RCC_ClockConfig+0x18c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e042      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1ec      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d211      	bcs.n	8001a4a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_RCC_ClockConfig+0x184>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e020      	b.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_RCC_ClockConfig+0x190>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a68:	f000 f820 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6c:	0001      	movs	r1, r0
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x188>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	220f      	movs	r2, #15
 8001a76:	4013      	ands	r3, r2
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x194>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x198>)
 8001a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff f973 	bl	8000d70 <HAL_InitTick>
  
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40022000 	.word	0x40022000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	fffff8ff 	.word	0xfffff8ff
 8001aa4:	08003278 	.word	0x08003278
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08f      	sub	sp, #60	; 0x3c
 8001ab0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ab2:	2314      	movs	r3, #20
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aba:	c313      	stmia	r3!, {r0, r1, r4}
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ac6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	220c      	movs	r2, #12
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d002      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d003      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x50>
 8001af4:	e02d      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001afa:	e02d      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	220f      	movs	r2, #15
 8001b02:	4013      	ands	r3, r2
 8001b04:	2214      	movs	r2, #20
 8001b06:	18ba      	adds	r2, r7, r2
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	220f      	movs	r2, #15
 8001b12:	4013      	ands	r3, r2
 8001b14:	1d3a      	adds	r2, r7, #4
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	4013      	ands	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b26:	4812      	ldr	r0, [pc, #72]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b28:	f7fe faee 	bl	8000108 <__udivsi3>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	001a      	movs	r2, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	4353      	muls	r3, r2
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
 8001b36:	e009      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	0152      	lsls	r2, r2, #5
 8001b3e:	1a52      	subs	r2, r2, r1
 8001b40:	0193      	lsls	r3, r2, #6
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	185b      	adds	r3, r3, r1
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b00f      	add	sp, #60	; 0x3c
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	08003258 	.word	0x08003258
 8001b68:	08003268 	.word	0x08003268
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b8c:	f7ff fff2 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b90:	0001      	movs	r1, r0
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	2207      	movs	r2, #7
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	40d9      	lsrs	r1, r3
 8001ba2:	000b      	movs	r3, r1
}    
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08003288 	.word	0x08003288

08001bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bd0:	e08e      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2017      	movs	r0, #23
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bdc:	69da      	ldr	r2, [r3, #28]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	055b      	lsls	r3, r3, #21
 8001be2:	4013      	ands	r3, r2
 8001be4:	d110      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0549      	lsls	r1, r1, #21
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	61da      	str	r2, [r3, #28]
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4013      	ands	r3, r2
 8001c12:	d11a      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0049      	lsls	r1, r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f8eb 	bl	8000dfc <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	e008      	b.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7ff f8e6 	bl	8000dfc <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e077      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d034      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d02c      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0249      	lsls	r1, r1, #9
 8001c80:	430a      	orrs	r2, r1
 8001c82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c8a:	492e      	ldr	r1, [pc, #184]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f8ad 	bl	8000dfc <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	e009      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f8a8 	bl	8000dfc <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e038      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cea:	4918      	ldr	r1, [pc, #96]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2220      	movs	r2, #32
 8001d14:	4013      	ands	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	4393      	bics	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b006      	add	sp, #24
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	fffffcff 	.word	0xfffffcff
 8001d44:	fffeffff 	.word	0xfffeffff
 8001d48:	00001388 	.word	0x00001388
 8001d4c:	efffffff 	.word	0xefffffff

08001d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0a8      	b.n	8001eb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	2382      	movs	r3, #130	; 0x82
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d009      	beq.n	8001d8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
 8001d7c:	e005      	b.n	8001d8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	225d      	movs	r2, #93	; 0x5d
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	225c      	movs	r2, #92	; 0x5c
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7fe feb6 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	225d      	movs	r2, #93	; 0x5d
 8001db0:	2102      	movs	r1, #2
 8001db2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	23e0      	movs	r3, #224	; 0xe0
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d902      	bls.n	8001dd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e002      	b.n	8001ddc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	015b      	lsls	r3, r3, #5
 8001dda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	23f0      	movs	r3, #240	; 0xf0
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d008      	beq.n	8001dfa <HAL_SPI_Init+0xaa>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	23e0      	movs	r3, #224	; 0xe0
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d002      	beq.n	8001dfa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	2382      	movs	r3, #130	; 0x82
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	2384      	movs	r3, #132	; 0x84
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2102      	movs	r1, #2
 8001e16:	400b      	ands	r3, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	400b      	ands	r3, r1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6999      	ldr	r1, [r3, #24]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2138      	movs	r1, #56	; 0x38
 8001e36:	400b      	ands	r3, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	400b      	ands	r3, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0011      	movs	r1, r2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	2204      	movs	r2, #4
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	2110      	movs	r1, #16
 8001e68:	400b      	ands	r3, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2108      	movs	r1, #8
 8001e72:	400b      	ands	r3, r1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	23f0      	movs	r3, #240	; 0xf0
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	0011      	movs	r1, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4907      	ldr	r1, [pc, #28]	; (8001ebc <HAL_SPI_Init+0x16c>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	225d      	movs	r2, #93	; 0x5d
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	fffff7ff 	.word	0xfffff7ff

08001ec0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ed0:	231f      	movs	r3, #31
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	225c      	movs	r2, #92	; 0x5c
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_SPI_Transmit+0x26>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e140      	b.n	8002168 <HAL_SPI_Transmit+0x2a8>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	225c      	movs	r2, #92	; 0x5c
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eee:	f7fe ff85 	bl	8000dfc <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001ef6:	2316      	movs	r3, #22
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	1dba      	adds	r2, r7, #6
 8001efc:	8812      	ldrh	r2, [r2, #0]
 8001efe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	225d      	movs	r2, #93	; 0x5d
 8001f04:	5c9b      	ldrb	r3, [r3, r2]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d004      	beq.n	8001f16 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001f0c:	231f      	movs	r3, #31
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2202      	movs	r2, #2
 8001f12:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f14:	e11d      	b.n	8002152 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_SPI_Transmit+0x64>
 8001f1c:	1dbb      	adds	r3, r7, #6
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f2c:	e111      	b.n	8002152 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	225d      	movs	r2, #93	; 0x5d
 8001f32:	2103      	movs	r1, #3
 8001f34:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1dba      	adds	r2, r7, #6
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1dba      	adds	r2, r7, #6
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2244      	movs	r2, #68	; 0x44
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	2100      	movs	r1, #0
 8001f66:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d110      	bne.n	8001fa2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2140      	movs	r1, #64	; 0x40
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	01c9      	lsls	r1, r1, #7
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d007      	beq.n	8001fc0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	23e0      	movs	r3, #224	; 0xe0
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d94e      	bls.n	800206a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_SPI_Transmit+0x11e>
 8001fd4:	2316      	movs	r3, #22
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d13f      	bne.n	800205e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	1c9a      	adds	r2, r3, #2
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002002:	e02c      	b.n	800205e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d112      	bne.n	8002038 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	1c9a      	adds	r2, r3, #2
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002036:	e012      	b.n	800205e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002038:	f7fe fee0 	bl	8000dfc <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d802      	bhi.n	800204e <HAL_SPI_Transmit+0x18e>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_SPI_Transmit+0x194>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d104      	bne.n	800205e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002054:	231f      	movs	r3, #31
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2203      	movs	r2, #3
 800205a:	701a      	strb	r2, [r3, #0]
          goto error;
 800205c:	e079      	b.n	8002152 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1cd      	bne.n	8002004 <HAL_SPI_Transmit+0x144>
 8002068:	e04f      	b.n	800210a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_SPI_Transmit+0x1bc>
 8002072:	2316      	movs	r3, #22
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d141      	bne.n	8002100 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80020a2:	e02d      	b.n	8002100 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d113      	bne.n	80020da <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020d8:	e012      	b.n	8002100 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020da:	f7fe fe8f 	bl	8000dfc <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d802      	bhi.n	80020f0 <HAL_SPI_Transmit+0x230>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_SPI_Transmit+0x236>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d104      	bne.n	8002100 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	2203      	movs	r2, #3
 80020fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80020fe:	e028      	b.n	8002152 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1cc      	bne.n	80020a4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fb3b 	bl	800278c <SPI_EndRxTxTransaction>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e000      	b.n	8002152 <HAL_SPI_Transmit+0x292>
  }

error:
 8002150:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	225d      	movs	r2, #93	; 0x5d
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	225c      	movs	r2, #92	; 0x5c
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b008      	add	sp, #32
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	001a      	movs	r2, r3
 800217e:	1cbb      	adds	r3, r7, #2
 8002180:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002186:	2323      	movs	r3, #35	; 0x23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	225c      	movs	r2, #92	; 0x5c
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_SPI_TransmitReceive+0x2c>
 8002198:	2302      	movs	r3, #2
 800219a:	e1b5      	b.n	8002508 <HAL_SPI_TransmitReceive+0x398>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	225c      	movs	r2, #92	; 0x5c
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a4:	f7fe fe2a 	bl	8000dfc <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ac:	201b      	movs	r0, #27
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	215d      	movs	r1, #93	; 0x5d
 80021b4:	5c52      	ldrb	r2, [r2, r1]
 80021b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80021be:	2312      	movs	r3, #18
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	1cba      	adds	r2, r7, #2
 80021c4:	8812      	ldrh	r2, [r2, #0]
 80021c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d011      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x84>
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	2382      	movs	r3, #130	; 0x82
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d107      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x7a>
 80021e2:	183b      	adds	r3, r7, r0
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d004      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80021ea:	2323      	movs	r3, #35	; 0x23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80021f2:	e17e      	b.n	80024f2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x98>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x98>
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002208:	2323      	movs	r3, #35	; 0x23
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002210:	e16f      	b.n	80024f2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	225d      	movs	r2, #93	; 0x5d
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	225d      	movs	r2, #93	; 0x5d
 8002222:	2105      	movs	r1, #5
 8002224:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1cba      	adds	r2, r7, #2
 8002236:	2146      	movs	r1, #70	; 0x46
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1cba      	adds	r2, r7, #2
 8002240:	2144      	movs	r1, #68	; 0x44
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1cba      	adds	r2, r7, #2
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1cba      	adds	r2, r7, #2
 8002258:	8812      	ldrh	r2, [r2, #0]
 800225a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	23e0      	movs	r3, #224	; 0xe0
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	429a      	cmp	r2, r3
 8002272:	d908      	bls.n	8002286 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	49a4      	ldr	r1, [pc, #656]	; (8002510 <HAL_SPI_TransmitReceive+0x3a0>)
 8002280:	400a      	ands	r2, r1
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e008      	b.n	8002298 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	0149      	lsls	r1, r1, #5
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d007      	beq.n	80022b6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	23e0      	movs	r3, #224	; 0xe0
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	429a      	cmp	r2, r3
 80022c0:	d800      	bhi.n	80022c4 <HAL_SPI_TransmitReceive+0x154>
 80022c2:	e07f      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x168>
 80022cc:	2312      	movs	r3, #18
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d000      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x168>
 80022d6:	e069      	b.n	80023ac <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fc:	e056      	b.n	80023ac <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d11b      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x1d4>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x1d4>
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d113      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2201      	movs	r2, #1
 800234c:	4013      	ands	r3, r2
 800234e:	2b01      	cmp	r3, #1
 8002350:	d11c      	bne.n	800238c <HAL_SPI_TransmitReceive+0x21c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2246      	movs	r2, #70	; 0x46
 8002356:	5a9b      	ldrh	r3, [r3, r2]
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	b292      	uxth	r2, r2
 800236a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2246      	movs	r2, #70	; 0x46
 800237a:	5a9b      	ldrh	r3, [r3, r2]
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b299      	uxth	r1, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2246      	movs	r2, #70	; 0x46
 8002386:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002388:	2301      	movs	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800238c:	f7fe fd36 	bl	8000dfc <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002398:	429a      	cmp	r2, r3
 800239a:	d807      	bhi.n	80023ac <HAL_SPI_TransmitReceive+0x23c>
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3301      	adds	r3, #1
 80023a0:	d004      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80023a2:	2323      	movs	r3, #35	; 0x23
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2203      	movs	r2, #3
 80023a8:	701a      	strb	r2, [r3, #0]
        goto error;
 80023aa:	e0a2      	b.n	80024f2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1a3      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x18e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2246      	movs	r2, #70	; 0x46
 80023ba:	5a9b      	ldrh	r3, [r3, r2]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d19d      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x18e>
 80023c2:	e085      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x268>
 80023cc:	2312      	movs	r3, #18
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d000      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x268>
 80023d6:	e070      	b.n	80024ba <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023fe:	e05c      	b.n	80024ba <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d11c      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x2d8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x2d8>
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b01      	cmp	r3, #1
 800241c:	d114      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11e      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x324>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2246      	movs	r2, #70	; 0x46
 800245a:	5a9b      	ldrh	r3, [r3, r2]
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	001a      	movs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2246      	movs	r2, #70	; 0x46
 8002482:	5a9b      	ldrh	r3, [r3, r2]
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b299      	uxth	r1, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2246      	movs	r2, #70	; 0x46
 800248e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002494:	f7fe fcb2 	bl	8000dfc <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d802      	bhi.n	80024aa <HAL_SPI_TransmitReceive+0x33a>
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	3301      	adds	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x340>
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80024b0:	2323      	movs	r3, #35	; 0x23
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2203      	movs	r2, #3
 80024b6:	701a      	strb	r2, [r3, #0]
        goto error;
 80024b8:	e01b      	b.n	80024f2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d19d      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x290>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2246      	movs	r2, #70	; 0x46
 80024c8:	5a9b      	ldrh	r3, [r3, r2]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d197      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f958 	bl	800278c <SPI_EndRxTxTransaction>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d007      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80024e0:	2323      	movs	r3, #35	; 0x23
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60
 80024ee:	e000      	b.n	80024f2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80024f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	225d      	movs	r2, #93	; 0x5d
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	225c      	movs	r2, #92	; 0x5c
 80024fe:	2100      	movs	r1, #0
 8002500:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002502:	2323      	movs	r3, #35	; 0x23
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781b      	ldrb	r3, [r3, #0]
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b00a      	add	sp, #40	; 0x28
 800250e:	bd80      	pop	{r7, pc}
 8002510:	ffffefff 	.word	0xffffefff

08002514 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	b2db      	uxtb	r3, r3
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800253c:	f7fe fc5e 	bl	8000dfc <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800254c:	f7fe fc56 	bl	8000dfc <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	015b      	lsls	r3, r3, #5
 800255a:	0d1b      	lsrs	r3, r3, #20
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	4353      	muls	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002562:	e058      	b.n	8002616 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	d055      	beq.n	8002616 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800256a:	f7fe fc47 	bl	8000dfc <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	429a      	cmp	r2, r3
 8002578:	d902      	bls.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x54>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d142      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	21e0      	movs	r1, #224	; 0xe0
 800258c:	438a      	bics	r2, r1
 800258e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	2382      	movs	r3, #130	; 0x82
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	429a      	cmp	r2, r3
 800259a:	d113      	bne.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2140      	movs	r1, #64	; 0x40
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d110      	bne.n	80025f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	491a      	ldr	r1, [pc, #104]	; (8002644 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0189      	lsls	r1, r1, #6
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	225d      	movs	r2, #93	; 0x5d
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	225c      	movs	r2, #92	; 0x5c
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e017      	b.n	8002636 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3b01      	subs	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	425a      	negs	r2, r3
 8002626:	4153      	adcs	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	001a      	movs	r2, r3
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d197      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b008      	add	sp, #32
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	20000000 	.word	0x20000000
 8002644:	ffffdfff 	.word	0xffffdfff

08002648 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002656:	2317      	movs	r3, #23
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800265e:	f7fe fbcd 	bl	8000dfc <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	18d3      	adds	r3, r2, r3
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800266e:	f7fe fbc5 	bl	8000dfc <HAL_GetTick>
 8002672:	0003      	movs	r3, r0
 8002674:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	0013      	movs	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	189b      	adds	r3, r3, r2
 8002688:	00da      	lsls	r2, r3, #3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	0d1b      	lsrs	r3, r3, #20
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	4353      	muls	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002694:	e068      	b.n	8002768 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	429a      	cmp	r2, r3
 800269e:	d10a      	bne.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d107      	bne.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	2117      	movs	r1, #23
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	d055      	beq.n	8002768 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026bc:	f7fe fb9e 	bl	8000dfc <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d902      	bls.n	80026d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d142      	bne.n	8002758 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	21e0      	movs	r1, #224	; 0xe0
 80026de:	438a      	bics	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	2382      	movs	r3, #130	; 0x82
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d113      	bne.n	8002716 <SPI_WaitFifoStateUntilTimeout+0xce>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d005      	beq.n	8002706 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	429a      	cmp	r2, r3
 8002704:	d107      	bne.n	8002716 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	438a      	bics	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	429a      	cmp	r2, r3
 8002720:	d110      	bne.n	8002744 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800272e:	400a      	ands	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0189      	lsls	r1, r1, #6
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	225d      	movs	r2, #93	; 0x5d
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	225c      	movs	r2, #92	; 0x5c
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e010      	b.n	800277a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3b01      	subs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d18e      	bne.n	8002696 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b00a      	add	sp, #40	; 0x28
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	20000000 	.word	0x20000000
 8002788:	ffffdfff 	.word	0xffffdfff

0800278c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	0013      	movs	r3, r2
 80027a6:	2200      	movs	r2, #0
 80027a8:	f7ff ff4e 	bl	8002648 <SPI_WaitFifoStateUntilTimeout>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d007      	beq.n	80027c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	2220      	movs	r2, #32
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e027      	b.n	8002810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	0013      	movs	r3, r2
 80027ca:	2200      	movs	r2, #0
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	f7ff fead 	bl	800252c <SPI_WaitFlagStateUntilTimeout>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d007      	beq.n	80027e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	2220      	movs	r2, #32
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e014      	b.n	8002810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	23c0      	movs	r3, #192	; 0xc0
 80027ea:	00d9      	lsls	r1, r3, #3
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0013      	movs	r3, r2
 80027f4:	2200      	movs	r2, #0
 80027f6:	f7ff ff27 	bl	8002648 <SPI_WaitFifoStateUntilTimeout>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d007      	beq.n	800280e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	2220      	movs	r2, #32
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e000      	b.n	8002810 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b004      	add	sp, #16
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e044      	b.n	80028b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2274      	movs	r2, #116	; 0x74
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe f9b7 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2224      	movs	r2, #36	; 0x24
 8002846:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f8da 	bl	8002a14 <UART_SetConfig>
 8002860:	0003      	movs	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e024      	b.n	80028b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fa0d 	bl	8002c94 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_UART_Init+0xa4>)
 8002886:	400a      	ands	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2108      	movs	r1, #8
 8002896:	438a      	bics	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 faa5 	bl	8002dfc <UART_CheckIdleState>
 80028b2:	0003      	movs	r3, r0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	fffff7ff 	.word	0xfffff7ff

080028c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d000      	beq.n	80028da <HAL_UART_Transmit+0x1a>
 80028d8:	e096      	b.n	8002a08 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_UART_Transmit+0x28>
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e08e      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d109      	bne.n	800290c <HAL_UART_Transmit+0x4c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e07e      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2274      	movs	r2, #116	; 0x74
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Transmit+0x5a>
 8002916:	2302      	movs	r3, #2
 8002918:	e077      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2274      	movs	r2, #116	; 0x74
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	2100      	movs	r1, #0
 8002928:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002930:	f7fe fa64 	bl	8000dfc <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1dba      	adds	r2, r7, #6
 800293c:	2150      	movs	r1, #80	; 0x50
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1dba      	adds	r2, r7, #6
 8002946:	2152      	movs	r1, #82	; 0x52
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	429a      	cmp	r2, r3
 8002956:	d108      	bne.n	800296a <HAL_UART_Transmit+0xaa>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e003      	b.n	8002972 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2274      	movs	r2, #116	; 0x74
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800297a:	e02d      	b.n	80029d8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0013      	movs	r3, r2
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	f000 fa7f 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e039      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	05d2      	lsls	r2, r2, #23
 80029a6:	0dd2      	lsrs	r2, r2, #23
 80029a8:	b292      	uxth	r2, r2
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	3302      	adds	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e008      	b.n	80029c6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b292      	uxth	r2, r2
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2252      	movs	r2, #82	; 0x52
 80029ca:	5a9b      	ldrh	r3, [r3, r2]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b299      	uxth	r1, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2252      	movs	r2, #82	; 0x52
 80029d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2252      	movs	r2, #82	; 0x52
 80029dc:	5a9b      	ldrh	r3, [r3, r2]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1cb      	bne.n	800297c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	0013      	movs	r3, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	f000 fa4b 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e005      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b008      	add	sp, #32
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1c:	231e      	movs	r3, #30
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a8d      	ldr	r2, [pc, #564]	; (8002c78 <UART_SetConfig+0x264>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a88      	ldr	r2, [pc, #544]	; (8002c7c <UART_SetConfig+0x268>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a7f      	ldr	r2, [pc, #508]	; (8002c80 <UART_SetConfig+0x26c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7b      	ldr	r2, [pc, #492]	; (8002c84 <UART_SetConfig+0x270>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d127      	bne.n	8002aea <UART_SetConfig+0xd6>
 8002a9a:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <UART_SetConfig+0x274>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d00d      	beq.n	8002ac2 <UART_SetConfig+0xae>
 8002aa6:	d81b      	bhi.n	8002ae0 <UART_SetConfig+0xcc>
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d014      	beq.n	8002ad6 <UART_SetConfig+0xc2>
 8002aac:	d818      	bhi.n	8002ae0 <UART_SetConfig+0xcc>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <UART_SetConfig+0xa4>
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d00a      	beq.n	8002acc <UART_SetConfig+0xb8>
 8002ab6:	e013      	b.n	8002ae0 <UART_SetConfig+0xcc>
 8002ab8:	231f      	movs	r3, #31
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e021      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002ac2:	231f      	movs	r3, #31
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e01c      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002acc:	231f      	movs	r3, #31
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e017      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2208      	movs	r2, #8
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e012      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002ae0:	231f      	movs	r3, #31
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e00d      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a67      	ldr	r2, [pc, #412]	; (8002c8c <UART_SetConfig+0x278>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d104      	bne.n	8002afe <UART_SetConfig+0xea>
 8002af4:	231f      	movs	r3, #31
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e003      	b.n	8002b06 <UART_SetConfig+0xf2>
 8002afe:	231f      	movs	r3, #31
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2210      	movs	r2, #16
 8002b04:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d15d      	bne.n	8002bce <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002b12:	231f      	movs	r3, #31
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d015      	beq.n	8002b48 <UART_SetConfig+0x134>
 8002b1c:	dc18      	bgt.n	8002b50 <UART_SetConfig+0x13c>
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00d      	beq.n	8002b3e <UART_SetConfig+0x12a>
 8002b22:	dc15      	bgt.n	8002b50 <UART_SetConfig+0x13c>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <UART_SetConfig+0x11a>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d005      	beq.n	8002b38 <UART_SetConfig+0x124>
 8002b2c:	e010      	b.n	8002b50 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2e:	f7ff f82b 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002b32:	0003      	movs	r3, r0
 8002b34:	61bb      	str	r3, [r7, #24]
        break;
 8002b36:	e012      	b.n	8002b5e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <UART_SetConfig+0x27c>)
 8002b3a:	61bb      	str	r3, [r7, #24]
        break;
 8002b3c:	e00f      	b.n	8002b5e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7fe ffb5 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8002b42:	0003      	movs	r3, r0
 8002b44:	61bb      	str	r3, [r7, #24]
        break;
 8002b46:	e00a      	b.n	8002b5e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	61bb      	str	r3, [r7, #24]
        break;
 8002b4e:	e006      	b.n	8002b5e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b54:	231e      	movs	r3, #30
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
        break;
 8002b5c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <UART_SetConfig+0x152>
 8002b64:	e07b      	b.n	8002c5e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f7fd fac5 	bl	8000108 <__udivsi3>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	d91c      	bls.n	8002bc4 <UART_SetConfig+0x1b0>
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	025b      	lsls	r3, r3, #9
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d217      	bcs.n	8002bc4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	200e      	movs	r0, #14
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	210f      	movs	r1, #15
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2207      	movs	r2, #7
 8002baa:	4013      	ands	r3, r2
 8002bac:	b299      	uxth	r1, r3
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	183a      	adds	r2, r7, r0
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	183a      	adds	r2, r7, r0
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	e04c      	b.n	8002c5e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc4:	231e      	movs	r3, #30
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e047      	b.n	8002c5e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bce:	231f      	movs	r3, #31
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d015      	beq.n	8002c04 <UART_SetConfig+0x1f0>
 8002bd8:	dc18      	bgt.n	8002c0c <UART_SetConfig+0x1f8>
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00d      	beq.n	8002bfa <UART_SetConfig+0x1e6>
 8002bde:	dc15      	bgt.n	8002c0c <UART_SetConfig+0x1f8>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <UART_SetConfig+0x1d6>
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d005      	beq.n	8002bf4 <UART_SetConfig+0x1e0>
 8002be8:	e010      	b.n	8002c0c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bea:	f7fe ffcd 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	61bb      	str	r3, [r7, #24]
        break;
 8002bf2:	e012      	b.n	8002c1a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <UART_SetConfig+0x27c>)
 8002bf6:	61bb      	str	r3, [r7, #24]
        break;
 8002bf8:	e00f      	b.n	8002c1a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfa:	f7fe ff57 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
        break;
 8002c02:	e00a      	b.n	8002c1a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	61bb      	str	r3, [r7, #24]
        break;
 8002c0a:	e006      	b.n	8002c1a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c10:	231e      	movs	r3, #30
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
        break;
 8002c18:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01e      	beq.n	8002c5e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	085a      	lsrs	r2, r3, #1
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	18d2      	adds	r2, r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f7fd fa69 	bl	8000108 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	d909      	bls.n	8002c56 <UART_SetConfig+0x242>
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	025b      	lsls	r3, r3, #9
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d204      	bcs.n	8002c56 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e003      	b.n	8002c5e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c56:	231e      	movs	r3, #30
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c6a:	231e      	movs	r3, #30
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b008      	add	sp, #32
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	ffff69f3 	.word	0xffff69f3
 8002c7c:	ffffcfff 	.word	0xffffcfff
 8002c80:	fffff4ff 	.word	0xfffff4ff
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <UART_AdvFeatureConfig+0x144>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <UART_AdvFeatureConfig+0x148>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <UART_AdvFeatureConfig+0x14c>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2208      	movs	r2, #8
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <UART_AdvFeatureConfig+0x150>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <UART_AdvFeatureConfig+0x154>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <UART_AdvFeatureConfig+0x158>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d01d      	beq.n	8002dae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <UART_AdvFeatureConfig+0x15c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	035b      	lsls	r3, r3, #13
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10b      	bne.n	8002dae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <UART_AdvFeatureConfig+0x160>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	4013      	ands	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <UART_AdvFeatureConfig+0x164>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	fffdffff 	.word	0xfffdffff
 8002ddc:	fffeffff 	.word	0xfffeffff
 8002de0:	fffbffff 	.word	0xfffbffff
 8002de4:	ffff7fff 	.word	0xffff7fff
 8002de8:	ffffefff 	.word	0xffffefff
 8002dec:	ffffdfff 	.word	0xffffdfff
 8002df0:	ffefffff 	.word	0xffefffff
 8002df4:	ff9fffff 	.word	0xff9fffff
 8002df8:	fff7ffff 	.word	0xfff7ffff

08002dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e0c:	f7fd fff6 	bl	8000dfc <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d10c      	bne.n	8002e3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0391      	lsls	r1, r2, #14
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <UART_CheckIdleState+0x8c>)
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f000 f82c 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e021      	b.n	8002e80 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d10c      	bne.n	8002e64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	03d1      	lsls	r1, r2, #15
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <UART_CheckIdleState+0x8c>)
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f000 f818 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d001      	beq.n	8002e64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e00d      	b.n	8002e80 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2274      	movs	r2, #116	; 0x74
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	01ffffff 	.word	0x01ffffff

08002e8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	e0a3      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d100      	bne.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ea4:	e09f      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fd ffa9 	bl	8000dfc <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d13d      	bne.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	494c      	ldr	r1, [pc, #304]	; (8003010 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef8:	2301      	movs	r3, #1
 8002efa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	438a      	bics	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2274      	movs	r2, #116	; 0x74
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e067      	b.n	8003008 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d050      	beq.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d146      	bne.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	613b      	str	r3, [r7, #16]
  return(result);
 8002f68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4923      	ldr	r1, [pc, #140]	; (8003010 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f9a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	438a      	bics	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2274      	movs	r2, #116	; 0x74
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e010      	b.n	8003008 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	425a      	negs	r2, r3
 8002ff6:	4153      	adcs	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d100      	bne.n	8003006 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003004:	e74b      	b.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b014      	add	sp, #80	; 0x50
 800300e:	bd80      	pop	{r7, pc}
 8003010:	fffffe5f 	.word	0xfffffe5f

08003014 <__errno>:
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <__errno+0x8>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	4770      	bx	lr
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	2000000c 	.word	0x2000000c

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2600      	movs	r6, #0
 8003024:	4d0c      	ldr	r5, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a6      	cmp	r6, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	2600      	movs	r6, #0
 8003032:	f000 f901 	bl	8003238 <_init>
 8003036:	4d0a      	ldr	r5, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1b64      	subs	r4, r4, r5
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a6      	cmp	r6, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	00b3      	lsls	r3, r6, #2
 8003046:	58eb      	ldr	r3, [r5, r3]
 8003048:	4798      	blx	r3
 800304a:	3601      	adds	r6, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	00b3      	lsls	r3, r6, #2
 8003050:	58eb      	ldr	r3, [r5, r3]
 8003052:	4798      	blx	r3
 8003054:	3601      	adds	r6, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	08003290 	.word	0x08003290
 800305c:	08003290 	.word	0x08003290
 8003060:	08003290 	.word	0x08003290
 8003064:	08003294 	.word	0x08003294

08003068 <malloc>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4b03      	ldr	r3, [pc, #12]	; (8003078 <malloc+0x10>)
 800306c:	0001      	movs	r1, r0
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	f000 f860 	bl	8003134 <_malloc_r>
 8003074:	bd10      	pop	{r4, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	2000000c 	.word	0x2000000c

0800307c <free>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4b03      	ldr	r3, [pc, #12]	; (800308c <free+0x10>)
 8003080:	0001      	movs	r1, r0
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	f000 f80c 	bl	80030a0 <_free_r>
 8003088:	bd10      	pop	{r4, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	2000000c 	.word	0x2000000c

08003090 <memset>:
 8003090:	0003      	movs	r3, r0
 8003092:	1882      	adds	r2, r0, r2
 8003094:	4293      	cmp	r3, r2
 8003096:	d100      	bne.n	800309a <memset+0xa>
 8003098:	4770      	bx	lr
 800309a:	7019      	strb	r1, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	e7f9      	b.n	8003094 <memset+0x4>

080030a0 <_free_r>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	0005      	movs	r5, r0
 80030a4:	2900      	cmp	r1, #0
 80030a6:	d010      	beq.n	80030ca <_free_r+0x2a>
 80030a8:	1f0c      	subs	r4, r1, #4
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <_free_r+0x12>
 80030b0:	18e4      	adds	r4, r4, r3
 80030b2:	0028      	movs	r0, r5
 80030b4:	f000 f8ae 	bl	8003214 <__malloc_lock>
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <_free_r+0x90>)
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <_free_r+0x2c>
 80030c0:	6063      	str	r3, [r4, #4]
 80030c2:	6014      	str	r4, [r2, #0]
 80030c4:	0028      	movs	r0, r5
 80030c6:	f000 f8ad 	bl	8003224 <__malloc_unlock>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d908      	bls.n	80030e2 <_free_r+0x42>
 80030d0:	6821      	ldr	r1, [r4, #0]
 80030d2:	1860      	adds	r0, r4, r1
 80030d4:	4283      	cmp	r3, r0
 80030d6:	d1f3      	bne.n	80030c0 <_free_r+0x20>
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	1841      	adds	r1, r0, r1
 80030de:	6021      	str	r1, [r4, #0]
 80030e0:	e7ee      	b.n	80030c0 <_free_r+0x20>
 80030e2:	001a      	movs	r2, r3
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <_free_r+0x4e>
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	d9f9      	bls.n	80030e2 <_free_r+0x42>
 80030ee:	6811      	ldr	r1, [r2, #0]
 80030f0:	1850      	adds	r0, r2, r1
 80030f2:	42a0      	cmp	r0, r4
 80030f4:	d10b      	bne.n	800310e <_free_r+0x6e>
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	1809      	adds	r1, r1, r0
 80030fa:	1850      	adds	r0, r2, r1
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	4283      	cmp	r3, r0
 8003100:	d1e0      	bne.n	80030c4 <_free_r+0x24>
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	1841      	adds	r1, r0, r1
 8003108:	6011      	str	r1, [r2, #0]
 800310a:	6053      	str	r3, [r2, #4]
 800310c:	e7da      	b.n	80030c4 <_free_r+0x24>
 800310e:	42a0      	cmp	r0, r4
 8003110:	d902      	bls.n	8003118 <_free_r+0x78>
 8003112:	230c      	movs	r3, #12
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	e7d5      	b.n	80030c4 <_free_r+0x24>
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	1860      	adds	r0, r4, r1
 800311c:	4283      	cmp	r3, r0
 800311e:	d103      	bne.n	8003128 <_free_r+0x88>
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	1841      	adds	r1, r0, r1
 8003126:	6021      	str	r1, [r4, #0]
 8003128:	6063      	str	r3, [r4, #4]
 800312a:	6054      	str	r4, [r2, #4]
 800312c:	e7ca      	b.n	80030c4 <_free_r+0x24>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000090 	.word	0x20000090

08003134 <_malloc_r>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	2303      	movs	r3, #3
 8003138:	1ccd      	adds	r5, r1, #3
 800313a:	439d      	bics	r5, r3
 800313c:	3508      	adds	r5, #8
 800313e:	0006      	movs	r6, r0
 8003140:	2d0c      	cmp	r5, #12
 8003142:	d21f      	bcs.n	8003184 <_malloc_r+0x50>
 8003144:	250c      	movs	r5, #12
 8003146:	42a9      	cmp	r1, r5
 8003148:	d81e      	bhi.n	8003188 <_malloc_r+0x54>
 800314a:	0030      	movs	r0, r6
 800314c:	f000 f862 	bl	8003214 <__malloc_lock>
 8003150:	4925      	ldr	r1, [pc, #148]	; (80031e8 <_malloc_r+0xb4>)
 8003152:	680a      	ldr	r2, [r1, #0]
 8003154:	0014      	movs	r4, r2
 8003156:	2c00      	cmp	r4, #0
 8003158:	d11a      	bne.n	8003190 <_malloc_r+0x5c>
 800315a:	4f24      	ldr	r7, [pc, #144]	; (80031ec <_malloc_r+0xb8>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <_malloc_r+0x38>
 8003162:	0021      	movs	r1, r4
 8003164:	0030      	movs	r0, r6
 8003166:	f000 f843 	bl	80031f0 <_sbrk_r>
 800316a:	6038      	str	r0, [r7, #0]
 800316c:	0029      	movs	r1, r5
 800316e:	0030      	movs	r0, r6
 8003170:	f000 f83e 	bl	80031f0 <_sbrk_r>
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	d12b      	bne.n	80031d0 <_malloc_r+0x9c>
 8003178:	230c      	movs	r3, #12
 800317a:	0030      	movs	r0, r6
 800317c:	6033      	str	r3, [r6, #0]
 800317e:	f000 f851 	bl	8003224 <__malloc_unlock>
 8003182:	e003      	b.n	800318c <_malloc_r+0x58>
 8003184:	2d00      	cmp	r5, #0
 8003186:	dade      	bge.n	8003146 <_malloc_r+0x12>
 8003188:	230c      	movs	r3, #12
 800318a:	6033      	str	r3, [r6, #0]
 800318c:	2000      	movs	r0, #0
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	1b5b      	subs	r3, r3, r5
 8003194:	d419      	bmi.n	80031ca <_malloc_r+0x96>
 8003196:	2b0b      	cmp	r3, #11
 8003198:	d903      	bls.n	80031a2 <_malloc_r+0x6e>
 800319a:	6023      	str	r3, [r4, #0]
 800319c:	18e4      	adds	r4, r4, r3
 800319e:	6025      	str	r5, [r4, #0]
 80031a0:	e003      	b.n	80031aa <_malloc_r+0x76>
 80031a2:	6863      	ldr	r3, [r4, #4]
 80031a4:	42a2      	cmp	r2, r4
 80031a6:	d10e      	bne.n	80031c6 <_malloc_r+0x92>
 80031a8:	600b      	str	r3, [r1, #0]
 80031aa:	0030      	movs	r0, r6
 80031ac:	f000 f83a 	bl	8003224 <__malloc_unlock>
 80031b0:	0020      	movs	r0, r4
 80031b2:	2207      	movs	r2, #7
 80031b4:	300b      	adds	r0, #11
 80031b6:	1d23      	adds	r3, r4, #4
 80031b8:	4390      	bics	r0, r2
 80031ba:	1ac2      	subs	r2, r0, r3
 80031bc:	4298      	cmp	r0, r3
 80031be:	d0e6      	beq.n	800318e <_malloc_r+0x5a>
 80031c0:	1a1b      	subs	r3, r3, r0
 80031c2:	50a3      	str	r3, [r4, r2]
 80031c4:	e7e3      	b.n	800318e <_malloc_r+0x5a>
 80031c6:	6053      	str	r3, [r2, #4]
 80031c8:	e7ef      	b.n	80031aa <_malloc_r+0x76>
 80031ca:	0022      	movs	r2, r4
 80031cc:	6864      	ldr	r4, [r4, #4]
 80031ce:	e7c2      	b.n	8003156 <_malloc_r+0x22>
 80031d0:	2303      	movs	r3, #3
 80031d2:	1cc4      	adds	r4, r0, #3
 80031d4:	439c      	bics	r4, r3
 80031d6:	42a0      	cmp	r0, r4
 80031d8:	d0e1      	beq.n	800319e <_malloc_r+0x6a>
 80031da:	1a21      	subs	r1, r4, r0
 80031dc:	0030      	movs	r0, r6
 80031de:	f000 f807 	bl	80031f0 <_sbrk_r>
 80031e2:	1c43      	adds	r3, r0, #1
 80031e4:	d1db      	bne.n	800319e <_malloc_r+0x6a>
 80031e6:	e7c7      	b.n	8003178 <_malloc_r+0x44>
 80031e8:	20000090 	.word	0x20000090
 80031ec:	20000094 	.word	0x20000094

080031f0 <_sbrk_r>:
 80031f0:	2300      	movs	r3, #0
 80031f2:	b570      	push	{r4, r5, r6, lr}
 80031f4:	4d06      	ldr	r5, [pc, #24]	; (8003210 <_sbrk_r+0x20>)
 80031f6:	0004      	movs	r4, r0
 80031f8:	0008      	movs	r0, r1
 80031fa:	602b      	str	r3, [r5, #0]
 80031fc:	f7fd fd3e 	bl	8000c7c <_sbrk>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d103      	bne.n	800320c <_sbrk_r+0x1c>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d000      	beq.n	800320c <_sbrk_r+0x1c>
 800320a:	6023      	str	r3, [r4, #0]
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	2000018c 	.word	0x2000018c

08003214 <__malloc_lock>:
 8003214:	b510      	push	{r4, lr}
 8003216:	4802      	ldr	r0, [pc, #8]	; (8003220 <__malloc_lock+0xc>)
 8003218:	f000 f80c 	bl	8003234 <__retarget_lock_acquire_recursive>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000194 	.word	0x20000194

08003224 <__malloc_unlock>:
 8003224:	b510      	push	{r4, lr}
 8003226:	4802      	ldr	r0, [pc, #8]	; (8003230 <__malloc_unlock+0xc>)
 8003228:	f000 f805 	bl	8003236 <__retarget_lock_release_recursive>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000194 	.word	0x20000194

08003234 <__retarget_lock_acquire_recursive>:
 8003234:	4770      	bx	lr

08003236 <__retarget_lock_release_recursive>:
 8003236:	4770      	bx	lr

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
