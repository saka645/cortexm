
20_uart1_tx_dms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001018  08001018  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001018  08001018  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001018  08001018  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001018  08001018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800107c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800107c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000107f  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000581  00000000  00000000  00021146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  000216c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010a  00000000  00000000  00021848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a23a  00000000  00000000  00021952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bc5  00000000  00000000  0002bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000320d1  00000000  00000000  0002d751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ac4  00000000  00000000  0005f824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000602e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000fd8 	.word	0x08000fd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08000fd8 	.word	0x08000fd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

static void uart_callback();

char read_char=0;
int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	uart1_rx_interrupt_init();
 8000224:	f000 f8f4 	bl	8000410 <uart1_rx_interrupt_init>
	printf("hello please enter A\n");
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <main+0x14>)
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fb04 	bl	8000838 <puts>
	while(1)
 8000230:	e7fe      	b.n	8000230 <main+0x10>
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	08000ff0 	.word	0x08000ff0

08000238 <uart_callback>:
		//read_char = uart1_read();

	}
}
static void uart_callback()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	read_char = USART1->RDR;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <uart_callback+0x28>)
 800023e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000240:	b29b      	uxth	r3, r3
 8000242:	b2da      	uxtb	r2, r3
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <uart_callback+0x2c>)
 8000246:	701a      	strb	r2, [r3, #0]
	if(read_char=='A')
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <uart_callback+0x2c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b41      	cmp	r3, #65	; 0x41
 800024e:	d103      	bne.n	8000258 <uart_callback+0x20>
		printf("you pressed A\n");
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <uart_callback+0x30>)
 8000252:	0018      	movs	r0, r3
 8000254:	f000 faf0 	bl	8000838 <puts>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40013800 	.word	0x40013800
 8000264:	20000078 	.word	0x20000078
 8000268:	08001008 	.word	0x08001008

0800026c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	//check interrupt flag
	if(USART1->ISR & SR_RXNE)
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <USART1_IRQHandler+0x18>)
 8000272:	69db      	ldr	r3, [r3, #28]
 8000274:	2220      	movs	r2, #32
 8000276:	4013      	ands	r3, r2
 8000278:	d001      	beq.n	800027e <USART1_IRQHandler+0x12>
	{
		uart_callback();
 800027a:	f7ff ffdd 	bl	8000238 <uart_callback>
	}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40013800 	.word	0x40013800

08000288 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e00a      	b.n	80002b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800029a:	e000      	b.n	800029e <_read+0x16>
 800029c:	bf00      	nop
 800029e:	0001      	movs	r1, r0
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	1c5a      	adds	r2, r3, #1
 80002a4:	60ba      	str	r2, [r7, #8]
 80002a6:	b2ca      	uxtb	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf0      	blt.n	800029a <_read+0x12>
  }

  return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	0018      	movs	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	b006      	add	sp, #24
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b086      	sub	sp, #24
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 f889 	bl	80003f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x12>
  }
  return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b006      	add	sp, #24
 80002f8:	bd80      	pop	{r7, pc}

080002fa <_close>:

int _close(int file)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000302:	2301      	movs	r3, #1
 8000304:	425b      	negs	r3, r3
}
 8000306:	0018      	movs	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}

0800030e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b082      	sub	sp, #8
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	0192      	lsls	r2, r2, #6
 800031e:	605a      	str	r2, [r3, #4]
  return 0;
 8000320:	2300      	movs	r3, #0
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}

0800032a <_isatty>:

int _isatty(int file)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b082      	sub	sp, #8
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000332:	2301      	movs	r3, #1
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000348:	2300      	movs	r3, #0
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	b004      	add	sp, #16
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 fbaa 	bl	8000adc <__errno>
 8000388:	0003      	movs	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	2301      	movs	r3, #1
 8000390:	425b      	negs	r3, r3
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	18d2      	adds	r2, r2, r3
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	0018      	movs	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b006      	add	sp, #24
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20002000 	.word	0x20002000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	2000007c 	.word	0x2000007c
 80003bc:	200001d0 	.word	0x200001d0

080003c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	0002      	movs	r2, r0
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b7f      	cmp	r3, #127	; 0x7f
 80003d2:	d809      	bhi.n	80003e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	001a      	movs	r2, r3
 80003da:	231f      	movs	r3, #31
 80003dc:	401a      	ands	r2, r3
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <__NVIC_EnableIRQ+0x30>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	4091      	lsls	r1, r2
 80003e4:	000a      	movs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
  }
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b002      	add	sp, #8
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <__io_putchar>:
#define DMA_CH_CONFIG	(1U<<0)
#define DMA_CH_2_SEL	(1U<<5)
#define DMA_CH_2_MINC	(1U<<7)

int __io_putchar(int ch)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f8bd 	bl	8000580 <uart1_write>
	return ch;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}

08000410 <uart1_rx_interrupt_init>:

void uart1_rx_interrupt_init()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOBEN;
 8000414:	4b39      	ldr	r3, [pc, #228]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	02c9      	lsls	r1, r1, #11
 800041e:	430a      	orrs	r2, r1
 8000420:	615a      	str	r2, [r3, #20]
	//alternate fun mode//pb6 tx
	GPIOB->MODER &= ~(1U<<12);
 8000422:	4b37      	ldr	r3, [pc, #220]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b36      	ldr	r3, [pc, #216]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000428:	4936      	ldr	r1, [pc, #216]	; (8000504 <uart1_rx_interrupt_init+0xf4>)
 800042a:	400a      	ands	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<13);
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0189      	lsls	r1, r1, #6
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
	//alternate fun mode//pb7 rx
	GPIOB->MODER &= ~(1U<<14);
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000442:	4931      	ldr	r1, [pc, #196]	; (8000508 <uart1_rx_interrupt_init+0xf8>)
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<15);
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	0209      	lsls	r1, r1, #8
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]
	//pb6 to alternate fun tx, af0
	GPIOB->AFR[0] &= ~(1<<24);
 8000456:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000458:	6a1a      	ldr	r2, [r3, #32]
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800045c:	492b      	ldr	r1, [pc, #172]	; (800050c <uart1_rx_interrupt_init+0xfc>)
 800045e:	400a      	ands	r2, r1
 8000460:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<25);
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000464:	6a1a      	ldr	r2, [r3, #32]
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000468:	4929      	ldr	r1, [pc, #164]	; (8000510 <uart1_rx_interrupt_init+0x100>)
 800046a:	400a      	ands	r2, r1
 800046c:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<26);
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000470:	6a1a      	ldr	r2, [r3, #32]
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000474:	4927      	ldr	r1, [pc, #156]	; (8000514 <uart1_rx_interrupt_init+0x104>)
 8000476:	400a      	ands	r2, r1
 8000478:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<27);
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800047c:	6a1a      	ldr	r2, [r3, #32]
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000480:	4925      	ldr	r1, [pc, #148]	; (8000518 <uart1_rx_interrupt_init+0x108>)
 8000482:	400a      	ands	r2, r1
 8000484:	621a      	str	r2, [r3, #32]
	//pb7 to alternate fun rx, af0
	GPIOB->AFR[0] &= ~(1<<28);
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000488:	6a1a      	ldr	r2, [r3, #32]
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800048c:	4923      	ldr	r1, [pc, #140]	; (800051c <uart1_rx_interrupt_init+0x10c>)
 800048e:	400a      	ands	r2, r1
 8000490:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<29);
 8000492:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000494:	6a1a      	ldr	r2, [r3, #32]
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000498:	4921      	ldr	r1, [pc, #132]	; (8000520 <uart1_rx_interrupt_init+0x110>)
 800049a:	400a      	ands	r2, r1
 800049c:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<30);
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004a0:	6a1a      	ldr	r2, [r3, #32]
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004a4:	491f      	ldr	r1, [pc, #124]	; (8000524 <uart1_rx_interrupt_init+0x114>)
 80004a6:	400a      	ands	r2, r1
 80004a8:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<31);
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004ac:	6a1a      	ldr	r2, [r3, #32]
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	0852      	lsrs	r2, r2, #1
 80004b4:	621a      	str	r2, [r3, #32]
	//enable clock to uart1//
	RCC->APB2ENR |= UART1EN;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	01c9      	lsls	r1, r1, #7
 80004c0:	430a      	orrs	r2, r1
 80004c2:	619a      	str	r2, [r3, #24]
	//baud rate//
	set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 80004c4:	2396      	movs	r3, #150	; 0x96
 80004c6:	019b      	lsls	r3, r3, #6
 80004c8:	4917      	ldr	r1, [pc, #92]	; (8000528 <uart1_rx_interrupt_init+0x118>)
 80004ca:	4818      	ldr	r0, [pc, #96]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004cc:	001a      	movs	r2, r3
 80004ce:	f000 f82f 	bl	8000530 <set_baudrate>
	//USART1->BRR = 80000/96;
	//program stop bits//
	//USART1->CR2 = 0x00;
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|CR1_RE|UART_EN);
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004d4:	220d      	movs	r2, #13
 80004d6:	601a      	str	r2, [r3, #0]
	//enable uart RX interrupt//
	USART1->CR1 |= CR1_RXNEIE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004de:	2120      	movs	r1, #32
 80004e0:	430a      	orrs	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
	//enable nvic
	NVIC_EnableIRQ(USART1_IRQn);
 80004e4:	201b      	movs	r0, #27
 80004e6:	f7ff ff6b 	bl	80003c0 <__NVIC_EnableIRQ>
	//enable uart
	USART1->CR1 |= CR1_UE;
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	ffffefff 	.word	0xffffefff
 8000508:	ffffbfff 	.word	0xffffbfff
 800050c:	feffffff 	.word	0xfeffffff
 8000510:	fdffffff 	.word	0xfdffffff
 8000514:	fbffffff 	.word	0xfbffffff
 8000518:	f7ffffff 	.word	0xf7ffffff
 800051c:	efffffff 	.word	0xefffffff
 8000520:	dfffffff 	.word	0xdfffffff
 8000524:	bfffffff 	.word	0xbfffffff
 8000528:	007a1200 	.word	0x007a1200
 800052c:	40013800 	.word	0x40013800

08000530 <set_baudrate>:
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|CR1_RE|UART_EN);
	//enable uart module//
}
void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f808 	bl	8000558 <compute_uart_div>
 8000548:	0003      	movs	r3, r0
 800054a:	001a      	movs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	60da      	str	r2, [r3, #12]
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bd80      	pop	{r7, pc}

08000558 <compute_uart_div>:

uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	085a      	lsrs	r2, r3, #1
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fdcb 	bl	8000108 <__udivsi3>
 8000572:	0003      	movs	r3, r0
 8000574:	b29b      	uxth	r3, r3
}
 8000576:	0018      	movs	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <uart1_write>:

void uart1_write(uint8_t ch)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	0002      	movs	r2, r0
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	701a      	strb	r2, [r3, #0]

	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <uart1_write+0x2c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	4013      	ands	r3, r2
 8000596:	d0fa      	beq.n	800058e <uart1_write+0xe>
	USART1->TDR = (ch&0xff);
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <uart1_write+0x2c>)
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	8513      	strh	r3, [r2, #40]	; 0x28


}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40013800 	.word	0x40013800

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	e000      	b.n	80005b8 <Reset_Handler+0x8>
 80005b6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 fa83 	bl	8000ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe1d 	bl	8000220 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f4:	08001020 	.word	0x08001020
  ldr r2, =_sbss
 80005f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005fc:	200001cc 	.word	0x200001cc

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <std>:
 8000604:	2300      	movs	r3, #0
 8000606:	b510      	push	{r4, lr}
 8000608:	0004      	movs	r4, r0
 800060a:	6003      	str	r3, [r0, #0]
 800060c:	6043      	str	r3, [r0, #4]
 800060e:	6083      	str	r3, [r0, #8]
 8000610:	8181      	strh	r1, [r0, #12]
 8000612:	6643      	str	r3, [r0, #100]	; 0x64
 8000614:	81c2      	strh	r2, [r0, #14]
 8000616:	6103      	str	r3, [r0, #16]
 8000618:	6143      	str	r3, [r0, #20]
 800061a:	6183      	str	r3, [r0, #24]
 800061c:	0019      	movs	r1, r3
 800061e:	2208      	movs	r2, #8
 8000620:	305c      	adds	r0, #92	; 0x5c
 8000622:	f000 fa05 	bl	8000a30 <memset>
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <std+0x50>)
 8000628:	6224      	str	r4, [r4, #32]
 800062a:	6263      	str	r3, [r4, #36]	; 0x24
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <std+0x54>)
 800062e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <std+0x58>)
 8000632:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <std+0x5c>)
 8000636:	6323      	str	r3, [r4, #48]	; 0x30
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <std+0x60>)
 800063a:	429c      	cmp	r4, r3
 800063c:	d005      	beq.n	800064a <std+0x46>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <std+0x64>)
 8000640:	429c      	cmp	r4, r3
 8000642:	d002      	beq.n	800064a <std+0x46>
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <std+0x68>)
 8000646:	429c      	cmp	r4, r3
 8000648:	d103      	bne.n	8000652 <std+0x4e>
 800064a:	0020      	movs	r0, r4
 800064c:	3058      	adds	r0, #88	; 0x58
 800064e:	f000 fa6f 	bl	8000b30 <__retarget_lock_init_recursive>
 8000652:	bd10      	pop	{r4, pc}
 8000654:	0800084d 	.word	0x0800084d
 8000658:	08000875 	.word	0x08000875
 800065c:	080008ad 	.word	0x080008ad
 8000660:	080008d9 	.word	0x080008d9
 8000664:	20000080 	.word	0x20000080
 8000668:	200000e8 	.word	0x200000e8
 800066c:	20000150 	.word	0x20000150

08000670 <stdio_exit_handler>:
 8000670:	b510      	push	{r4, lr}
 8000672:	4a03      	ldr	r2, [pc, #12]	; (8000680 <stdio_exit_handler+0x10>)
 8000674:	4903      	ldr	r1, [pc, #12]	; (8000684 <stdio_exit_handler+0x14>)
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <stdio_exit_handler+0x18>)
 8000678:	f000 f86c 	bl	8000754 <_fwalk_sglue>
 800067c:	bd10      	pop	{r4, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000000 	.word	0x20000000
 8000684:	08000e49 	.word	0x08000e49
 8000688:	2000000c 	.word	0x2000000c

0800068c <cleanup_stdio>:
 800068c:	6841      	ldr	r1, [r0, #4]
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <cleanup_stdio+0x30>)
 8000690:	b510      	push	{r4, lr}
 8000692:	0004      	movs	r4, r0
 8000694:	4299      	cmp	r1, r3
 8000696:	d001      	beq.n	800069c <cleanup_stdio+0x10>
 8000698:	f000 fbd6 	bl	8000e48 <_fflush_r>
 800069c:	68a1      	ldr	r1, [r4, #8]
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <cleanup_stdio+0x34>)
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d002      	beq.n	80006aa <cleanup_stdio+0x1e>
 80006a4:	0020      	movs	r0, r4
 80006a6:	f000 fbcf 	bl	8000e48 <_fflush_r>
 80006aa:	68e1      	ldr	r1, [r4, #12]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <cleanup_stdio+0x38>)
 80006ae:	4299      	cmp	r1, r3
 80006b0:	d002      	beq.n	80006b8 <cleanup_stdio+0x2c>
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 fbc8 	bl	8000e48 <_fflush_r>
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000080 	.word	0x20000080
 80006c0:	200000e8 	.word	0x200000e8
 80006c4:	20000150 	.word	0x20000150

080006c8 <global_stdio_init.part.0>:
 80006c8:	b510      	push	{r4, lr}
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <global_stdio_init.part.0+0x28>)
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <global_stdio_init.part.0+0x2c>)
 80006ce:	2104      	movs	r1, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <global_stdio_init.part.0+0x30>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f7ff ff95 	bl	8000604 <std>
 80006da:	2201      	movs	r2, #1
 80006dc:	2109      	movs	r1, #9
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <global_stdio_init.part.0+0x34>)
 80006e0:	f7ff ff90 	bl	8000604 <std>
 80006e4:	2202      	movs	r2, #2
 80006e6:	2112      	movs	r1, #18
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <global_stdio_init.part.0+0x38>)
 80006ea:	f7ff ff8b 	bl	8000604 <std>
 80006ee:	bd10      	pop	{r4, pc}
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	08000671 	.word	0x08000671
 80006f8:	20000080 	.word	0x20000080
 80006fc:	200000e8 	.word	0x200000e8
 8000700:	20000150 	.word	0x20000150

08000704 <__sfp_lock_acquire>:
 8000704:	b510      	push	{r4, lr}
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <__sfp_lock_acquire+0xc>)
 8000708:	f000 fa13 	bl	8000b32 <__retarget_lock_acquire_recursive>
 800070c:	bd10      	pop	{r4, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	200001c1 	.word	0x200001c1

08000714 <__sfp_lock_release>:
 8000714:	b510      	push	{r4, lr}
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <__sfp_lock_release+0xc>)
 8000718:	f000 fa0c 	bl	8000b34 <__retarget_lock_release_recursive>
 800071c:	bd10      	pop	{r4, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	200001c1 	.word	0x200001c1

08000724 <__sinit>:
 8000724:	b510      	push	{r4, lr}
 8000726:	0004      	movs	r4, r0
 8000728:	f7ff ffec 	bl	8000704 <__sfp_lock_acquire>
 800072c:	6a23      	ldr	r3, [r4, #32]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <__sinit+0x14>
 8000732:	f7ff ffef 	bl	8000714 <__sfp_lock_release>
 8000736:	bd10      	pop	{r4, pc}
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__sinit+0x28>)
 800073a:	6223      	str	r3, [r4, #32]
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__sinit+0x2c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f6      	bne.n	8000732 <__sinit+0xe>
 8000744:	f7ff ffc0 	bl	80006c8 <global_stdio_init.part.0>
 8000748:	e7f3      	b.n	8000732 <__sinit+0xe>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	0800068d 	.word	0x0800068d
 8000750:	200001b8 	.word	0x200001b8

08000754 <_fwalk_sglue>:
 8000754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000756:	0014      	movs	r4, r2
 8000758:	2600      	movs	r6, #0
 800075a:	9000      	str	r0, [sp, #0]
 800075c:	9101      	str	r1, [sp, #4]
 800075e:	68a5      	ldr	r5, [r4, #8]
 8000760:	6867      	ldr	r7, [r4, #4]
 8000762:	3f01      	subs	r7, #1
 8000764:	d504      	bpl.n	8000770 <_fwalk_sglue+0x1c>
 8000766:	6824      	ldr	r4, [r4, #0]
 8000768:	2c00      	cmp	r4, #0
 800076a:	d1f8      	bne.n	800075e <_fwalk_sglue+0xa>
 800076c:	0030      	movs	r0, r6
 800076e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000770:	89ab      	ldrh	r3, [r5, #12]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d908      	bls.n	8000788 <_fwalk_sglue+0x34>
 8000776:	220e      	movs	r2, #14
 8000778:	5eab      	ldrsh	r3, [r5, r2]
 800077a:	3301      	adds	r3, #1
 800077c:	d004      	beq.n	8000788 <_fwalk_sglue+0x34>
 800077e:	0029      	movs	r1, r5
 8000780:	9800      	ldr	r0, [sp, #0]
 8000782:	9b01      	ldr	r3, [sp, #4]
 8000784:	4798      	blx	r3
 8000786:	4306      	orrs	r6, r0
 8000788:	3568      	adds	r5, #104	; 0x68
 800078a:	e7ea      	b.n	8000762 <_fwalk_sglue+0xe>

0800078c <_puts_r>:
 800078c:	6a03      	ldr	r3, [r0, #32]
 800078e:	b570      	push	{r4, r5, r6, lr}
 8000790:	0005      	movs	r5, r0
 8000792:	000e      	movs	r6, r1
 8000794:	6884      	ldr	r4, [r0, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <_puts_r+0x12>
 800079a:	f7ff ffc3 	bl	8000724 <__sinit>
 800079e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007a0:	07db      	lsls	r3, r3, #31
 80007a2:	d405      	bmi.n	80007b0 <_puts_r+0x24>
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	059b      	lsls	r3, r3, #22
 80007a8:	d402      	bmi.n	80007b0 <_puts_r+0x24>
 80007aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007ac:	f000 f9c1 	bl	8000b32 <__retarget_lock_acquire_recursive>
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	071b      	lsls	r3, r3, #28
 80007b4:	d502      	bpl.n	80007bc <_puts_r+0x30>
 80007b6:	6923      	ldr	r3, [r4, #16]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d11f      	bne.n	80007fc <_puts_r+0x70>
 80007bc:	0021      	movs	r1, r4
 80007be:	0028      	movs	r0, r5
 80007c0:	f000 f8d2 	bl	8000968 <__swsetup_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d019      	beq.n	80007fc <_puts_r+0x70>
 80007c8:	2501      	movs	r5, #1
 80007ca:	426d      	negs	r5, r5
 80007cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d405      	bmi.n	80007de <_puts_r+0x52>
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	059b      	lsls	r3, r3, #22
 80007d6:	d402      	bmi.n	80007de <_puts_r+0x52>
 80007d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007da:	f000 f9ab 	bl	8000b34 <__retarget_lock_release_recursive>
 80007de:	0028      	movs	r0, r5
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	3601      	adds	r6, #1
 80007e4:	60a3      	str	r3, [r4, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da04      	bge.n	80007f4 <_puts_r+0x68>
 80007ea:	69a2      	ldr	r2, [r4, #24]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dc16      	bgt.n	800081e <_puts_r+0x92>
 80007f0:	290a      	cmp	r1, #10
 80007f2:	d014      	beq.n	800081e <_puts_r+0x92>
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	6022      	str	r2, [r4, #0]
 80007fa:	7019      	strb	r1, [r3, #0]
 80007fc:	68a3      	ldr	r3, [r4, #8]
 80007fe:	7831      	ldrb	r1, [r6, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	2900      	cmp	r1, #0
 8000804:	d1ed      	bne.n	80007e2 <_puts_r+0x56>
 8000806:	60a3      	str	r3, [r4, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	da0f      	bge.n	800082c <_puts_r+0xa0>
 800080c:	0028      	movs	r0, r5
 800080e:	0022      	movs	r2, r4
 8000810:	310a      	adds	r1, #10
 8000812:	f000 f867 	bl	80008e4 <__swbuf_r>
 8000816:	250a      	movs	r5, #10
 8000818:	3001      	adds	r0, #1
 800081a:	d1d7      	bne.n	80007cc <_puts_r+0x40>
 800081c:	e7d4      	b.n	80007c8 <_puts_r+0x3c>
 800081e:	0022      	movs	r2, r4
 8000820:	0028      	movs	r0, r5
 8000822:	f000 f85f 	bl	80008e4 <__swbuf_r>
 8000826:	3001      	adds	r0, #1
 8000828:	d1e8      	bne.n	80007fc <_puts_r+0x70>
 800082a:	e7cd      	b.n	80007c8 <_puts_r+0x3c>
 800082c:	250a      	movs	r5, #10
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	6022      	str	r2, [r4, #0]
 8000834:	701d      	strb	r5, [r3, #0]
 8000836:	e7c9      	b.n	80007cc <_puts_r+0x40>

08000838 <puts>:
 8000838:	b510      	push	{r4, lr}
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <puts+0x10>)
 800083c:	0001      	movs	r1, r0
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	f7ff ffa4 	bl	800078c <_puts_r>
 8000844:	bd10      	pop	{r4, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000058 	.word	0x20000058

0800084c <__sread>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	000c      	movs	r4, r1
 8000850:	250e      	movs	r5, #14
 8000852:	5f49      	ldrsh	r1, [r1, r5]
 8000854:	f000 f91a 	bl	8000a8c <_read_r>
 8000858:	2800      	cmp	r0, #0
 800085a:	db03      	blt.n	8000864 <__sread+0x18>
 800085c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800085e:	181b      	adds	r3, r3, r0
 8000860:	6563      	str	r3, [r4, #84]	; 0x54
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	4a02      	ldr	r2, [pc, #8]	; (8000870 <__sread+0x24>)
 8000868:	4013      	ands	r3, r2
 800086a:	81a3      	strh	r3, [r4, #12]
 800086c:	e7f9      	b.n	8000862 <__sread+0x16>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	ffffefff 	.word	0xffffefff

08000874 <__swrite>:
 8000874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000876:	001f      	movs	r7, r3
 8000878:	898b      	ldrh	r3, [r1, #12]
 800087a:	0005      	movs	r5, r0
 800087c:	000c      	movs	r4, r1
 800087e:	0016      	movs	r6, r2
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	d505      	bpl.n	8000890 <__swrite+0x1c>
 8000884:	230e      	movs	r3, #14
 8000886:	5ec9      	ldrsh	r1, [r1, r3]
 8000888:	2200      	movs	r2, #0
 800088a:	2302      	movs	r3, #2
 800088c:	f000 f8ea 	bl	8000a64 <_lseek_r>
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <__swrite+0x34>)
 8000894:	0028      	movs	r0, r5
 8000896:	4013      	ands	r3, r2
 8000898:	81a3      	strh	r3, [r4, #12]
 800089a:	0032      	movs	r2, r6
 800089c:	230e      	movs	r3, #14
 800089e:	5ee1      	ldrsh	r1, [r4, r3]
 80008a0:	003b      	movs	r3, r7
 80008a2:	f000 f907 	bl	8000ab4 <_write_r>
 80008a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a8:	ffffefff 	.word	0xffffefff

080008ac <__sseek>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	000c      	movs	r4, r1
 80008b0:	250e      	movs	r5, #14
 80008b2:	5f49      	ldrsh	r1, [r1, r5]
 80008b4:	f000 f8d6 	bl	8000a64 <_lseek_r>
 80008b8:	89a3      	ldrh	r3, [r4, #12]
 80008ba:	1c42      	adds	r2, r0, #1
 80008bc:	d103      	bne.n	80008c6 <__sseek+0x1a>
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <__sseek+0x28>)
 80008c0:	4013      	ands	r3, r2
 80008c2:	81a3      	strh	r3, [r4, #12]
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	0152      	lsls	r2, r2, #5
 80008ca:	4313      	orrs	r3, r2
 80008cc:	81a3      	strh	r3, [r4, #12]
 80008ce:	6560      	str	r0, [r4, #84]	; 0x54
 80008d0:	e7f8      	b.n	80008c4 <__sseek+0x18>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	ffffefff 	.word	0xffffefff

080008d8 <__sclose>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	230e      	movs	r3, #14
 80008dc:	5ec9      	ldrsh	r1, [r1, r3]
 80008de:	f000 f8af 	bl	8000a40 <_close_r>
 80008e2:	bd10      	pop	{r4, pc}

080008e4 <__swbuf_r>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	0006      	movs	r6, r0
 80008e8:	000d      	movs	r5, r1
 80008ea:	0014      	movs	r4, r2
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d004      	beq.n	80008fa <__swbuf_r+0x16>
 80008f0:	6a03      	ldr	r3, [r0, #32]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <__swbuf_r+0x16>
 80008f6:	f7ff ff15 	bl	8000724 <__sinit>
 80008fa:	69a3      	ldr	r3, [r4, #24]
 80008fc:	60a3      	str	r3, [r4, #8]
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	071b      	lsls	r3, r3, #28
 8000902:	d528      	bpl.n	8000956 <__swbuf_r+0x72>
 8000904:	6923      	ldr	r3, [r4, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d025      	beq.n	8000956 <__swbuf_r+0x72>
 800090a:	6923      	ldr	r3, [r4, #16]
 800090c:	6820      	ldr	r0, [r4, #0]
 800090e:	b2ef      	uxtb	r7, r5
 8000910:	1ac0      	subs	r0, r0, r3
 8000912:	6963      	ldr	r3, [r4, #20]
 8000914:	b2ed      	uxtb	r5, r5
 8000916:	4283      	cmp	r3, r0
 8000918:	dc05      	bgt.n	8000926 <__swbuf_r+0x42>
 800091a:	0021      	movs	r1, r4
 800091c:	0030      	movs	r0, r6
 800091e:	f000 fa93 	bl	8000e48 <_fflush_r>
 8000922:	2800      	cmp	r0, #0
 8000924:	d11d      	bne.n	8000962 <__swbuf_r+0x7e>
 8000926:	68a3      	ldr	r3, [r4, #8]
 8000928:	3001      	adds	r0, #1
 800092a:	3b01      	subs	r3, #1
 800092c:	60a3      	str	r3, [r4, #8]
 800092e:	6823      	ldr	r3, [r4, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	6022      	str	r2, [r4, #0]
 8000934:	701f      	strb	r7, [r3, #0]
 8000936:	6963      	ldr	r3, [r4, #20]
 8000938:	4283      	cmp	r3, r0
 800093a:	d004      	beq.n	8000946 <__swbuf_r+0x62>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	07db      	lsls	r3, r3, #31
 8000940:	d507      	bpl.n	8000952 <__swbuf_r+0x6e>
 8000942:	2d0a      	cmp	r5, #10
 8000944:	d105      	bne.n	8000952 <__swbuf_r+0x6e>
 8000946:	0021      	movs	r1, r4
 8000948:	0030      	movs	r0, r6
 800094a:	f000 fa7d 	bl	8000e48 <_fflush_r>
 800094e:	2800      	cmp	r0, #0
 8000950:	d107      	bne.n	8000962 <__swbuf_r+0x7e>
 8000952:	0028      	movs	r0, r5
 8000954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000956:	0021      	movs	r1, r4
 8000958:	0030      	movs	r0, r6
 800095a:	f000 f805 	bl	8000968 <__swsetup_r>
 800095e:	2800      	cmp	r0, #0
 8000960:	d0d3      	beq.n	800090a <__swbuf_r+0x26>
 8000962:	2501      	movs	r5, #1
 8000964:	426d      	negs	r5, r5
 8000966:	e7f4      	b.n	8000952 <__swbuf_r+0x6e>

08000968 <__swsetup_r>:
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <__swsetup_r+0xc4>)
 800096a:	b570      	push	{r4, r5, r6, lr}
 800096c:	0005      	movs	r5, r0
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	000c      	movs	r4, r1
 8000972:	2800      	cmp	r0, #0
 8000974:	d004      	beq.n	8000980 <__swsetup_r+0x18>
 8000976:	6a03      	ldr	r3, [r0, #32]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <__swsetup_r+0x18>
 800097c:	f7ff fed2 	bl	8000724 <__sinit>
 8000980:	230c      	movs	r3, #12
 8000982:	5ee2      	ldrsh	r2, [r4, r3]
 8000984:	b293      	uxth	r3, r2
 8000986:	0711      	lsls	r1, r2, #28
 8000988:	d423      	bmi.n	80009d2 <__swsetup_r+0x6a>
 800098a:	06d9      	lsls	r1, r3, #27
 800098c:	d407      	bmi.n	800099e <__swsetup_r+0x36>
 800098e:	2309      	movs	r3, #9
 8000990:	2001      	movs	r0, #1
 8000992:	602b      	str	r3, [r5, #0]
 8000994:	3337      	adds	r3, #55	; 0x37
 8000996:	4313      	orrs	r3, r2
 8000998:	81a3      	strh	r3, [r4, #12]
 800099a:	4240      	negs	r0, r0
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	075b      	lsls	r3, r3, #29
 80009a0:	d513      	bpl.n	80009ca <__swsetup_r+0x62>
 80009a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d008      	beq.n	80009ba <__swsetup_r+0x52>
 80009a8:	0023      	movs	r3, r4
 80009aa:	3344      	adds	r3, #68	; 0x44
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d002      	beq.n	80009b6 <__swsetup_r+0x4e>
 80009b0:	0028      	movs	r0, r5
 80009b2:	f000 f8c1 	bl	8000b38 <_free_r>
 80009b6:	2300      	movs	r3, #0
 80009b8:	6363      	str	r3, [r4, #52]	; 0x34
 80009ba:	2224      	movs	r2, #36	; 0x24
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	4393      	bics	r3, r2
 80009c0:	81a3      	strh	r3, [r4, #12]
 80009c2:	2300      	movs	r3, #0
 80009c4:	6063      	str	r3, [r4, #4]
 80009c6:	6923      	ldr	r3, [r4, #16]
 80009c8:	6023      	str	r3, [r4, #0]
 80009ca:	2308      	movs	r3, #8
 80009cc:	89a2      	ldrh	r2, [r4, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	81a3      	strh	r3, [r4, #12]
 80009d2:	6923      	ldr	r3, [r4, #16]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10b      	bne.n	80009f0 <__swsetup_r+0x88>
 80009d8:	21a0      	movs	r1, #160	; 0xa0
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	89a3      	ldrh	r3, [r4, #12]
 80009de:	0089      	lsls	r1, r1, #2
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	400b      	ands	r3, r1
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d003      	beq.n	80009f0 <__swsetup_r+0x88>
 80009e8:	0021      	movs	r1, r4
 80009ea:	0028      	movs	r0, r5
 80009ec:	f000 fa80 	bl	8000ef0 <__smakebuf_r>
 80009f0:	220c      	movs	r2, #12
 80009f2:	5ea3      	ldrsh	r3, [r4, r2]
 80009f4:	2001      	movs	r0, #1
 80009f6:	001a      	movs	r2, r3
 80009f8:	b299      	uxth	r1, r3
 80009fa:	4002      	ands	r2, r0
 80009fc:	4203      	tst	r3, r0
 80009fe:	d00f      	beq.n	8000a20 <__swsetup_r+0xb8>
 8000a00:	2200      	movs	r2, #0
 8000a02:	60a2      	str	r2, [r4, #8]
 8000a04:	6962      	ldr	r2, [r4, #20]
 8000a06:	4252      	negs	r2, r2
 8000a08:	61a2      	str	r2, [r4, #24]
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	6922      	ldr	r2, [r4, #16]
 8000a0e:	4282      	cmp	r2, r0
 8000a10:	d1c4      	bne.n	800099c <__swsetup_r+0x34>
 8000a12:	0609      	lsls	r1, r1, #24
 8000a14:	d5c2      	bpl.n	800099c <__swsetup_r+0x34>
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	81a3      	strh	r3, [r4, #12]
 8000a1c:	3801      	subs	r0, #1
 8000a1e:	e7bd      	b.n	800099c <__swsetup_r+0x34>
 8000a20:	0788      	lsls	r0, r1, #30
 8000a22:	d400      	bmi.n	8000a26 <__swsetup_r+0xbe>
 8000a24:	6962      	ldr	r2, [r4, #20]
 8000a26:	60a2      	str	r2, [r4, #8]
 8000a28:	e7ef      	b.n	8000a0a <__swsetup_r+0xa2>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000058 	.word	0x20000058

08000a30 <memset>:
 8000a30:	0003      	movs	r3, r0
 8000a32:	1882      	adds	r2, r0, r2
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d100      	bne.n	8000a3a <memset+0xa>
 8000a38:	4770      	bx	lr
 8000a3a:	7019      	strb	r1, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	e7f9      	b.n	8000a34 <memset+0x4>

08000a40 <_close_r>:
 8000a40:	2300      	movs	r3, #0
 8000a42:	b570      	push	{r4, r5, r6, lr}
 8000a44:	4d06      	ldr	r5, [pc, #24]	; (8000a60 <_close_r+0x20>)
 8000a46:	0004      	movs	r4, r0
 8000a48:	0008      	movs	r0, r1
 8000a4a:	602b      	str	r3, [r5, #0]
 8000a4c:	f7ff fc55 	bl	80002fa <_close>
 8000a50:	1c43      	adds	r3, r0, #1
 8000a52:	d103      	bne.n	8000a5c <_close_r+0x1c>
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d000      	beq.n	8000a5c <_close_r+0x1c>
 8000a5a:	6023      	str	r3, [r4, #0]
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	200001bc 	.word	0x200001bc

08000a64 <_lseek_r>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0004      	movs	r4, r0
 8000a68:	0008      	movs	r0, r1
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2300      	movs	r3, #0
 8000a70:	4d05      	ldr	r5, [pc, #20]	; (8000a88 <_lseek_r+0x24>)
 8000a72:	602b      	str	r3, [r5, #0]
 8000a74:	f7ff fc62 	bl	800033c <_lseek>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d103      	bne.n	8000a84 <_lseek_r+0x20>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <_lseek_r+0x20>
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	200001bc 	.word	0x200001bc

08000a8c <_read_r>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	0004      	movs	r4, r0
 8000a90:	0008      	movs	r0, r1
 8000a92:	0011      	movs	r1, r2
 8000a94:	001a      	movs	r2, r3
 8000a96:	2300      	movs	r3, #0
 8000a98:	4d05      	ldr	r5, [pc, #20]	; (8000ab0 <_read_r+0x24>)
 8000a9a:	602b      	str	r3, [r5, #0]
 8000a9c:	f7ff fbf4 	bl	8000288 <_read>
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	d103      	bne.n	8000aac <_read_r+0x20>
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d000      	beq.n	8000aac <_read_r+0x20>
 8000aaa:	6023      	str	r3, [r4, #0]
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	200001bc 	.word	0x200001bc

08000ab4 <_write_r>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	0008      	movs	r0, r1
 8000aba:	0011      	movs	r1, r2
 8000abc:	001a      	movs	r2, r3
 8000abe:	2300      	movs	r3, #0
 8000ac0:	4d05      	ldr	r5, [pc, #20]	; (8000ad8 <_write_r+0x24>)
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	f7ff fbfd 	bl	80002c2 <_write>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d103      	bne.n	8000ad4 <_write_r+0x20>
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d000      	beq.n	8000ad4 <_write_r+0x20>
 8000ad2:	6023      	str	r3, [r4, #0]
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	200001bc 	.word	0x200001bc

08000adc <__errno>:
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <__errno+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	4770      	bx	lr
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000058 	.word	0x20000058

08000ae8 <__libc_init_array>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	2600      	movs	r6, #0
 8000aec:	4c0c      	ldr	r4, [pc, #48]	; (8000b20 <__libc_init_array+0x38>)
 8000aee:	4d0d      	ldr	r5, [pc, #52]	; (8000b24 <__libc_init_array+0x3c>)
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	10a4      	asrs	r4, r4, #2
 8000af4:	42a6      	cmp	r6, r4
 8000af6:	d109      	bne.n	8000b0c <__libc_init_array+0x24>
 8000af8:	2600      	movs	r6, #0
 8000afa:	f000 fa6d 	bl	8000fd8 <_init>
 8000afe:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <__libc_init_array+0x40>)
 8000b00:	4d0a      	ldr	r5, [pc, #40]	; (8000b2c <__libc_init_array+0x44>)
 8000b02:	1b64      	subs	r4, r4, r5
 8000b04:	10a4      	asrs	r4, r4, #2
 8000b06:	42a6      	cmp	r6, r4
 8000b08:	d105      	bne.n	8000b16 <__libc_init_array+0x2e>
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	00b3      	lsls	r3, r6, #2
 8000b0e:	58eb      	ldr	r3, [r5, r3]
 8000b10:	4798      	blx	r3
 8000b12:	3601      	adds	r6, #1
 8000b14:	e7ee      	b.n	8000af4 <__libc_init_array+0xc>
 8000b16:	00b3      	lsls	r3, r6, #2
 8000b18:	58eb      	ldr	r3, [r5, r3]
 8000b1a:	4798      	blx	r3
 8000b1c:	3601      	adds	r6, #1
 8000b1e:	e7f2      	b.n	8000b06 <__libc_init_array+0x1e>
 8000b20:	08001018 	.word	0x08001018
 8000b24:	08001018 	.word	0x08001018
 8000b28:	0800101c 	.word	0x0800101c
 8000b2c:	08001018 	.word	0x08001018

08000b30 <__retarget_lock_init_recursive>:
 8000b30:	4770      	bx	lr

08000b32 <__retarget_lock_acquire_recursive>:
 8000b32:	4770      	bx	lr

08000b34 <__retarget_lock_release_recursive>:
 8000b34:	4770      	bx	lr
	...

08000b38 <_free_r>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	0005      	movs	r5, r0
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d010      	beq.n	8000b62 <_free_r+0x2a>
 8000b40:	1f0c      	subs	r4, r1, #4
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da00      	bge.n	8000b4a <_free_r+0x12>
 8000b48:	18e4      	adds	r4, r4, r3
 8000b4a:	0028      	movs	r0, r5
 8000b4c:	f000 f8e2 	bl	8000d14 <__malloc_lock>
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <_free_r+0x90>)
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <_free_r+0x2c>
 8000b58:	6063      	str	r3, [r4, #4]
 8000b5a:	6014      	str	r4, [r2, #0]
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	f000 f8e1 	bl	8000d24 <__malloc_unlock>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	42a3      	cmp	r3, r4
 8000b66:	d908      	bls.n	8000b7a <_free_r+0x42>
 8000b68:	6820      	ldr	r0, [r4, #0]
 8000b6a:	1821      	adds	r1, r4, r0
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d1f3      	bne.n	8000b58 <_free_r+0x20>
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	1809      	adds	r1, r1, r0
 8000b76:	6021      	str	r1, [r4, #0]
 8000b78:	e7ee      	b.n	8000b58 <_free_r+0x20>
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_free_r+0x4e>
 8000b82:	42a3      	cmp	r3, r4
 8000b84:	d9f9      	bls.n	8000b7a <_free_r+0x42>
 8000b86:	6811      	ldr	r1, [r2, #0]
 8000b88:	1850      	adds	r0, r2, r1
 8000b8a:	42a0      	cmp	r0, r4
 8000b8c:	d10b      	bne.n	8000ba6 <_free_r+0x6e>
 8000b8e:	6820      	ldr	r0, [r4, #0]
 8000b90:	1809      	adds	r1, r1, r0
 8000b92:	1850      	adds	r0, r2, r1
 8000b94:	6011      	str	r1, [r2, #0]
 8000b96:	4283      	cmp	r3, r0
 8000b98:	d1e0      	bne.n	8000b5c <_free_r+0x24>
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	1841      	adds	r1, r0, r1
 8000ba0:	6011      	str	r1, [r2, #0]
 8000ba2:	6053      	str	r3, [r2, #4]
 8000ba4:	e7da      	b.n	8000b5c <_free_r+0x24>
 8000ba6:	42a0      	cmp	r0, r4
 8000ba8:	d902      	bls.n	8000bb0 <_free_r+0x78>
 8000baa:	230c      	movs	r3, #12
 8000bac:	602b      	str	r3, [r5, #0]
 8000bae:	e7d5      	b.n	8000b5c <_free_r+0x24>
 8000bb0:	6820      	ldr	r0, [r4, #0]
 8000bb2:	1821      	adds	r1, r4, r0
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d103      	bne.n	8000bc0 <_free_r+0x88>
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	1809      	adds	r1, r1, r0
 8000bbe:	6021      	str	r1, [r4, #0]
 8000bc0:	6063      	str	r3, [r4, #4]
 8000bc2:	6054      	str	r4, [r2, #4]
 8000bc4:	e7ca      	b.n	8000b5c <_free_r+0x24>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	200001c4 	.word	0x200001c4

08000bcc <sbrk_aligned>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	4e0f      	ldr	r6, [pc, #60]	; (8000c0c <sbrk_aligned+0x40>)
 8000bd0:	000d      	movs	r5, r1
 8000bd2:	6831      	ldr	r1, [r6, #0]
 8000bd4:	0004      	movs	r4, r0
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d102      	bne.n	8000be0 <sbrk_aligned+0x14>
 8000bda:	f000 f9eb 	bl	8000fb4 <_sbrk_r>
 8000bde:	6030      	str	r0, [r6, #0]
 8000be0:	0029      	movs	r1, r5
 8000be2:	0020      	movs	r0, r4
 8000be4:	f000 f9e6 	bl	8000fb4 <_sbrk_r>
 8000be8:	1c43      	adds	r3, r0, #1
 8000bea:	d00a      	beq.n	8000c02 <sbrk_aligned+0x36>
 8000bec:	2303      	movs	r3, #3
 8000bee:	1cc5      	adds	r5, r0, #3
 8000bf0:	439d      	bics	r5, r3
 8000bf2:	42a8      	cmp	r0, r5
 8000bf4:	d007      	beq.n	8000c06 <sbrk_aligned+0x3a>
 8000bf6:	1a29      	subs	r1, r5, r0
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	f000 f9db 	bl	8000fb4 <_sbrk_r>
 8000bfe:	3001      	adds	r0, #1
 8000c00:	d101      	bne.n	8000c06 <sbrk_aligned+0x3a>
 8000c02:	2501      	movs	r5, #1
 8000c04:	426d      	negs	r5, r5
 8000c06:	0028      	movs	r0, r5
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	200001c8 	.word	0x200001c8

08000c10 <_malloc_r>:
 8000c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c12:	2203      	movs	r2, #3
 8000c14:	1ccb      	adds	r3, r1, #3
 8000c16:	4393      	bics	r3, r2
 8000c18:	3308      	adds	r3, #8
 8000c1a:	0006      	movs	r6, r0
 8000c1c:	001f      	movs	r7, r3
 8000c1e:	2b0c      	cmp	r3, #12
 8000c20:	d238      	bcs.n	8000c94 <_malloc_r+0x84>
 8000c22:	270c      	movs	r7, #12
 8000c24:	42b9      	cmp	r1, r7
 8000c26:	d837      	bhi.n	8000c98 <_malloc_r+0x88>
 8000c28:	0030      	movs	r0, r6
 8000c2a:	f000 f873 	bl	8000d14 <__malloc_lock>
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <_malloc_r+0x100>)
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	001c      	movs	r4, r3
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d133      	bne.n	8000ca2 <_malloc_r+0x92>
 8000c3a:	0039      	movs	r1, r7
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f7ff ffc5 	bl	8000bcc <sbrk_aligned>
 8000c42:	0004      	movs	r4, r0
 8000c44:	1c43      	adds	r3, r0, #1
 8000c46:	d15e      	bne.n	8000d06 <_malloc_r+0xf6>
 8000c48:	9b00      	ldr	r3, [sp, #0]
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	0025      	movs	r5, r4
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d14e      	bne.n	8000cf0 <_malloc_r+0xe0>
 8000c52:	2c00      	cmp	r4, #0
 8000c54:	d051      	beq.n	8000cfa <_malloc_r+0xea>
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	0029      	movs	r1, r5
 8000c5a:	18e3      	adds	r3, r4, r3
 8000c5c:	0030      	movs	r0, r6
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f000 f9a8 	bl	8000fb4 <_sbrk_r>
 8000c64:	9b01      	ldr	r3, [sp, #4]
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d147      	bne.n	8000cfa <_malloc_r+0xea>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	0030      	movs	r0, r6
 8000c6e:	1aff      	subs	r7, r7, r3
 8000c70:	0039      	movs	r1, r7
 8000c72:	f7ff ffab 	bl	8000bcc <sbrk_aligned>
 8000c76:	3001      	adds	r0, #1
 8000c78:	d03f      	beq.n	8000cfa <_malloc_r+0xea>
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	19db      	adds	r3, r3, r7
 8000c7e:	6023      	str	r3, [r4, #0]
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d040      	beq.n	8000d0a <_malloc_r+0xfa>
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	42a2      	cmp	r2, r4
 8000c8c:	d133      	bne.n	8000cf6 <_malloc_r+0xe6>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	e014      	b.n	8000cbe <_malloc_r+0xae>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dac5      	bge.n	8000c24 <_malloc_r+0x14>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	6033      	str	r3, [r6, #0]
 8000c9e:	0028      	movs	r0, r5
 8000ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ca2:	6821      	ldr	r1, [r4, #0]
 8000ca4:	1bc9      	subs	r1, r1, r7
 8000ca6:	d420      	bmi.n	8000cea <_malloc_r+0xda>
 8000ca8:	290b      	cmp	r1, #11
 8000caa:	d918      	bls.n	8000cde <_malloc_r+0xce>
 8000cac:	19e2      	adds	r2, r4, r7
 8000cae:	6027      	str	r7, [r4, #0]
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d112      	bne.n	8000cda <_malloc_r+0xca>
 8000cb4:	9b00      	ldr	r3, [sp, #0]
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	6011      	str	r1, [r2, #0]
 8000cbc:	6053      	str	r3, [r2, #4]
 8000cbe:	0030      	movs	r0, r6
 8000cc0:	0025      	movs	r5, r4
 8000cc2:	f000 f82f 	bl	8000d24 <__malloc_unlock>
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	350b      	adds	r5, #11
 8000cca:	1d23      	adds	r3, r4, #4
 8000ccc:	4395      	bics	r5, r2
 8000cce:	1aea      	subs	r2, r5, r3
 8000cd0:	429d      	cmp	r5, r3
 8000cd2:	d0e4      	beq.n	8000c9e <_malloc_r+0x8e>
 8000cd4:	1b5b      	subs	r3, r3, r5
 8000cd6:	50a3      	str	r3, [r4, r2]
 8000cd8:	e7e1      	b.n	8000c9e <_malloc_r+0x8e>
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	e7ec      	b.n	8000cb8 <_malloc_r+0xa8>
 8000cde:	6862      	ldr	r2, [r4, #4]
 8000ce0:	42a3      	cmp	r3, r4
 8000ce2:	d1d5      	bne.n	8000c90 <_malloc_r+0x80>
 8000ce4:	9b00      	ldr	r3, [sp, #0]
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e7e9      	b.n	8000cbe <_malloc_r+0xae>
 8000cea:	0023      	movs	r3, r4
 8000cec:	6864      	ldr	r4, [r4, #4]
 8000cee:	e7a2      	b.n	8000c36 <_malloc_r+0x26>
 8000cf0:	002c      	movs	r4, r5
 8000cf2:	686d      	ldr	r5, [r5, #4]
 8000cf4:	e7ab      	b.n	8000c4e <_malloc_r+0x3e>
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	e7c4      	b.n	8000c84 <_malloc_r+0x74>
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	6033      	str	r3, [r6, #0]
 8000d00:	f000 f810 	bl	8000d24 <__malloc_unlock>
 8000d04:	e7cb      	b.n	8000c9e <_malloc_r+0x8e>
 8000d06:	6027      	str	r7, [r4, #0]
 8000d08:	e7d9      	b.n	8000cbe <_malloc_r+0xae>
 8000d0a:	605b      	str	r3, [r3, #4]
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200001c4 	.word	0x200001c4

08000d14 <__malloc_lock>:
 8000d14:	b510      	push	{r4, lr}
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <__malloc_lock+0xc>)
 8000d18:	f7ff ff0b 	bl	8000b32 <__retarget_lock_acquire_recursive>
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	200001c0 	.word	0x200001c0

08000d24 <__malloc_unlock>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <__malloc_unlock+0xc>)
 8000d28:	f7ff ff04 	bl	8000b34 <__retarget_lock_release_recursive>
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	200001c0 	.word	0x200001c0

08000d34 <__sflush_r>:
 8000d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d36:	898b      	ldrh	r3, [r1, #12]
 8000d38:	0005      	movs	r5, r0
 8000d3a:	000c      	movs	r4, r1
 8000d3c:	071a      	lsls	r2, r3, #28
 8000d3e:	d45c      	bmi.n	8000dfa <__sflush_r+0xc6>
 8000d40:	684a      	ldr	r2, [r1, #4]
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	dc04      	bgt.n	8000d50 <__sflush_r+0x1c>
 8000d46:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	dc01      	bgt.n	8000d50 <__sflush_r+0x1c>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000d50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d52:	2f00      	cmp	r7, #0
 8000d54:	d0fa      	beq.n	8000d4c <__sflush_r+0x18>
 8000d56:	2200      	movs	r2, #0
 8000d58:	2080      	movs	r0, #128	; 0x80
 8000d5a:	682e      	ldr	r6, [r5, #0]
 8000d5c:	602a      	str	r2, [r5, #0]
 8000d5e:	001a      	movs	r2, r3
 8000d60:	0140      	lsls	r0, r0, #5
 8000d62:	6a21      	ldr	r1, [r4, #32]
 8000d64:	4002      	ands	r2, r0
 8000d66:	4203      	tst	r3, r0
 8000d68:	d034      	beq.n	8000dd4 <__sflush_r+0xa0>
 8000d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d6c:	89a3      	ldrh	r3, [r4, #12]
 8000d6e:	075b      	lsls	r3, r3, #29
 8000d70:	d506      	bpl.n	8000d80 <__sflush_r+0x4c>
 8000d72:	6863      	ldr	r3, [r4, #4]
 8000d74:	1ac0      	subs	r0, r0, r3
 8000d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <__sflush_r+0x4c>
 8000d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d7e:	1ac0      	subs	r0, r0, r3
 8000d80:	0002      	movs	r2, r0
 8000d82:	2300      	movs	r3, #0
 8000d84:	0028      	movs	r0, r5
 8000d86:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d88:	6a21      	ldr	r1, [r4, #32]
 8000d8a:	47b8      	blx	r7
 8000d8c:	89a2      	ldrh	r2, [r4, #12]
 8000d8e:	1c43      	adds	r3, r0, #1
 8000d90:	d106      	bne.n	8000da0 <__sflush_r+0x6c>
 8000d92:	6829      	ldr	r1, [r5, #0]
 8000d94:	291d      	cmp	r1, #29
 8000d96:	d82c      	bhi.n	8000df2 <__sflush_r+0xbe>
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <__sflush_r+0x110>)
 8000d9a:	410b      	asrs	r3, r1
 8000d9c:	07db      	lsls	r3, r3, #31
 8000d9e:	d428      	bmi.n	8000df2 <__sflush_r+0xbe>
 8000da0:	2300      	movs	r3, #0
 8000da2:	6063      	str	r3, [r4, #4]
 8000da4:	6923      	ldr	r3, [r4, #16]
 8000da6:	6023      	str	r3, [r4, #0]
 8000da8:	04d2      	lsls	r2, r2, #19
 8000daa:	d505      	bpl.n	8000db8 <__sflush_r+0x84>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <__sflush_r+0x82>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <__sflush_r+0x84>
 8000db6:	6560      	str	r0, [r4, #84]	; 0x54
 8000db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dba:	602e      	str	r6, [r5, #0]
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d0c5      	beq.n	8000d4c <__sflush_r+0x18>
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	3344      	adds	r3, #68	; 0x44
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d002      	beq.n	8000dce <__sflush_r+0x9a>
 8000dc8:	0028      	movs	r0, r5
 8000dca:	f7ff feb5 	bl	8000b38 <_free_r>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8000dd2:	e7bc      	b.n	8000d4e <__sflush_r+0x1a>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	0028      	movs	r0, r5
 8000dd8:	47b8      	blx	r7
 8000dda:	1c43      	adds	r3, r0, #1
 8000ddc:	d1c6      	bne.n	8000d6c <__sflush_r+0x38>
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0c3      	beq.n	8000d6c <__sflush_r+0x38>
 8000de4:	2b1d      	cmp	r3, #29
 8000de6:	d001      	beq.n	8000dec <__sflush_r+0xb8>
 8000de8:	2b16      	cmp	r3, #22
 8000dea:	d101      	bne.n	8000df0 <__sflush_r+0xbc>
 8000dec:	602e      	str	r6, [r5, #0]
 8000dee:	e7ad      	b.n	8000d4c <__sflush_r+0x18>
 8000df0:	89a2      	ldrh	r2, [r4, #12]
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	4313      	orrs	r3, r2
 8000df6:	81a3      	strh	r3, [r4, #12]
 8000df8:	e7a9      	b.n	8000d4e <__sflush_r+0x1a>
 8000dfa:	690e      	ldr	r6, [r1, #16]
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0a5      	beq.n	8000d4c <__sflush_r+0x18>
 8000e00:	680f      	ldr	r7, [r1, #0]
 8000e02:	600e      	str	r6, [r1, #0]
 8000e04:	1bba      	subs	r2, r7, r6
 8000e06:	9201      	str	r2, [sp, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	079b      	lsls	r3, r3, #30
 8000e0c:	d100      	bne.n	8000e10 <__sflush_r+0xdc>
 8000e0e:	694a      	ldr	r2, [r1, #20]
 8000e10:	60a2      	str	r2, [r4, #8]
 8000e12:	9b01      	ldr	r3, [sp, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	dd99      	ble.n	8000d4c <__sflush_r+0x18>
 8000e18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e1a:	0032      	movs	r2, r6
 8000e1c:	001f      	movs	r7, r3
 8000e1e:	0028      	movs	r0, r5
 8000e20:	9b01      	ldr	r3, [sp, #4]
 8000e22:	6a21      	ldr	r1, [r4, #32]
 8000e24:	47b8      	blx	r7
 8000e26:	2800      	cmp	r0, #0
 8000e28:	dc06      	bgt.n	8000e38 <__sflush_r+0x104>
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	89a2      	ldrh	r2, [r4, #12]
 8000e30:	4240      	negs	r0, r0
 8000e32:	4313      	orrs	r3, r2
 8000e34:	81a3      	strh	r3, [r4, #12]
 8000e36:	e78a      	b.n	8000d4e <__sflush_r+0x1a>
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	1836      	adds	r6, r6, r0
 8000e3c:	1a1b      	subs	r3, r3, r0
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	e7e7      	b.n	8000e12 <__sflush_r+0xde>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	dfbffffe 	.word	0xdfbffffe

08000e48 <_fflush_r>:
 8000e48:	690b      	ldr	r3, [r1, #16]
 8000e4a:	b570      	push	{r4, r5, r6, lr}
 8000e4c:	0005      	movs	r5, r0
 8000e4e:	000c      	movs	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_fflush_r+0x12>
 8000e54:	2500      	movs	r5, #0
 8000e56:	0028      	movs	r0, r5
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d004      	beq.n	8000e68 <_fflush_r+0x20>
 8000e5e:	6a03      	ldr	r3, [r0, #32]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <_fflush_r+0x20>
 8000e64:	f7ff fc5e 	bl	8000724 <__sinit>
 8000e68:	220c      	movs	r2, #12
 8000e6a:	5ea3      	ldrsh	r3, [r4, r2]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f1      	beq.n	8000e54 <_fflush_r+0xc>
 8000e70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e72:	07d2      	lsls	r2, r2, #31
 8000e74:	d404      	bmi.n	8000e80 <_fflush_r+0x38>
 8000e76:	059b      	lsls	r3, r3, #22
 8000e78:	d402      	bmi.n	8000e80 <_fflush_r+0x38>
 8000e7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e7c:	f7ff fe59 	bl	8000b32 <__retarget_lock_acquire_recursive>
 8000e80:	0028      	movs	r0, r5
 8000e82:	0021      	movs	r1, r4
 8000e84:	f7ff ff56 	bl	8000d34 <__sflush_r>
 8000e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e8a:	0005      	movs	r5, r0
 8000e8c:	07db      	lsls	r3, r3, #31
 8000e8e:	d4e2      	bmi.n	8000e56 <_fflush_r+0xe>
 8000e90:	89a3      	ldrh	r3, [r4, #12]
 8000e92:	059b      	lsls	r3, r3, #22
 8000e94:	d4df      	bmi.n	8000e56 <_fflush_r+0xe>
 8000e96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e98:	f7ff fe4c 	bl	8000b34 <__retarget_lock_release_recursive>
 8000e9c:	e7db      	b.n	8000e56 <_fflush_r+0xe>
	...

08000ea0 <__swhatbuf_r>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	000e      	movs	r6, r1
 8000ea4:	001d      	movs	r5, r3
 8000ea6:	230e      	movs	r3, #14
 8000ea8:	5ec9      	ldrsh	r1, [r1, r3]
 8000eaa:	0014      	movs	r4, r2
 8000eac:	b096      	sub	sp, #88	; 0x58
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	da0c      	bge.n	8000ecc <__swhatbuf_r+0x2c>
 8000eb2:	89b2      	ldrh	r2, [r6, #12]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	4019      	ands	r1, r3
 8000eba:	421a      	tst	r2, r3
 8000ebc:	d013      	beq.n	8000ee6 <__swhatbuf_r+0x46>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	3b40      	subs	r3, #64	; 0x40
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	6029      	str	r1, [r5, #0]
 8000ec6:	6023      	str	r3, [r4, #0]
 8000ec8:	b016      	add	sp, #88	; 0x58
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	466a      	mov	r2, sp
 8000ece:	f000 f84d 	bl	8000f6c <_fstat_r>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	dbed      	blt.n	8000eb2 <__swhatbuf_r+0x12>
 8000ed6:	23f0      	movs	r3, #240	; 0xf0
 8000ed8:	9901      	ldr	r1, [sp, #4]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	4019      	ands	r1, r3
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <__swhatbuf_r+0x4c>)
 8000ee0:	18c9      	adds	r1, r1, r3
 8000ee2:	424b      	negs	r3, r1
 8000ee4:	4159      	adcs	r1, r3
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	e7ea      	b.n	8000ec2 <__swhatbuf_r+0x22>
 8000eec:	ffffe000 	.word	0xffffe000

08000ef0 <__smakebuf_r>:
 8000ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ef2:	2602      	movs	r6, #2
 8000ef4:	898b      	ldrh	r3, [r1, #12]
 8000ef6:	0005      	movs	r5, r0
 8000ef8:	000c      	movs	r4, r1
 8000efa:	4233      	tst	r3, r6
 8000efc:	d006      	beq.n	8000f0c <__smakebuf_r+0x1c>
 8000efe:	0023      	movs	r3, r4
 8000f00:	3347      	adds	r3, #71	; 0x47
 8000f02:	6023      	str	r3, [r4, #0]
 8000f04:	6123      	str	r3, [r4, #16]
 8000f06:	2301      	movs	r3, #1
 8000f08:	6163      	str	r3, [r4, #20]
 8000f0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000f0c:	466a      	mov	r2, sp
 8000f0e:	ab01      	add	r3, sp, #4
 8000f10:	f7ff ffc6 	bl	8000ea0 <__swhatbuf_r>
 8000f14:	9900      	ldr	r1, [sp, #0]
 8000f16:	0007      	movs	r7, r0
 8000f18:	0028      	movs	r0, r5
 8000f1a:	f7ff fe79 	bl	8000c10 <_malloc_r>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d108      	bne.n	8000f34 <__smakebuf_r+0x44>
 8000f22:	220c      	movs	r2, #12
 8000f24:	5ea3      	ldrsh	r3, [r4, r2]
 8000f26:	059a      	lsls	r2, r3, #22
 8000f28:	d4ef      	bmi.n	8000f0a <__smakebuf_r+0x1a>
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4393      	bics	r3, r2
 8000f2e:	431e      	orrs	r6, r3
 8000f30:	81a6      	strh	r6, [r4, #12]
 8000f32:	e7e4      	b.n	8000efe <__smakebuf_r+0xe>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	89a2      	ldrh	r2, [r4, #12]
 8000f38:	6020      	str	r0, [r4, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	9b00      	ldr	r3, [sp, #0]
 8000f40:	6120      	str	r0, [r4, #16]
 8000f42:	6163      	str	r3, [r4, #20]
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00c      	beq.n	8000f64 <__smakebuf_r+0x74>
 8000f4a:	0028      	movs	r0, r5
 8000f4c:	230e      	movs	r3, #14
 8000f4e:	5ee1      	ldrsh	r1, [r4, r3]
 8000f50:	f000 f81e 	bl	8000f90 <_isatty_r>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d005      	beq.n	8000f64 <__smakebuf_r+0x74>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	89a2      	ldrh	r2, [r4, #12]
 8000f5c:	439a      	bics	r2, r3
 8000f5e:	3b02      	subs	r3, #2
 8000f60:	4313      	orrs	r3, r2
 8000f62:	81a3      	strh	r3, [r4, #12]
 8000f64:	89a3      	ldrh	r3, [r4, #12]
 8000f66:	433b      	orrs	r3, r7
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	e7ce      	b.n	8000f0a <__smakebuf_r+0x1a>

08000f6c <_fstat_r>:
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	b570      	push	{r4, r5, r6, lr}
 8000f70:	4d06      	ldr	r5, [pc, #24]	; (8000f8c <_fstat_r+0x20>)
 8000f72:	0004      	movs	r4, r0
 8000f74:	0008      	movs	r0, r1
 8000f76:	0011      	movs	r1, r2
 8000f78:	602b      	str	r3, [r5, #0]
 8000f7a:	f7ff f9c8 	bl	800030e <_fstat>
 8000f7e:	1c43      	adds	r3, r0, #1
 8000f80:	d103      	bne.n	8000f8a <_fstat_r+0x1e>
 8000f82:	682b      	ldr	r3, [r5, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d000      	beq.n	8000f8a <_fstat_r+0x1e>
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	200001bc 	.word	0x200001bc

08000f90 <_isatty_r>:
 8000f90:	2300      	movs	r3, #0
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	4d06      	ldr	r5, [pc, #24]	; (8000fb0 <_isatty_r+0x20>)
 8000f96:	0004      	movs	r4, r0
 8000f98:	0008      	movs	r0, r1
 8000f9a:	602b      	str	r3, [r5, #0]
 8000f9c:	f7ff f9c5 	bl	800032a <_isatty>
 8000fa0:	1c43      	adds	r3, r0, #1
 8000fa2:	d103      	bne.n	8000fac <_isatty_r+0x1c>
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d000      	beq.n	8000fac <_isatty_r+0x1c>
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	200001bc 	.word	0x200001bc

08000fb4 <_sbrk_r>:
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	b570      	push	{r4, r5, r6, lr}
 8000fb8:	4d06      	ldr	r5, [pc, #24]	; (8000fd4 <_sbrk_r+0x20>)
 8000fba:	0004      	movs	r4, r0
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff f9c8 	bl	8000354 <_sbrk>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d103      	bne.n	8000fd0 <_sbrk_r+0x1c>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d000      	beq.n	8000fd0 <_sbrk_r+0x1c>
 8000fce:	6023      	str	r3, [r4, #0]
 8000fd0:	bd70      	pop	{r4, r5, r6, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	200001bc 	.word	0x200001bc

08000fd8 <_init>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr

08000fe4 <_fini>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr
