
20_uart1_tx_dms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080010a0  080010a0  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800112c  0800112c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800112c  0800112c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800112c  0800112c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800112c  0800112c  0001112c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001130  08001130  00011130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001198  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001198  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c01  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000858  00000000  00000000  00022c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  000234e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00023668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4e6  00000000  00000000  000237a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a8a  00000000  00000000  0002dc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003207b  00000000  00000000  0002f710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006178b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b1c  00000000  00000000  000617e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001088 	.word	0x08001088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08001088 	.word	0x08001088

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

static void uart_callback();

char read_char=0;
int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	uart1_rx_interrupt_init();
 8000224:	f000 f8f4 	bl	8000410 <uart1_rx_interrupt_init>
	printf("hello please enter A\n");
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <main+0x14>)
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fa8e 	bl	800074c <puts>
	while(1)
 8000230:	e7fe      	b.n	8000230 <main+0x10>
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	080010a0 	.word	0x080010a0

08000238 <uart_callback>:
		//read_char = uart1_read();

	}
}
static void uart_callback()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	read_char = USART1->RDR;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <uart_callback+0x28>)
 800023e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000240:	b29b      	uxth	r3, r3
 8000242:	b2da      	uxtb	r2, r3
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <uart_callback+0x2c>)
 8000246:	701a      	strb	r2, [r3, #0]
	if(read_char=='A')
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <uart_callback+0x2c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b41      	cmp	r3, #65	; 0x41
 800024e:	d103      	bne.n	8000258 <uart_callback+0x20>
		printf("you pressed A\n");
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <uart_callback+0x30>)
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fa7a 	bl	800074c <puts>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40013800 	.word	0x40013800
 8000264:	20000080 	.word	0x20000080
 8000268:	080010b8 	.word	0x080010b8

0800026c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	//check interrupt flag
	if(USART1->ISR & SR_RXNE)
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <USART1_IRQHandler+0x18>)
 8000272:	69db      	ldr	r3, [r3, #28]
 8000274:	2220      	movs	r2, #32
 8000276:	4013      	ands	r3, r2
 8000278:	d001      	beq.n	800027e <USART1_IRQHandler+0x12>
	{
		uart_callback();
 800027a:	f7ff ffdd 	bl	8000238 <uart_callback>
	}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40013800 	.word	0x40013800

08000288 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e00a      	b.n	80002b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800029a:	e000      	b.n	800029e <_read+0x16>
 800029c:	bf00      	nop
 800029e:	0001      	movs	r1, r0
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	1c5a      	adds	r2, r3, #1
 80002a4:	60ba      	str	r2, [r7, #8]
 80002a6:	b2ca      	uxtb	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf0      	blt.n	800029a <_read+0x12>
  }

  return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	0018      	movs	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	b006      	add	sp, #24
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b086      	sub	sp, #24
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 f889 	bl	80003f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x12>
  }
  return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b006      	add	sp, #24
 80002f8:	bd80      	pop	{r7, pc}

080002fa <_close>:

int _close(int file)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000302:	2301      	movs	r3, #1
 8000304:	425b      	negs	r3, r3
}
 8000306:	0018      	movs	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}

0800030e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b082      	sub	sp, #8
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	0192      	lsls	r2, r2, #6
 800031e:	605a      	str	r2, [r3, #4]
  return 0;
 8000320:	2300      	movs	r3, #0
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}

0800032a <_isatty>:

int _isatty(int file)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b082      	sub	sp, #8
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000332:	2301      	movs	r3, #1
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000348:	2300      	movs	r3, #0
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	b004      	add	sp, #16
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 f93e 	bl	8000604 <__errno>
 8000388:	0003      	movs	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	2301      	movs	r3, #1
 8000390:	425b      	negs	r3, r3
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	18d2      	adds	r2, r2, r3
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	0018      	movs	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b006      	add	sp, #24
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20002000 	.word	0x20002000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	20000084 	.word	0x20000084
 80003bc:	200000a0 	.word	0x200000a0

080003c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	0002      	movs	r2, r0
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b7f      	cmp	r3, #127	; 0x7f
 80003d2:	d809      	bhi.n	80003e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	001a      	movs	r2, r3
 80003da:	231f      	movs	r3, #31
 80003dc:	401a      	ands	r2, r3
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <__NVIC_EnableIRQ+0x30>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	4091      	lsls	r1, r2
 80003e4:	000a      	movs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
  }
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b002      	add	sp, #8
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <__io_putchar>:
#define DMA_CH_2_SEL	(1U<<5)
#define DMA_CH_2_MINC	(1U<<7)
#define DMA_CH_DIR		(1U<<4)

int __io_putchar(int ch)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f8bd 	bl	8000580 <uart1_write>
	return ch;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}

08000410 <uart1_rx_interrupt_init>:

void uart1_rx_interrupt_init()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOBEN;
 8000414:	4b39      	ldr	r3, [pc, #228]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	02c9      	lsls	r1, r1, #11
 800041e:	430a      	orrs	r2, r1
 8000420:	615a      	str	r2, [r3, #20]
	//alternate fun mode//pb6 tx
	GPIOB->MODER &= ~(1U<<12);
 8000422:	4b37      	ldr	r3, [pc, #220]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b36      	ldr	r3, [pc, #216]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000428:	4936      	ldr	r1, [pc, #216]	; (8000504 <uart1_rx_interrupt_init+0xf4>)
 800042a:	400a      	ands	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<13);
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0189      	lsls	r1, r1, #6
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
	//alternate fun mode//pb7 rx
	GPIOB->MODER &= ~(1U<<14);
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000442:	4931      	ldr	r1, [pc, #196]	; (8000508 <uart1_rx_interrupt_init+0xf8>)
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<15);
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	0209      	lsls	r1, r1, #8
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]
	//pb6 to alternate fun tx, af0
	GPIOB->AFR[0] &= ~(1<<24);
 8000456:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000458:	6a1a      	ldr	r2, [r3, #32]
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800045c:	492b      	ldr	r1, [pc, #172]	; (800050c <uart1_rx_interrupt_init+0xfc>)
 800045e:	400a      	ands	r2, r1
 8000460:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<25);
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000464:	6a1a      	ldr	r2, [r3, #32]
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000468:	4929      	ldr	r1, [pc, #164]	; (8000510 <uart1_rx_interrupt_init+0x100>)
 800046a:	400a      	ands	r2, r1
 800046c:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<26);
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000470:	6a1a      	ldr	r2, [r3, #32]
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000474:	4927      	ldr	r1, [pc, #156]	; (8000514 <uart1_rx_interrupt_init+0x104>)
 8000476:	400a      	ands	r2, r1
 8000478:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<27);
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800047c:	6a1a      	ldr	r2, [r3, #32]
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000480:	4925      	ldr	r1, [pc, #148]	; (8000518 <uart1_rx_interrupt_init+0x108>)
 8000482:	400a      	ands	r2, r1
 8000484:	621a      	str	r2, [r3, #32]
	//pb7 to alternate fun rx, af0
	GPIOB->AFR[0] &= ~(1<<28);
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000488:	6a1a      	ldr	r2, [r3, #32]
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 800048c:	4923      	ldr	r1, [pc, #140]	; (800051c <uart1_rx_interrupt_init+0x10c>)
 800048e:	400a      	ands	r2, r1
 8000490:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<29);
 8000492:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000494:	6a1a      	ldr	r2, [r3, #32]
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 8000498:	4921      	ldr	r1, [pc, #132]	; (8000520 <uart1_rx_interrupt_init+0x110>)
 800049a:	400a      	ands	r2, r1
 800049c:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<30);
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004a0:	6a1a      	ldr	r2, [r3, #32]
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004a4:	491f      	ldr	r1, [pc, #124]	; (8000524 <uart1_rx_interrupt_init+0x114>)
 80004a6:	400a      	ands	r2, r1
 80004a8:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<31);
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004ac:	6a1a      	ldr	r2, [r3, #32]
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <uart1_rx_interrupt_init+0xf0>)
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	0852      	lsrs	r2, r2, #1
 80004b4:	621a      	str	r2, [r3, #32]
	//enable clock to uart1//
	RCC->APB2ENR |= UART1EN;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <uart1_rx_interrupt_init+0xec>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	01c9      	lsls	r1, r1, #7
 80004c0:	430a      	orrs	r2, r1
 80004c2:	619a      	str	r2, [r3, #24]
	//baud rate//
	set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 80004c4:	2396      	movs	r3, #150	; 0x96
 80004c6:	019b      	lsls	r3, r3, #6
 80004c8:	4917      	ldr	r1, [pc, #92]	; (8000528 <uart1_rx_interrupt_init+0x118>)
 80004ca:	4818      	ldr	r0, [pc, #96]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004cc:	001a      	movs	r2, r3
 80004ce:	f000 f82f 	bl	8000530 <set_baudrate>
	//USART1->BRR = 80000/96;
	//program stop bits//
	//USART1->CR2 = 0x00;
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|CR1_RE|UART_EN);
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004d4:	220d      	movs	r2, #13
 80004d6:	601a      	str	r2, [r3, #0]
	//enable uart RX interrupt//
	USART1->CR1 |= CR1_RXNEIE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004de:	2120      	movs	r1, #32
 80004e0:	430a      	orrs	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
	//enable nvic
	NVIC_EnableIRQ(USART1_IRQn);
 80004e4:	201b      	movs	r0, #27
 80004e6:	f7ff ff6b 	bl	80003c0 <__NVIC_EnableIRQ>
	//enable uart
	USART1->CR1 |= CR1_UE;
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <uart1_rx_interrupt_init+0x11c>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	ffffefff 	.word	0xffffefff
 8000508:	ffffbfff 	.word	0xffffbfff
 800050c:	feffffff 	.word	0xfeffffff
 8000510:	fdffffff 	.word	0xfdffffff
 8000514:	fbffffff 	.word	0xfbffffff
 8000518:	f7ffffff 	.word	0xf7ffffff
 800051c:	efffffff 	.word	0xefffffff
 8000520:	dfffffff 	.word	0xdfffffff
 8000524:	bfffffff 	.word	0xbfffffff
 8000528:	007a1200 	.word	0x007a1200
 800052c:	40013800 	.word	0x40013800

08000530 <set_baudrate>:
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|CR1_RE|UART_EN);
	//enable uart module//
}
void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f808 	bl	8000558 <compute_uart_div>
 8000548:	0003      	movs	r3, r0
 800054a:	001a      	movs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	60da      	str	r2, [r3, #12]
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bd80      	pop	{r7, pc}

08000558 <compute_uart_div>:

uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	085a      	lsrs	r2, r3, #1
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fdcb 	bl	8000108 <__udivsi3>
 8000572:	0003      	movs	r3, r0
 8000574:	b29b      	uxth	r3, r3
}
 8000576:	0018      	movs	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <uart1_write>:

void uart1_write(uint8_t ch)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	0002      	movs	r2, r0
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	701a      	strb	r2, [r3, #0]

	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <uart1_write+0x2c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	4013      	ands	r3, r2
 8000596:	d0fa      	beq.n	800058e <uart1_write+0xe>
	USART1->TDR = (ch&0xff);
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <uart1_write+0x2c>)
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	8513      	strh	r3, [r2, #40]	; 0x28


}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40013800 	.word	0x40013800

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	e000      	b.n	80005b8 <Reset_Handler+0x8>
 80005b6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 f817 	bl	8000610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe1d 	bl	8000220 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005f4:	08001134 	.word	0x08001134
  ldr r2, =_sbss
 80005f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005fc:	200000a0 	.word	0x200000a0

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <__errno>:
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <__errno+0x8>)
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000000 	.word	0x20000000

08000610 <__libc_init_array>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2600      	movs	r6, #0
 8000614:	4d0c      	ldr	r5, [pc, #48]	; (8000648 <__libc_init_array+0x38>)
 8000616:	4c0d      	ldr	r4, [pc, #52]	; (800064c <__libc_init_array+0x3c>)
 8000618:	1b64      	subs	r4, r4, r5
 800061a:	10a4      	asrs	r4, r4, #2
 800061c:	42a6      	cmp	r6, r4
 800061e:	d109      	bne.n	8000634 <__libc_init_array+0x24>
 8000620:	2600      	movs	r6, #0
 8000622:	f000 fd31 	bl	8001088 <_init>
 8000626:	4d0a      	ldr	r5, [pc, #40]	; (8000650 <__libc_init_array+0x40>)
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <__libc_init_array+0x44>)
 800062a:	1b64      	subs	r4, r4, r5
 800062c:	10a4      	asrs	r4, r4, #2
 800062e:	42a6      	cmp	r6, r4
 8000630:	d105      	bne.n	800063e <__libc_init_array+0x2e>
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	00b3      	lsls	r3, r6, #2
 8000636:	58eb      	ldr	r3, [r5, r3]
 8000638:	4798      	blx	r3
 800063a:	3601      	adds	r6, #1
 800063c:	e7ee      	b.n	800061c <__libc_init_array+0xc>
 800063e:	00b3      	lsls	r3, r6, #2
 8000640:	58eb      	ldr	r3, [r5, r3]
 8000642:	4798      	blx	r3
 8000644:	3601      	adds	r6, #1
 8000646:	e7f2      	b.n	800062e <__libc_init_array+0x1e>
 8000648:	0800112c 	.word	0x0800112c
 800064c:	0800112c 	.word	0x0800112c
 8000650:	0800112c 	.word	0x0800112c
 8000654:	08001130 	.word	0x08001130

08000658 <memset>:
 8000658:	0003      	movs	r3, r0
 800065a:	1882      	adds	r2, r0, r2
 800065c:	4293      	cmp	r3, r2
 800065e:	d100      	bne.n	8000662 <memset+0xa>
 8000660:	4770      	bx	lr
 8000662:	7019      	strb	r1, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	e7f9      	b.n	800065c <memset+0x4>

08000668 <_puts_r>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0005      	movs	r5, r0
 800066c:	000e      	movs	r6, r1
 800066e:	2800      	cmp	r0, #0
 8000670:	d004      	beq.n	800067c <_puts_r+0x14>
 8000672:	6983      	ldr	r3, [r0, #24]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <_puts_r+0x14>
 8000678:	f000 fa6e 	bl	8000b58 <__sinit>
 800067c:	69ab      	ldr	r3, [r5, #24]
 800067e:	68ac      	ldr	r4, [r5, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <_puts_r+0x22>
 8000684:	0028      	movs	r0, r5
 8000686:	f000 fa67 	bl	8000b58 <__sinit>
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <_puts_r+0xd8>)
 800068c:	429c      	cmp	r4, r3
 800068e:	d122      	bne.n	80006d6 <_puts_r+0x6e>
 8000690:	686c      	ldr	r4, [r5, #4]
 8000692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000694:	07db      	lsls	r3, r3, #31
 8000696:	d405      	bmi.n	80006a4 <_puts_r+0x3c>
 8000698:	89a3      	ldrh	r3, [r4, #12]
 800069a:	059b      	lsls	r3, r3, #22
 800069c:	d402      	bmi.n	80006a4 <_puts_r+0x3c>
 800069e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006a0:	f000 fafb 	bl	8000c9a <__retarget_lock_acquire_recursive>
 80006a4:	89a3      	ldrh	r3, [r4, #12]
 80006a6:	071b      	lsls	r3, r3, #28
 80006a8:	d502      	bpl.n	80006b0 <_puts_r+0x48>
 80006aa:	6923      	ldr	r3, [r4, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d129      	bne.n	8000704 <_puts_r+0x9c>
 80006b0:	0021      	movs	r1, r4
 80006b2:	0028      	movs	r0, r5
 80006b4:	f000 f8aa 	bl	800080c <__swsetup_r>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d023      	beq.n	8000704 <_puts_r+0x9c>
 80006bc:	2501      	movs	r5, #1
 80006be:	426d      	negs	r5, r5
 80006c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	d405      	bmi.n	80006d2 <_puts_r+0x6a>
 80006c6:	89a3      	ldrh	r3, [r4, #12]
 80006c8:	059b      	lsls	r3, r3, #22
 80006ca:	d402      	bmi.n	80006d2 <_puts_r+0x6a>
 80006cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006ce:	f000 fae5 	bl	8000c9c <__retarget_lock_release_recursive>
 80006d2:	0028      	movs	r0, r5
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <_puts_r+0xdc>)
 80006d8:	429c      	cmp	r4, r3
 80006da:	d101      	bne.n	80006e0 <_puts_r+0x78>
 80006dc:	68ac      	ldr	r4, [r5, #8]
 80006de:	e7d8      	b.n	8000692 <_puts_r+0x2a>
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <_puts_r+0xe0>)
 80006e2:	429c      	cmp	r4, r3
 80006e4:	d1d5      	bne.n	8000692 <_puts_r+0x2a>
 80006e6:	68ec      	ldr	r4, [r5, #12]
 80006e8:	e7d3      	b.n	8000692 <_puts_r+0x2a>
 80006ea:	3601      	adds	r6, #1
 80006ec:	60a3      	str	r3, [r4, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da04      	bge.n	80006fc <_puts_r+0x94>
 80006f2:	69a2      	ldr	r2, [r4, #24]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dc16      	bgt.n	8000726 <_puts_r+0xbe>
 80006f8:	290a      	cmp	r1, #10
 80006fa:	d014      	beq.n	8000726 <_puts_r+0xbe>
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	6022      	str	r2, [r4, #0]
 8000702:	7019      	strb	r1, [r3, #0]
 8000704:	68a3      	ldr	r3, [r4, #8]
 8000706:	7831      	ldrb	r1, [r6, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2900      	cmp	r1, #0
 800070c:	d1ed      	bne.n	80006ea <_puts_r+0x82>
 800070e:	60a3      	str	r3, [r4, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	da0f      	bge.n	8000734 <_puts_r+0xcc>
 8000714:	0028      	movs	r0, r5
 8000716:	0022      	movs	r2, r4
 8000718:	310a      	adds	r1, #10
 800071a:	f000 f821 	bl	8000760 <__swbuf_r>
 800071e:	250a      	movs	r5, #10
 8000720:	1c43      	adds	r3, r0, #1
 8000722:	d1cd      	bne.n	80006c0 <_puts_r+0x58>
 8000724:	e7ca      	b.n	80006bc <_puts_r+0x54>
 8000726:	0022      	movs	r2, r4
 8000728:	0028      	movs	r0, r5
 800072a:	f000 f819 	bl	8000760 <__swbuf_r>
 800072e:	1c43      	adds	r3, r0, #1
 8000730:	d1e8      	bne.n	8000704 <_puts_r+0x9c>
 8000732:	e7c3      	b.n	80006bc <_puts_r+0x54>
 8000734:	250a      	movs	r5, #10
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	6022      	str	r2, [r4, #0]
 800073c:	701d      	strb	r5, [r3, #0]
 800073e:	e7bf      	b.n	80006c0 <_puts_r+0x58>
 8000740:	080010ec 	.word	0x080010ec
 8000744:	0800110c 	.word	0x0800110c
 8000748:	080010cc 	.word	0x080010cc

0800074c <puts>:
 800074c:	b510      	push	{r4, lr}
 800074e:	4b03      	ldr	r3, [pc, #12]	; (800075c <puts+0x10>)
 8000750:	0001      	movs	r1, r0
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f7ff ff88 	bl	8000668 <_puts_r>
 8000758:	bd10      	pop	{r4, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000000 	.word	0x20000000

08000760 <__swbuf_r>:
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000762:	0005      	movs	r5, r0
 8000764:	000e      	movs	r6, r1
 8000766:	0014      	movs	r4, r2
 8000768:	2800      	cmp	r0, #0
 800076a:	d004      	beq.n	8000776 <__swbuf_r+0x16>
 800076c:	6983      	ldr	r3, [r0, #24]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <__swbuf_r+0x16>
 8000772:	f000 f9f1 	bl	8000b58 <__sinit>
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <__swbuf_r+0xa0>)
 8000778:	429c      	cmp	r4, r3
 800077a:	d12e      	bne.n	80007da <__swbuf_r+0x7a>
 800077c:	686c      	ldr	r4, [r5, #4]
 800077e:	69a3      	ldr	r3, [r4, #24]
 8000780:	60a3      	str	r3, [r4, #8]
 8000782:	89a3      	ldrh	r3, [r4, #12]
 8000784:	071b      	lsls	r3, r3, #28
 8000786:	d532      	bpl.n	80007ee <__swbuf_r+0x8e>
 8000788:	6923      	ldr	r3, [r4, #16]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d02f      	beq.n	80007ee <__swbuf_r+0x8e>
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	6922      	ldr	r2, [r4, #16]
 8000792:	b2f7      	uxtb	r7, r6
 8000794:	1a98      	subs	r0, r3, r2
 8000796:	6963      	ldr	r3, [r4, #20]
 8000798:	b2f6      	uxtb	r6, r6
 800079a:	4283      	cmp	r3, r0
 800079c:	dc05      	bgt.n	80007aa <__swbuf_r+0x4a>
 800079e:	0021      	movs	r1, r4
 80007a0:	0028      	movs	r0, r5
 80007a2:	f000 f937 	bl	8000a14 <_fflush_r>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d127      	bne.n	80007fa <__swbuf_r+0x9a>
 80007aa:	68a3      	ldr	r3, [r4, #8]
 80007ac:	3001      	adds	r0, #1
 80007ae:	3b01      	subs	r3, #1
 80007b0:	60a3      	str	r3, [r4, #8]
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	6022      	str	r2, [r4, #0]
 80007b8:	701f      	strb	r7, [r3, #0]
 80007ba:	6963      	ldr	r3, [r4, #20]
 80007bc:	4283      	cmp	r3, r0
 80007be:	d004      	beq.n	80007ca <__swbuf_r+0x6a>
 80007c0:	89a3      	ldrh	r3, [r4, #12]
 80007c2:	07db      	lsls	r3, r3, #31
 80007c4:	d507      	bpl.n	80007d6 <__swbuf_r+0x76>
 80007c6:	2e0a      	cmp	r6, #10
 80007c8:	d105      	bne.n	80007d6 <__swbuf_r+0x76>
 80007ca:	0021      	movs	r1, r4
 80007cc:	0028      	movs	r0, r5
 80007ce:	f000 f921 	bl	8000a14 <_fflush_r>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d111      	bne.n	80007fa <__swbuf_r+0x9a>
 80007d6:	0030      	movs	r0, r6
 80007d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <__swbuf_r+0xa4>)
 80007dc:	429c      	cmp	r4, r3
 80007de:	d101      	bne.n	80007e4 <__swbuf_r+0x84>
 80007e0:	68ac      	ldr	r4, [r5, #8]
 80007e2:	e7cc      	b.n	800077e <__swbuf_r+0x1e>
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <__swbuf_r+0xa8>)
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d1c9      	bne.n	800077e <__swbuf_r+0x1e>
 80007ea:	68ec      	ldr	r4, [r5, #12]
 80007ec:	e7c7      	b.n	800077e <__swbuf_r+0x1e>
 80007ee:	0021      	movs	r1, r4
 80007f0:	0028      	movs	r0, r5
 80007f2:	f000 f80b 	bl	800080c <__swsetup_r>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d0c9      	beq.n	800078e <__swbuf_r+0x2e>
 80007fa:	2601      	movs	r6, #1
 80007fc:	4276      	negs	r6, r6
 80007fe:	e7ea      	b.n	80007d6 <__swbuf_r+0x76>
 8000800:	080010ec 	.word	0x080010ec
 8000804:	0800110c 	.word	0x0800110c
 8000808:	080010cc 	.word	0x080010cc

0800080c <__swsetup_r>:
 800080c:	4b37      	ldr	r3, [pc, #220]	; (80008ec <__swsetup_r+0xe0>)
 800080e:	b570      	push	{r4, r5, r6, lr}
 8000810:	681d      	ldr	r5, [r3, #0]
 8000812:	0006      	movs	r6, r0
 8000814:	000c      	movs	r4, r1
 8000816:	2d00      	cmp	r5, #0
 8000818:	d005      	beq.n	8000826 <__swsetup_r+0x1a>
 800081a:	69ab      	ldr	r3, [r5, #24]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <__swsetup_r+0x1a>
 8000820:	0028      	movs	r0, r5
 8000822:	f000 f999 	bl	8000b58 <__sinit>
 8000826:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <__swsetup_r+0xe4>)
 8000828:	429c      	cmp	r4, r3
 800082a:	d10f      	bne.n	800084c <__swsetup_r+0x40>
 800082c:	686c      	ldr	r4, [r5, #4]
 800082e:	230c      	movs	r3, #12
 8000830:	5ee2      	ldrsh	r2, [r4, r3]
 8000832:	b293      	uxth	r3, r2
 8000834:	0711      	lsls	r1, r2, #28
 8000836:	d42d      	bmi.n	8000894 <__swsetup_r+0x88>
 8000838:	06d9      	lsls	r1, r3, #27
 800083a:	d411      	bmi.n	8000860 <__swsetup_r+0x54>
 800083c:	2309      	movs	r3, #9
 800083e:	2001      	movs	r0, #1
 8000840:	6033      	str	r3, [r6, #0]
 8000842:	3337      	adds	r3, #55	; 0x37
 8000844:	4313      	orrs	r3, r2
 8000846:	81a3      	strh	r3, [r4, #12]
 8000848:	4240      	negs	r0, r0
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <__swsetup_r+0xe8>)
 800084e:	429c      	cmp	r4, r3
 8000850:	d101      	bne.n	8000856 <__swsetup_r+0x4a>
 8000852:	68ac      	ldr	r4, [r5, #8]
 8000854:	e7eb      	b.n	800082e <__swsetup_r+0x22>
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <__swsetup_r+0xec>)
 8000858:	429c      	cmp	r4, r3
 800085a:	d1e8      	bne.n	800082e <__swsetup_r+0x22>
 800085c:	68ec      	ldr	r4, [r5, #12]
 800085e:	e7e6      	b.n	800082e <__swsetup_r+0x22>
 8000860:	075b      	lsls	r3, r3, #29
 8000862:	d513      	bpl.n	800088c <__swsetup_r+0x80>
 8000864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000866:	2900      	cmp	r1, #0
 8000868:	d008      	beq.n	800087c <__swsetup_r+0x70>
 800086a:	0023      	movs	r3, r4
 800086c:	3344      	adds	r3, #68	; 0x44
 800086e:	4299      	cmp	r1, r3
 8000870:	d002      	beq.n	8000878 <__swsetup_r+0x6c>
 8000872:	0030      	movs	r0, r6
 8000874:	f000 fa80 	bl	8000d78 <_free_r>
 8000878:	2300      	movs	r3, #0
 800087a:	6363      	str	r3, [r4, #52]	; 0x34
 800087c:	2224      	movs	r2, #36	; 0x24
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	4393      	bics	r3, r2
 8000882:	81a3      	strh	r3, [r4, #12]
 8000884:	2300      	movs	r3, #0
 8000886:	6063      	str	r3, [r4, #4]
 8000888:	6923      	ldr	r3, [r4, #16]
 800088a:	6023      	str	r3, [r4, #0]
 800088c:	2308      	movs	r3, #8
 800088e:	89a2      	ldrh	r2, [r4, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	81a3      	strh	r3, [r4, #12]
 8000894:	6923      	ldr	r3, [r4, #16]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10b      	bne.n	80008b2 <__swsetup_r+0xa6>
 800089a:	21a0      	movs	r1, #160	; 0xa0
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	0089      	lsls	r1, r1, #2
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	400b      	ands	r3, r1
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d003      	beq.n	80008b2 <__swsetup_r+0xa6>
 80008aa:	0021      	movs	r1, r4
 80008ac:	0030      	movs	r0, r6
 80008ae:	f000 fa1f 	bl	8000cf0 <__smakebuf_r>
 80008b2:	220c      	movs	r2, #12
 80008b4:	5ea3      	ldrsh	r3, [r4, r2]
 80008b6:	2001      	movs	r0, #1
 80008b8:	001a      	movs	r2, r3
 80008ba:	b299      	uxth	r1, r3
 80008bc:	4002      	ands	r2, r0
 80008be:	4203      	tst	r3, r0
 80008c0:	d00f      	beq.n	80008e2 <__swsetup_r+0xd6>
 80008c2:	2200      	movs	r2, #0
 80008c4:	60a2      	str	r2, [r4, #8]
 80008c6:	6962      	ldr	r2, [r4, #20]
 80008c8:	4252      	negs	r2, r2
 80008ca:	61a2      	str	r2, [r4, #24]
 80008cc:	2000      	movs	r0, #0
 80008ce:	6922      	ldr	r2, [r4, #16]
 80008d0:	4282      	cmp	r2, r0
 80008d2:	d1ba      	bne.n	800084a <__swsetup_r+0x3e>
 80008d4:	060a      	lsls	r2, r1, #24
 80008d6:	d5b8      	bpl.n	800084a <__swsetup_r+0x3e>
 80008d8:	2240      	movs	r2, #64	; 0x40
 80008da:	4313      	orrs	r3, r2
 80008dc:	81a3      	strh	r3, [r4, #12]
 80008de:	3801      	subs	r0, #1
 80008e0:	e7b3      	b.n	800084a <__swsetup_r+0x3e>
 80008e2:	0788      	lsls	r0, r1, #30
 80008e4:	d400      	bmi.n	80008e8 <__swsetup_r+0xdc>
 80008e6:	6962      	ldr	r2, [r4, #20]
 80008e8:	60a2      	str	r2, [r4, #8]
 80008ea:	e7ef      	b.n	80008cc <__swsetup_r+0xc0>
 80008ec:	20000000 	.word	0x20000000
 80008f0:	080010ec 	.word	0x080010ec
 80008f4:	0800110c 	.word	0x0800110c
 80008f8:	080010cc 	.word	0x080010cc

080008fc <__sflush_r>:
 80008fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008fe:	898b      	ldrh	r3, [r1, #12]
 8000900:	0005      	movs	r5, r0
 8000902:	000c      	movs	r4, r1
 8000904:	071a      	lsls	r2, r3, #28
 8000906:	d45f      	bmi.n	80009c8 <__sflush_r+0xcc>
 8000908:	684a      	ldr	r2, [r1, #4]
 800090a:	2a00      	cmp	r2, #0
 800090c:	dc04      	bgt.n	8000918 <__sflush_r+0x1c>
 800090e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000910:	2a00      	cmp	r2, #0
 8000912:	dc01      	bgt.n	8000918 <__sflush_r+0x1c>
 8000914:	2000      	movs	r0, #0
 8000916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000918:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800091a:	2f00      	cmp	r7, #0
 800091c:	d0fa      	beq.n	8000914 <__sflush_r+0x18>
 800091e:	2200      	movs	r2, #0
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	682e      	ldr	r6, [r5, #0]
 8000924:	602a      	str	r2, [r5, #0]
 8000926:	001a      	movs	r2, r3
 8000928:	0149      	lsls	r1, r1, #5
 800092a:	400a      	ands	r2, r1
 800092c:	420b      	tst	r3, r1
 800092e:	d034      	beq.n	800099a <__sflush_r+0x9e>
 8000930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	075b      	lsls	r3, r3, #29
 8000936:	d506      	bpl.n	8000946 <__sflush_r+0x4a>
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	1ac0      	subs	r0, r0, r3
 800093c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <__sflush_r+0x4a>
 8000942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000944:	1ac0      	subs	r0, r0, r3
 8000946:	0002      	movs	r2, r0
 8000948:	6a21      	ldr	r1, [r4, #32]
 800094a:	2300      	movs	r3, #0
 800094c:	0028      	movs	r0, r5
 800094e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000950:	47b8      	blx	r7
 8000952:	89a1      	ldrh	r1, [r4, #12]
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	d106      	bne.n	8000966 <__sflush_r+0x6a>
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	2b1d      	cmp	r3, #29
 800095c:	d831      	bhi.n	80009c2 <__sflush_r+0xc6>
 800095e:	4a2c      	ldr	r2, [pc, #176]	; (8000a10 <__sflush_r+0x114>)
 8000960:	40da      	lsrs	r2, r3
 8000962:	07d3      	lsls	r3, r2, #31
 8000964:	d52d      	bpl.n	80009c2 <__sflush_r+0xc6>
 8000966:	2300      	movs	r3, #0
 8000968:	6063      	str	r3, [r4, #4]
 800096a:	6923      	ldr	r3, [r4, #16]
 800096c:	6023      	str	r3, [r4, #0]
 800096e:	04cb      	lsls	r3, r1, #19
 8000970:	d505      	bpl.n	800097e <__sflush_r+0x82>
 8000972:	1c43      	adds	r3, r0, #1
 8000974:	d102      	bne.n	800097c <__sflush_r+0x80>
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d100      	bne.n	800097e <__sflush_r+0x82>
 800097c:	6560      	str	r0, [r4, #84]	; 0x54
 800097e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000980:	602e      	str	r6, [r5, #0]
 8000982:	2900      	cmp	r1, #0
 8000984:	d0c6      	beq.n	8000914 <__sflush_r+0x18>
 8000986:	0023      	movs	r3, r4
 8000988:	3344      	adds	r3, #68	; 0x44
 800098a:	4299      	cmp	r1, r3
 800098c:	d002      	beq.n	8000994 <__sflush_r+0x98>
 800098e:	0028      	movs	r0, r5
 8000990:	f000 f9f2 	bl	8000d78 <_free_r>
 8000994:	2000      	movs	r0, #0
 8000996:	6360      	str	r0, [r4, #52]	; 0x34
 8000998:	e7bd      	b.n	8000916 <__sflush_r+0x1a>
 800099a:	2301      	movs	r3, #1
 800099c:	0028      	movs	r0, r5
 800099e:	6a21      	ldr	r1, [r4, #32]
 80009a0:	47b8      	blx	r7
 80009a2:	1c43      	adds	r3, r0, #1
 80009a4:	d1c5      	bne.n	8000932 <__sflush_r+0x36>
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0c2      	beq.n	8000932 <__sflush_r+0x36>
 80009ac:	2b1d      	cmp	r3, #29
 80009ae:	d001      	beq.n	80009b4 <__sflush_r+0xb8>
 80009b0:	2b16      	cmp	r3, #22
 80009b2:	d101      	bne.n	80009b8 <__sflush_r+0xbc>
 80009b4:	602e      	str	r6, [r5, #0]
 80009b6:	e7ad      	b.n	8000914 <__sflush_r+0x18>
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	89a2      	ldrh	r2, [r4, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	81a3      	strh	r3, [r4, #12]
 80009c0:	e7a9      	b.n	8000916 <__sflush_r+0x1a>
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	430b      	orrs	r3, r1
 80009c6:	e7fa      	b.n	80009be <__sflush_r+0xc2>
 80009c8:	690f      	ldr	r7, [r1, #16]
 80009ca:	2f00      	cmp	r7, #0
 80009cc:	d0a2      	beq.n	8000914 <__sflush_r+0x18>
 80009ce:	680a      	ldr	r2, [r1, #0]
 80009d0:	600f      	str	r7, [r1, #0]
 80009d2:	1bd2      	subs	r2, r2, r7
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	079b      	lsls	r3, r3, #30
 80009da:	d100      	bne.n	80009de <__sflush_r+0xe2>
 80009dc:	694a      	ldr	r2, [r1, #20]
 80009de:	60a2      	str	r2, [r4, #8]
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dc00      	bgt.n	80009e8 <__sflush_r+0xec>
 80009e6:	e795      	b.n	8000914 <__sflush_r+0x18>
 80009e8:	003a      	movs	r2, r7
 80009ea:	0028      	movs	r0, r5
 80009ec:	9b01      	ldr	r3, [sp, #4]
 80009ee:	6a21      	ldr	r1, [r4, #32]
 80009f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009f2:	47b0      	blx	r6
 80009f4:	2800      	cmp	r0, #0
 80009f6:	dc06      	bgt.n	8000a06 <__sflush_r+0x10a>
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	2001      	movs	r0, #1
 80009fc:	89a2      	ldrh	r2, [r4, #12]
 80009fe:	4240      	negs	r0, r0
 8000a00:	4313      	orrs	r3, r2
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	e787      	b.n	8000916 <__sflush_r+0x1a>
 8000a06:	9b01      	ldr	r3, [sp, #4]
 8000a08:	183f      	adds	r7, r7, r0
 8000a0a:	1a1b      	subs	r3, r3, r0
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	e7e7      	b.n	80009e0 <__sflush_r+0xe4>
 8000a10:	20400001 	.word	0x20400001

08000a14 <_fflush_r>:
 8000a14:	690b      	ldr	r3, [r1, #16]
 8000a16:	b570      	push	{r4, r5, r6, lr}
 8000a18:	0005      	movs	r5, r0
 8000a1a:	000c      	movs	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_fflush_r+0x12>
 8000a20:	2500      	movs	r5, #0
 8000a22:	0028      	movs	r0, r5
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d004      	beq.n	8000a34 <_fflush_r+0x20>
 8000a2a:	6983      	ldr	r3, [r0, #24]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <_fflush_r+0x20>
 8000a30:	f000 f892 	bl	8000b58 <__sinit>
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <_fflush_r+0x74>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d11b      	bne.n	8000a72 <_fflush_r+0x5e>
 8000a3a:	686c      	ldr	r4, [r5, #4]
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	5ea3      	ldrsh	r3, [r4, r2]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0ed      	beq.n	8000a20 <_fflush_r+0xc>
 8000a44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a46:	07d2      	lsls	r2, r2, #31
 8000a48:	d404      	bmi.n	8000a54 <_fflush_r+0x40>
 8000a4a:	059b      	lsls	r3, r3, #22
 8000a4c:	d402      	bmi.n	8000a54 <_fflush_r+0x40>
 8000a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a50:	f000 f923 	bl	8000c9a <__retarget_lock_acquire_recursive>
 8000a54:	0028      	movs	r0, r5
 8000a56:	0021      	movs	r1, r4
 8000a58:	f7ff ff50 	bl	80008fc <__sflush_r>
 8000a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a5e:	0005      	movs	r5, r0
 8000a60:	07db      	lsls	r3, r3, #31
 8000a62:	d4de      	bmi.n	8000a22 <_fflush_r+0xe>
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	059b      	lsls	r3, r3, #22
 8000a68:	d4db      	bmi.n	8000a22 <_fflush_r+0xe>
 8000a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a6c:	f000 f916 	bl	8000c9c <__retarget_lock_release_recursive>
 8000a70:	e7d7      	b.n	8000a22 <_fflush_r+0xe>
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <_fflush_r+0x78>)
 8000a74:	429c      	cmp	r4, r3
 8000a76:	d101      	bne.n	8000a7c <_fflush_r+0x68>
 8000a78:	68ac      	ldr	r4, [r5, #8]
 8000a7a:	e7df      	b.n	8000a3c <_fflush_r+0x28>
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <_fflush_r+0x7c>)
 8000a7e:	429c      	cmp	r4, r3
 8000a80:	d1dc      	bne.n	8000a3c <_fflush_r+0x28>
 8000a82:	68ec      	ldr	r4, [r5, #12]
 8000a84:	e7da      	b.n	8000a3c <_fflush_r+0x28>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	080010ec 	.word	0x080010ec
 8000a8c:	0800110c 	.word	0x0800110c
 8000a90:	080010cc 	.word	0x080010cc

08000a94 <std>:
 8000a94:	2300      	movs	r3, #0
 8000a96:	b510      	push	{r4, lr}
 8000a98:	0004      	movs	r4, r0
 8000a9a:	6003      	str	r3, [r0, #0]
 8000a9c:	6043      	str	r3, [r0, #4]
 8000a9e:	6083      	str	r3, [r0, #8]
 8000aa0:	8181      	strh	r1, [r0, #12]
 8000aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	81c2      	strh	r2, [r0, #14]
 8000aa8:	6103      	str	r3, [r0, #16]
 8000aaa:	6143      	str	r3, [r0, #20]
 8000aac:	6183      	str	r3, [r0, #24]
 8000aae:	2208      	movs	r2, #8
 8000ab0:	305c      	adds	r0, #92	; 0x5c
 8000ab2:	f7ff fdd1 	bl	8000658 <memset>
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <std+0x38>)
 8000ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <std+0x3c>)
 8000abc:	6224      	str	r4, [r4, #32]
 8000abe:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <std+0x40>)
 8000ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <std+0x44>)
 8000ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	08000eed 	.word	0x08000eed
 8000ad0:	08000f15 	.word	0x08000f15
 8000ad4:	08000f4d 	.word	0x08000f4d
 8000ad8:	08000f79 	.word	0x08000f79

08000adc <_cleanup_r>:
 8000adc:	b510      	push	{r4, lr}
 8000ade:	4902      	ldr	r1, [pc, #8]	; (8000ae8 <_cleanup_r+0xc>)
 8000ae0:	f000 f8ba 	bl	8000c58 <_fwalk_reent>
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	08000a15 	.word	0x08000a15

08000aec <__sfmoreglue>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2568      	movs	r5, #104	; 0x68
 8000af0:	1e4a      	subs	r2, r1, #1
 8000af2:	4355      	muls	r5, r2
 8000af4:	000e      	movs	r6, r1
 8000af6:	0029      	movs	r1, r5
 8000af8:	3174      	adds	r1, #116	; 0x74
 8000afa:	f000 f987 	bl	8000e0c <_malloc_r>
 8000afe:	1e04      	subs	r4, r0, #0
 8000b00:	d008      	beq.n	8000b14 <__sfmoreglue+0x28>
 8000b02:	2100      	movs	r1, #0
 8000b04:	002a      	movs	r2, r5
 8000b06:	6001      	str	r1, [r0, #0]
 8000b08:	6046      	str	r6, [r0, #4]
 8000b0a:	300c      	adds	r0, #12
 8000b0c:	60a0      	str	r0, [r4, #8]
 8000b0e:	3268      	adds	r2, #104	; 0x68
 8000b10:	f7ff fda2 	bl	8000658 <memset>
 8000b14:	0020      	movs	r0, r4
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <__sfp_lock_acquire>:
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <__sfp_lock_acquire+0xc>)
 8000b1c:	f000 f8bd 	bl	8000c9a <__retarget_lock_acquire_recursive>
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000098 	.word	0x20000098

08000b28 <__sfp_lock_release>:
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <__sfp_lock_release+0xc>)
 8000b2c:	f000 f8b6 	bl	8000c9c <__retarget_lock_release_recursive>
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000098 	.word	0x20000098

08000b38 <__sinit_lock_acquire>:
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <__sinit_lock_acquire+0xc>)
 8000b3c:	f000 f8ad 	bl	8000c9a <__retarget_lock_acquire_recursive>
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000093 	.word	0x20000093

08000b48 <__sinit_lock_release>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4802      	ldr	r0, [pc, #8]	; (8000b54 <__sinit_lock_release+0xc>)
 8000b4c:	f000 f8a6 	bl	8000c9c <__retarget_lock_release_recursive>
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000093 	.word	0x20000093

08000b58 <__sinit>:
 8000b58:	b513      	push	{r0, r1, r4, lr}
 8000b5a:	0004      	movs	r4, r0
 8000b5c:	f7ff ffec 	bl	8000b38 <__sinit_lock_acquire>
 8000b60:	69a3      	ldr	r3, [r4, #24]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <__sinit+0x14>
 8000b66:	f7ff ffef 	bl	8000b48 <__sinit_lock_release>
 8000b6a:	bd13      	pop	{r0, r1, r4, pc}
 8000b6c:	64a3      	str	r3, [r4, #72]	; 0x48
 8000b6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000b70:	6523      	str	r3, [r4, #80]	; 0x50
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <__sinit+0x68>)
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <__sinit+0x6c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d101      	bne.n	8000b84 <__sinit+0x2c>
 8000b80:	2301      	movs	r3, #1
 8000b82:	61a3      	str	r3, [r4, #24]
 8000b84:	0020      	movs	r0, r4
 8000b86:	f000 f81f 	bl	8000bc8 <__sfp>
 8000b8a:	6060      	str	r0, [r4, #4]
 8000b8c:	0020      	movs	r0, r4
 8000b8e:	f000 f81b 	bl	8000bc8 <__sfp>
 8000b92:	60a0      	str	r0, [r4, #8]
 8000b94:	0020      	movs	r0, r4
 8000b96:	f000 f817 	bl	8000bc8 <__sfp>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	60e0      	str	r0, [r4, #12]
 8000ba0:	6860      	ldr	r0, [r4, #4]
 8000ba2:	f7ff ff77 	bl	8000a94 <std>
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2109      	movs	r1, #9
 8000baa:	68a0      	ldr	r0, [r4, #8]
 8000bac:	f7ff ff72 	bl	8000a94 <std>
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	2112      	movs	r1, #18
 8000bb4:	68e0      	ldr	r0, [r4, #12]
 8000bb6:	f7ff ff6d 	bl	8000a94 <std>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61a3      	str	r3, [r4, #24]
 8000bbe:	e7d2      	b.n	8000b66 <__sinit+0xe>
 8000bc0:	080010c8 	.word	0x080010c8
 8000bc4:	08000add 	.word	0x08000add

08000bc8 <__sfp>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	0007      	movs	r7, r0
 8000bcc:	f7ff ffa4 	bl	8000b18 <__sfp_lock_acquire>
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <__sfp+0x88>)
 8000bd2:	681e      	ldr	r6, [r3, #0]
 8000bd4:	69b3      	ldr	r3, [r6, #24]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <__sfp+0x18>
 8000bda:	0030      	movs	r0, r6
 8000bdc:	f7ff ffbc 	bl	8000b58 <__sinit>
 8000be0:	3648      	adds	r6, #72	; 0x48
 8000be2:	68b4      	ldr	r4, [r6, #8]
 8000be4:	6873      	ldr	r3, [r6, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	d504      	bpl.n	8000bf4 <__sfp+0x2c>
 8000bea:	6833      	ldr	r3, [r6, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d022      	beq.n	8000c36 <__sfp+0x6e>
 8000bf0:	6836      	ldr	r6, [r6, #0]
 8000bf2:	e7f6      	b.n	8000be2 <__sfp+0x1a>
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	5ea5      	ldrsh	r5, [r4, r2]
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d11a      	bne.n	8000c32 <__sfp+0x6a>
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <__sfp+0x8c>)
 8000c00:	3058      	adds	r0, #88	; 0x58
 8000c02:	60e3      	str	r3, [r4, #12]
 8000c04:	6665      	str	r5, [r4, #100]	; 0x64
 8000c06:	f000 f847 	bl	8000c98 <__retarget_lock_init_recursive>
 8000c0a:	f7ff ff8d 	bl	8000b28 <__sfp_lock_release>
 8000c0e:	0020      	movs	r0, r4
 8000c10:	2208      	movs	r2, #8
 8000c12:	0029      	movs	r1, r5
 8000c14:	6025      	str	r5, [r4, #0]
 8000c16:	60a5      	str	r5, [r4, #8]
 8000c18:	6065      	str	r5, [r4, #4]
 8000c1a:	6125      	str	r5, [r4, #16]
 8000c1c:	6165      	str	r5, [r4, #20]
 8000c1e:	61a5      	str	r5, [r4, #24]
 8000c20:	305c      	adds	r0, #92	; 0x5c
 8000c22:	f7ff fd19 	bl	8000658 <memset>
 8000c26:	6365      	str	r5, [r4, #52]	; 0x34
 8000c28:	63a5      	str	r5, [r4, #56]	; 0x38
 8000c2a:	64a5      	str	r5, [r4, #72]	; 0x48
 8000c2c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000c2e:	0020      	movs	r0, r4
 8000c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c32:	3468      	adds	r4, #104	; 0x68
 8000c34:	e7d7      	b.n	8000be6 <__sfp+0x1e>
 8000c36:	2104      	movs	r1, #4
 8000c38:	0038      	movs	r0, r7
 8000c3a:	f7ff ff57 	bl	8000aec <__sfmoreglue>
 8000c3e:	1e04      	subs	r4, r0, #0
 8000c40:	6030      	str	r0, [r6, #0]
 8000c42:	d1d5      	bne.n	8000bf0 <__sfp+0x28>
 8000c44:	f7ff ff70 	bl	8000b28 <__sfp_lock_release>
 8000c48:	230c      	movs	r3, #12
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	e7ef      	b.n	8000c2e <__sfp+0x66>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	080010c8 	.word	0x080010c8
 8000c54:	ffff0001 	.word	0xffff0001

08000c58 <_fwalk_reent>:
 8000c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c5a:	0004      	movs	r4, r0
 8000c5c:	0006      	movs	r6, r0
 8000c5e:	2700      	movs	r7, #0
 8000c60:	9101      	str	r1, [sp, #4]
 8000c62:	3448      	adds	r4, #72	; 0x48
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	68a5      	ldr	r5, [r4, #8]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	9b00      	ldr	r3, [sp, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	d504      	bpl.n	8000c7c <_fwalk_reent+0x24>
 8000c72:	6824      	ldr	r4, [r4, #0]
 8000c74:	2c00      	cmp	r4, #0
 8000c76:	d1f5      	bne.n	8000c64 <_fwalk_reent+0xc>
 8000c78:	0038      	movs	r0, r7
 8000c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000c7c:	89ab      	ldrh	r3, [r5, #12]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d908      	bls.n	8000c94 <_fwalk_reent+0x3c>
 8000c82:	220e      	movs	r2, #14
 8000c84:	5eab      	ldrsh	r3, [r5, r2]
 8000c86:	3301      	adds	r3, #1
 8000c88:	d004      	beq.n	8000c94 <_fwalk_reent+0x3c>
 8000c8a:	0029      	movs	r1, r5
 8000c8c:	0030      	movs	r0, r6
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	4798      	blx	r3
 8000c92:	4307      	orrs	r7, r0
 8000c94:	3568      	adds	r5, #104	; 0x68
 8000c96:	e7e8      	b.n	8000c6a <_fwalk_reent+0x12>

08000c98 <__retarget_lock_init_recursive>:
 8000c98:	4770      	bx	lr

08000c9a <__retarget_lock_acquire_recursive>:
 8000c9a:	4770      	bx	lr

08000c9c <__retarget_lock_release_recursive>:
 8000c9c:	4770      	bx	lr
	...

08000ca0 <__swhatbuf_r>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	000e      	movs	r6, r1
 8000ca4:	001d      	movs	r5, r3
 8000ca6:	230e      	movs	r3, #14
 8000ca8:	5ec9      	ldrsh	r1, [r1, r3]
 8000caa:	0014      	movs	r4, r2
 8000cac:	b096      	sub	sp, #88	; 0x58
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	da07      	bge.n	8000cc2 <__swhatbuf_r+0x22>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	602b      	str	r3, [r5, #0]
 8000cb6:	89b3      	ldrh	r3, [r6, #12]
 8000cb8:	061b      	lsls	r3, r3, #24
 8000cba:	d411      	bmi.n	8000ce0 <__swhatbuf_r+0x40>
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	e00f      	b.n	8000ce2 <__swhatbuf_r+0x42>
 8000cc2:	466a      	mov	r2, sp
 8000cc4:	f000 f984 	bl	8000fd0 <_fstat_r>
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	dbf2      	blt.n	8000cb2 <__swhatbuf_r+0x12>
 8000ccc:	23f0      	movs	r3, #240	; 0xf0
 8000cce:	9901      	ldr	r1, [sp, #4]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	4019      	ands	r1, r3
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <__swhatbuf_r+0x4c>)
 8000cd6:	18c9      	adds	r1, r1, r3
 8000cd8:	424b      	negs	r3, r1
 8000cda:	4159      	adcs	r1, r3
 8000cdc:	6029      	str	r1, [r5, #0]
 8000cde:	e7ed      	b.n	8000cbc <__swhatbuf_r+0x1c>
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	b016      	add	sp, #88	; 0x58
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	ffffe000 	.word	0xffffe000

08000cf0 <__smakebuf_r>:
 8000cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cf2:	2602      	movs	r6, #2
 8000cf4:	898b      	ldrh	r3, [r1, #12]
 8000cf6:	0005      	movs	r5, r0
 8000cf8:	000c      	movs	r4, r1
 8000cfa:	4233      	tst	r3, r6
 8000cfc:	d006      	beq.n	8000d0c <__smakebuf_r+0x1c>
 8000cfe:	0023      	movs	r3, r4
 8000d00:	3347      	adds	r3, #71	; 0x47
 8000d02:	6023      	str	r3, [r4, #0]
 8000d04:	6123      	str	r3, [r4, #16]
 8000d06:	2301      	movs	r3, #1
 8000d08:	6163      	str	r3, [r4, #20]
 8000d0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000d0c:	466a      	mov	r2, sp
 8000d0e:	ab01      	add	r3, sp, #4
 8000d10:	f7ff ffc6 	bl	8000ca0 <__swhatbuf_r>
 8000d14:	9900      	ldr	r1, [sp, #0]
 8000d16:	0007      	movs	r7, r0
 8000d18:	0028      	movs	r0, r5
 8000d1a:	f000 f877 	bl	8000e0c <_malloc_r>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d108      	bne.n	8000d34 <__smakebuf_r+0x44>
 8000d22:	220c      	movs	r2, #12
 8000d24:	5ea3      	ldrsh	r3, [r4, r2]
 8000d26:	059a      	lsls	r2, r3, #22
 8000d28:	d4ef      	bmi.n	8000d0a <__smakebuf_r+0x1a>
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	431e      	orrs	r6, r3
 8000d30:	81a6      	strh	r6, [r4, #12]
 8000d32:	e7e4      	b.n	8000cfe <__smakebuf_r+0xe>
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <__smakebuf_r+0x84>)
 8000d36:	62ab      	str	r3, [r5, #40]	; 0x28
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	89a2      	ldrh	r2, [r4, #12]
 8000d3c:	6020      	str	r0, [r4, #0]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	81a3      	strh	r3, [r4, #12]
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	6120      	str	r0, [r4, #16]
 8000d46:	6163      	str	r3, [r4, #20]
 8000d48:	9b01      	ldr	r3, [sp, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00d      	beq.n	8000d6a <__smakebuf_r+0x7a>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	230e      	movs	r3, #14
 8000d52:	5ee1      	ldrsh	r1, [r4, r3]
 8000d54:	f000 f94e 	bl	8000ff4 <_isatty_r>
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d006      	beq.n	8000d6a <__smakebuf_r+0x7a>
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	89a3      	ldrh	r3, [r4, #12]
 8000d60:	4393      	bics	r3, r2
 8000d62:	001a      	movs	r2, r3
 8000d64:	2301      	movs	r3, #1
 8000d66:	4313      	orrs	r3, r2
 8000d68:	81a3      	strh	r3, [r4, #12]
 8000d6a:	89a0      	ldrh	r0, [r4, #12]
 8000d6c:	4307      	orrs	r7, r0
 8000d6e:	81a7      	strh	r7, [r4, #12]
 8000d70:	e7cb      	b.n	8000d0a <__smakebuf_r+0x1a>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	08000add 	.word	0x08000add

08000d78 <_free_r>:
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	0005      	movs	r5, r0
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d010      	beq.n	8000da2 <_free_r+0x2a>
 8000d80:	1f0c      	subs	r4, r1, #4
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da00      	bge.n	8000d8a <_free_r+0x12>
 8000d88:	18e4      	adds	r4, r4, r3
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	f000 f958 	bl	8001040 <__malloc_lock>
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <_free_r+0x90>)
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <_free_r+0x2c>
 8000d98:	6063      	str	r3, [r4, #4]
 8000d9a:	6014      	str	r4, [r2, #0]
 8000d9c:	0028      	movs	r0, r5
 8000d9e:	f000 f957 	bl	8001050 <__malloc_unlock>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <_free_r+0x42>
 8000da8:	6821      	ldr	r1, [r4, #0]
 8000daa:	1860      	adds	r0, r4, r1
 8000dac:	4283      	cmp	r3, r0
 8000dae:	d1f3      	bne.n	8000d98 <_free_r+0x20>
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	1841      	adds	r1, r0, r1
 8000db6:	6021      	str	r1, [r4, #0]
 8000db8:	e7ee      	b.n	8000d98 <_free_r+0x20>
 8000dba:	001a      	movs	r2, r3
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <_free_r+0x4e>
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	d9f9      	bls.n	8000dba <_free_r+0x42>
 8000dc6:	6811      	ldr	r1, [r2, #0]
 8000dc8:	1850      	adds	r0, r2, r1
 8000dca:	42a0      	cmp	r0, r4
 8000dcc:	d10b      	bne.n	8000de6 <_free_r+0x6e>
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	1809      	adds	r1, r1, r0
 8000dd2:	1850      	adds	r0, r2, r1
 8000dd4:	6011      	str	r1, [r2, #0]
 8000dd6:	4283      	cmp	r3, r0
 8000dd8:	d1e0      	bne.n	8000d9c <_free_r+0x24>
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	1841      	adds	r1, r0, r1
 8000de0:	6011      	str	r1, [r2, #0]
 8000de2:	6053      	str	r3, [r2, #4]
 8000de4:	e7da      	b.n	8000d9c <_free_r+0x24>
 8000de6:	42a0      	cmp	r0, r4
 8000de8:	d902      	bls.n	8000df0 <_free_r+0x78>
 8000dea:	230c      	movs	r3, #12
 8000dec:	602b      	str	r3, [r5, #0]
 8000dee:	e7d5      	b.n	8000d9c <_free_r+0x24>
 8000df0:	6821      	ldr	r1, [r4, #0]
 8000df2:	1860      	adds	r0, r4, r1
 8000df4:	4283      	cmp	r3, r0
 8000df6:	d103      	bne.n	8000e00 <_free_r+0x88>
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	1841      	adds	r1, r0, r1
 8000dfe:	6021      	str	r1, [r4, #0]
 8000e00:	6063      	str	r3, [r4, #4]
 8000e02:	6054      	str	r4, [r2, #4]
 8000e04:	e7ca      	b.n	8000d9c <_free_r+0x24>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000088 	.word	0x20000088

08000e0c <_malloc_r>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	2303      	movs	r3, #3
 8000e10:	1ccd      	adds	r5, r1, #3
 8000e12:	439d      	bics	r5, r3
 8000e14:	3508      	adds	r5, #8
 8000e16:	0006      	movs	r6, r0
 8000e18:	2d0c      	cmp	r5, #12
 8000e1a:	d21f      	bcs.n	8000e5c <_malloc_r+0x50>
 8000e1c:	250c      	movs	r5, #12
 8000e1e:	42a9      	cmp	r1, r5
 8000e20:	d81e      	bhi.n	8000e60 <_malloc_r+0x54>
 8000e22:	0030      	movs	r0, r6
 8000e24:	f000 f90c 	bl	8001040 <__malloc_lock>
 8000e28:	4925      	ldr	r1, [pc, #148]	; (8000ec0 <_malloc_r+0xb4>)
 8000e2a:	680a      	ldr	r2, [r1, #0]
 8000e2c:	0014      	movs	r4, r2
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	d11a      	bne.n	8000e68 <_malloc_r+0x5c>
 8000e32:	4f24      	ldr	r7, [pc, #144]	; (8000ec4 <_malloc_r+0xb8>)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d104      	bne.n	8000e44 <_malloc_r+0x38>
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	0030      	movs	r0, r6
 8000e3e:	f000 f843 	bl	8000ec8 <_sbrk_r>
 8000e42:	6038      	str	r0, [r7, #0]
 8000e44:	0029      	movs	r1, r5
 8000e46:	0030      	movs	r0, r6
 8000e48:	f000 f83e 	bl	8000ec8 <_sbrk_r>
 8000e4c:	1c43      	adds	r3, r0, #1
 8000e4e:	d12b      	bne.n	8000ea8 <_malloc_r+0x9c>
 8000e50:	230c      	movs	r3, #12
 8000e52:	0030      	movs	r0, r6
 8000e54:	6033      	str	r3, [r6, #0]
 8000e56:	f000 f8fb 	bl	8001050 <__malloc_unlock>
 8000e5a:	e003      	b.n	8000e64 <_malloc_r+0x58>
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	dade      	bge.n	8000e1e <_malloc_r+0x12>
 8000e60:	230c      	movs	r3, #12
 8000e62:	6033      	str	r3, [r6, #0]
 8000e64:	2000      	movs	r0, #0
 8000e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	1b5b      	subs	r3, r3, r5
 8000e6c:	d419      	bmi.n	8000ea2 <_malloc_r+0x96>
 8000e6e:	2b0b      	cmp	r3, #11
 8000e70:	d903      	bls.n	8000e7a <_malloc_r+0x6e>
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	18e4      	adds	r4, r4, r3
 8000e76:	6025      	str	r5, [r4, #0]
 8000e78:	e003      	b.n	8000e82 <_malloc_r+0x76>
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	42a2      	cmp	r2, r4
 8000e7e:	d10e      	bne.n	8000e9e <_malloc_r+0x92>
 8000e80:	600b      	str	r3, [r1, #0]
 8000e82:	0030      	movs	r0, r6
 8000e84:	f000 f8e4 	bl	8001050 <__malloc_unlock>
 8000e88:	0020      	movs	r0, r4
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	300b      	adds	r0, #11
 8000e8e:	1d23      	adds	r3, r4, #4
 8000e90:	4390      	bics	r0, r2
 8000e92:	1ac2      	subs	r2, r0, r3
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d0e6      	beq.n	8000e66 <_malloc_r+0x5a>
 8000e98:	1a1b      	subs	r3, r3, r0
 8000e9a:	50a3      	str	r3, [r4, r2]
 8000e9c:	e7e3      	b.n	8000e66 <_malloc_r+0x5a>
 8000e9e:	6053      	str	r3, [r2, #4]
 8000ea0:	e7ef      	b.n	8000e82 <_malloc_r+0x76>
 8000ea2:	0022      	movs	r2, r4
 8000ea4:	6864      	ldr	r4, [r4, #4]
 8000ea6:	e7c2      	b.n	8000e2e <_malloc_r+0x22>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	1cc4      	adds	r4, r0, #3
 8000eac:	439c      	bics	r4, r3
 8000eae:	42a0      	cmp	r0, r4
 8000eb0:	d0e1      	beq.n	8000e76 <_malloc_r+0x6a>
 8000eb2:	1a21      	subs	r1, r4, r0
 8000eb4:	0030      	movs	r0, r6
 8000eb6:	f000 f807 	bl	8000ec8 <_sbrk_r>
 8000eba:	1c43      	adds	r3, r0, #1
 8000ebc:	d1db      	bne.n	8000e76 <_malloc_r+0x6a>
 8000ebe:	e7c7      	b.n	8000e50 <_malloc_r+0x44>
 8000ec0:	20000088 	.word	0x20000088
 8000ec4:	2000008c 	.word	0x2000008c

08000ec8 <_sbrk_r>:
 8000ec8:	2300      	movs	r3, #0
 8000eca:	b570      	push	{r4, r5, r6, lr}
 8000ecc:	4d06      	ldr	r5, [pc, #24]	; (8000ee8 <_sbrk_r+0x20>)
 8000ece:	0004      	movs	r4, r0
 8000ed0:	0008      	movs	r0, r1
 8000ed2:	602b      	str	r3, [r5, #0]
 8000ed4:	f7ff fa3e 	bl	8000354 <_sbrk>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	d103      	bne.n	8000ee4 <_sbrk_r+0x1c>
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d000      	beq.n	8000ee4 <_sbrk_r+0x1c>
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	bd70      	pop	{r4, r5, r6, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	2000009c 	.word	0x2000009c

08000eec <__sread>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	000c      	movs	r4, r1
 8000ef0:	250e      	movs	r5, #14
 8000ef2:	5f49      	ldrsh	r1, [r1, r5]
 8000ef4:	f000 f8b4 	bl	8001060 <_read_r>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	db03      	blt.n	8000f04 <__sread+0x18>
 8000efc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000efe:	181b      	adds	r3, r3, r0
 8000f00:	6563      	str	r3, [r4, #84]	; 0x54
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	89a3      	ldrh	r3, [r4, #12]
 8000f06:	4a02      	ldr	r2, [pc, #8]	; (8000f10 <__sread+0x24>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	e7f9      	b.n	8000f02 <__sread+0x16>
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	ffffefff 	.word	0xffffefff

08000f14 <__swrite>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	001f      	movs	r7, r3
 8000f18:	898b      	ldrh	r3, [r1, #12]
 8000f1a:	0005      	movs	r5, r0
 8000f1c:	000c      	movs	r4, r1
 8000f1e:	0016      	movs	r6, r2
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	d505      	bpl.n	8000f30 <__swrite+0x1c>
 8000f24:	230e      	movs	r3, #14
 8000f26:	5ec9      	ldrsh	r1, [r1, r3]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f000 f874 	bl	8001018 <_lseek_r>
 8000f30:	89a3      	ldrh	r3, [r4, #12]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <__swrite+0x34>)
 8000f34:	0028      	movs	r0, r5
 8000f36:	4013      	ands	r3, r2
 8000f38:	81a3      	strh	r3, [r4, #12]
 8000f3a:	0032      	movs	r2, r6
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	5ee1      	ldrsh	r1, [r4, r3]
 8000f40:	003b      	movs	r3, r7
 8000f42:	f000 f81f 	bl	8000f84 <_write_r>
 8000f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f48:	ffffefff 	.word	0xffffefff

08000f4c <__sseek>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	000c      	movs	r4, r1
 8000f50:	250e      	movs	r5, #14
 8000f52:	5f49      	ldrsh	r1, [r1, r5]
 8000f54:	f000 f860 	bl	8001018 <_lseek_r>
 8000f58:	89a3      	ldrh	r3, [r4, #12]
 8000f5a:	1c42      	adds	r2, r0, #1
 8000f5c:	d103      	bne.n	8000f66 <__sseek+0x1a>
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <__sseek+0x28>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	81a3      	strh	r3, [r4, #12]
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0152      	lsls	r2, r2, #5
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	81a3      	strh	r3, [r4, #12]
 8000f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8000f70:	e7f8      	b.n	8000f64 <__sseek+0x18>
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	ffffefff 	.word	0xffffefff

08000f78 <__sclose>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	230e      	movs	r3, #14
 8000f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8000f7e:	f000 f815 	bl	8000fac <_close_r>
 8000f82:	bd10      	pop	{r4, pc}

08000f84 <_write_r>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	0004      	movs	r4, r0
 8000f88:	0008      	movs	r0, r1
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2300      	movs	r3, #0
 8000f90:	4d05      	ldr	r5, [pc, #20]	; (8000fa8 <_write_r+0x24>)
 8000f92:	602b      	str	r3, [r5, #0]
 8000f94:	f7ff f995 	bl	80002c2 <_write>
 8000f98:	1c43      	adds	r3, r0, #1
 8000f9a:	d103      	bne.n	8000fa4 <_write_r+0x20>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d000      	beq.n	8000fa4 <_write_r+0x20>
 8000fa2:	6023      	str	r3, [r4, #0]
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	2000009c 	.word	0x2000009c

08000fac <_close_r>:
 8000fac:	2300      	movs	r3, #0
 8000fae:	b570      	push	{r4, r5, r6, lr}
 8000fb0:	4d06      	ldr	r5, [pc, #24]	; (8000fcc <_close_r+0x20>)
 8000fb2:	0004      	movs	r4, r0
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f7ff f99f 	bl	80002fa <_close>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d103      	bne.n	8000fc8 <_close_r+0x1c>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d000      	beq.n	8000fc8 <_close_r+0x1c>
 8000fc6:	6023      	str	r3, [r4, #0]
 8000fc8:	bd70      	pop	{r4, r5, r6, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	2000009c 	.word	0x2000009c

08000fd0 <_fstat_r>:
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	b570      	push	{r4, r5, r6, lr}
 8000fd4:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <_fstat_r+0x20>)
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	0008      	movs	r0, r1
 8000fda:	0011      	movs	r1, r2
 8000fdc:	602b      	str	r3, [r5, #0]
 8000fde:	f7ff f996 	bl	800030e <_fstat>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	d103      	bne.n	8000fee <_fstat_r+0x1e>
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d000      	beq.n	8000fee <_fstat_r+0x1e>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
 8000ff0:	2000009c 	.word	0x2000009c

08000ff4 <_isatty_r>:
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	b570      	push	{r4, r5, r6, lr}
 8000ff8:	4d06      	ldr	r5, [pc, #24]	; (8001014 <_isatty_r+0x20>)
 8000ffa:	0004      	movs	r4, r0
 8000ffc:	0008      	movs	r0, r1
 8000ffe:	602b      	str	r3, [r5, #0]
 8001000:	f7ff f993 	bl	800032a <_isatty>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d103      	bne.n	8001010 <_isatty_r+0x1c>
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d000      	beq.n	8001010 <_isatty_r+0x1c>
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	bd70      	pop	{r4, r5, r6, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	2000009c 	.word	0x2000009c

08001018 <_lseek_r>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	0004      	movs	r4, r0
 800101c:	0008      	movs	r0, r1
 800101e:	0011      	movs	r1, r2
 8001020:	001a      	movs	r2, r3
 8001022:	2300      	movs	r3, #0
 8001024:	4d05      	ldr	r5, [pc, #20]	; (800103c <_lseek_r+0x24>)
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff f988 	bl	800033c <_lseek>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d103      	bne.n	8001038 <_lseek_r+0x20>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d000      	beq.n	8001038 <_lseek_r+0x20>
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	2000009c 	.word	0x2000009c

08001040 <__malloc_lock>:
 8001040:	b510      	push	{r4, lr}
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <__malloc_lock+0xc>)
 8001044:	f7ff fe29 	bl	8000c9a <__retarget_lock_acquire_recursive>
 8001048:	bd10      	pop	{r4, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000094 	.word	0x20000094

08001050 <__malloc_unlock>:
 8001050:	b510      	push	{r4, lr}
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <__malloc_unlock+0xc>)
 8001054:	f7ff fe22 	bl	8000c9c <__retarget_lock_release_recursive>
 8001058:	bd10      	pop	{r4, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000094 	.word	0x20000094

08001060 <_read_r>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	0004      	movs	r4, r0
 8001064:	0008      	movs	r0, r1
 8001066:	0011      	movs	r1, r2
 8001068:	001a      	movs	r2, r3
 800106a:	2300      	movs	r3, #0
 800106c:	4d05      	ldr	r5, [pc, #20]	; (8001084 <_read_r+0x24>)
 800106e:	602b      	str	r3, [r5, #0]
 8001070:	f7ff f90a 	bl	8000288 <_read>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d103      	bne.n	8001080 <_read_r+0x20>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d000      	beq.n	8001080 <_read_r+0x20>
 800107e:	6023      	str	r3, [r4, #0]
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	2000009c 	.word	0x2000009c

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
