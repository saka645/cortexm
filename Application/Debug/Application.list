
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  080400c0  080400c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08042f30  08042f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043024  08043024  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08043024  08043024  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08043024  08043024  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043024  08043024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043028  08043028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0804302c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000074  080430a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080430a0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a14  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001814  00000000  00000000  00029ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010721  00000000  00000000  0002bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b25  00000000  00000000  0003c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e5f8  00000000  00000000  00045176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a376e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d38  00000000  00000000  000a37c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080400c0 <__do_global_dtors_aux>:
 80400c0:	b510      	push	{r4, lr}
 80400c2:	4c06      	ldr	r4, [pc, #24]	; (80400dc <__do_global_dtors_aux+0x1c>)
 80400c4:	7823      	ldrb	r3, [r4, #0]
 80400c6:	2b00      	cmp	r3, #0
 80400c8:	d107      	bne.n	80400da <__do_global_dtors_aux+0x1a>
 80400ca:	4b05      	ldr	r3, [pc, #20]	; (80400e0 <__do_global_dtors_aux+0x20>)
 80400cc:	2b00      	cmp	r3, #0
 80400ce:	d002      	beq.n	80400d6 <__do_global_dtors_aux+0x16>
 80400d0:	4804      	ldr	r0, [pc, #16]	; (80400e4 <__do_global_dtors_aux+0x24>)
 80400d2:	e000      	b.n	80400d6 <__do_global_dtors_aux+0x16>
 80400d4:	bf00      	nop
 80400d6:	2301      	movs	r3, #1
 80400d8:	7023      	strb	r3, [r4, #0]
 80400da:	bd10      	pop	{r4, pc}
 80400dc:	20000074 	.word	0x20000074
 80400e0:	00000000 	.word	0x00000000
 80400e4:	08042f18 	.word	0x08042f18

080400e8 <frame_dummy>:
 80400e8:	4b04      	ldr	r3, [pc, #16]	; (80400fc <frame_dummy+0x14>)
 80400ea:	b510      	push	{r4, lr}
 80400ec:	2b00      	cmp	r3, #0
 80400ee:	d003      	beq.n	80400f8 <frame_dummy+0x10>
 80400f0:	4903      	ldr	r1, [pc, #12]	; (8040100 <frame_dummy+0x18>)
 80400f2:	4804      	ldr	r0, [pc, #16]	; (8040104 <frame_dummy+0x1c>)
 80400f4:	e000      	b.n	80400f8 <frame_dummy+0x10>
 80400f6:	bf00      	nop
 80400f8:	bd10      	pop	{r4, pc}
 80400fa:	46c0      	nop			; (mov r8, r8)
 80400fc:	00000000 	.word	0x00000000
 8040100:	20000078 	.word	0x20000078
 8040104:	08042f18 	.word	0x08042f18

08040108 <__gnu_thumb1_case_shi>:
 8040108:	b403      	push	{r0, r1}
 804010a:	4671      	mov	r1, lr
 804010c:	0849      	lsrs	r1, r1, #1
 804010e:	0040      	lsls	r0, r0, #1
 8040110:	0049      	lsls	r1, r1, #1
 8040112:	5e09      	ldrsh	r1, [r1, r0]
 8040114:	0049      	lsls	r1, r1, #1
 8040116:	448e      	add	lr, r1
 8040118:	bc03      	pop	{r0, r1}
 804011a:	4770      	bx	lr

0804011c <__udivsi3>:
 804011c:	2200      	movs	r2, #0
 804011e:	0843      	lsrs	r3, r0, #1
 8040120:	428b      	cmp	r3, r1
 8040122:	d374      	bcc.n	804020e <__udivsi3+0xf2>
 8040124:	0903      	lsrs	r3, r0, #4
 8040126:	428b      	cmp	r3, r1
 8040128:	d35f      	bcc.n	80401ea <__udivsi3+0xce>
 804012a:	0a03      	lsrs	r3, r0, #8
 804012c:	428b      	cmp	r3, r1
 804012e:	d344      	bcc.n	80401ba <__udivsi3+0x9e>
 8040130:	0b03      	lsrs	r3, r0, #12
 8040132:	428b      	cmp	r3, r1
 8040134:	d328      	bcc.n	8040188 <__udivsi3+0x6c>
 8040136:	0c03      	lsrs	r3, r0, #16
 8040138:	428b      	cmp	r3, r1
 804013a:	d30d      	bcc.n	8040158 <__udivsi3+0x3c>
 804013c:	22ff      	movs	r2, #255	; 0xff
 804013e:	0209      	lsls	r1, r1, #8
 8040140:	ba12      	rev	r2, r2
 8040142:	0c03      	lsrs	r3, r0, #16
 8040144:	428b      	cmp	r3, r1
 8040146:	d302      	bcc.n	804014e <__udivsi3+0x32>
 8040148:	1212      	asrs	r2, r2, #8
 804014a:	0209      	lsls	r1, r1, #8
 804014c:	d065      	beq.n	804021a <__udivsi3+0xfe>
 804014e:	0b03      	lsrs	r3, r0, #12
 8040150:	428b      	cmp	r3, r1
 8040152:	d319      	bcc.n	8040188 <__udivsi3+0x6c>
 8040154:	e000      	b.n	8040158 <__udivsi3+0x3c>
 8040156:	0a09      	lsrs	r1, r1, #8
 8040158:	0bc3      	lsrs	r3, r0, #15
 804015a:	428b      	cmp	r3, r1
 804015c:	d301      	bcc.n	8040162 <__udivsi3+0x46>
 804015e:	03cb      	lsls	r3, r1, #15
 8040160:	1ac0      	subs	r0, r0, r3
 8040162:	4152      	adcs	r2, r2
 8040164:	0b83      	lsrs	r3, r0, #14
 8040166:	428b      	cmp	r3, r1
 8040168:	d301      	bcc.n	804016e <__udivsi3+0x52>
 804016a:	038b      	lsls	r3, r1, #14
 804016c:	1ac0      	subs	r0, r0, r3
 804016e:	4152      	adcs	r2, r2
 8040170:	0b43      	lsrs	r3, r0, #13
 8040172:	428b      	cmp	r3, r1
 8040174:	d301      	bcc.n	804017a <__udivsi3+0x5e>
 8040176:	034b      	lsls	r3, r1, #13
 8040178:	1ac0      	subs	r0, r0, r3
 804017a:	4152      	adcs	r2, r2
 804017c:	0b03      	lsrs	r3, r0, #12
 804017e:	428b      	cmp	r3, r1
 8040180:	d301      	bcc.n	8040186 <__udivsi3+0x6a>
 8040182:	030b      	lsls	r3, r1, #12
 8040184:	1ac0      	subs	r0, r0, r3
 8040186:	4152      	adcs	r2, r2
 8040188:	0ac3      	lsrs	r3, r0, #11
 804018a:	428b      	cmp	r3, r1
 804018c:	d301      	bcc.n	8040192 <__udivsi3+0x76>
 804018e:	02cb      	lsls	r3, r1, #11
 8040190:	1ac0      	subs	r0, r0, r3
 8040192:	4152      	adcs	r2, r2
 8040194:	0a83      	lsrs	r3, r0, #10
 8040196:	428b      	cmp	r3, r1
 8040198:	d301      	bcc.n	804019e <__udivsi3+0x82>
 804019a:	028b      	lsls	r3, r1, #10
 804019c:	1ac0      	subs	r0, r0, r3
 804019e:	4152      	adcs	r2, r2
 80401a0:	0a43      	lsrs	r3, r0, #9
 80401a2:	428b      	cmp	r3, r1
 80401a4:	d301      	bcc.n	80401aa <__udivsi3+0x8e>
 80401a6:	024b      	lsls	r3, r1, #9
 80401a8:	1ac0      	subs	r0, r0, r3
 80401aa:	4152      	adcs	r2, r2
 80401ac:	0a03      	lsrs	r3, r0, #8
 80401ae:	428b      	cmp	r3, r1
 80401b0:	d301      	bcc.n	80401b6 <__udivsi3+0x9a>
 80401b2:	020b      	lsls	r3, r1, #8
 80401b4:	1ac0      	subs	r0, r0, r3
 80401b6:	4152      	adcs	r2, r2
 80401b8:	d2cd      	bcs.n	8040156 <__udivsi3+0x3a>
 80401ba:	09c3      	lsrs	r3, r0, #7
 80401bc:	428b      	cmp	r3, r1
 80401be:	d301      	bcc.n	80401c4 <__udivsi3+0xa8>
 80401c0:	01cb      	lsls	r3, r1, #7
 80401c2:	1ac0      	subs	r0, r0, r3
 80401c4:	4152      	adcs	r2, r2
 80401c6:	0983      	lsrs	r3, r0, #6
 80401c8:	428b      	cmp	r3, r1
 80401ca:	d301      	bcc.n	80401d0 <__udivsi3+0xb4>
 80401cc:	018b      	lsls	r3, r1, #6
 80401ce:	1ac0      	subs	r0, r0, r3
 80401d0:	4152      	adcs	r2, r2
 80401d2:	0943      	lsrs	r3, r0, #5
 80401d4:	428b      	cmp	r3, r1
 80401d6:	d301      	bcc.n	80401dc <__udivsi3+0xc0>
 80401d8:	014b      	lsls	r3, r1, #5
 80401da:	1ac0      	subs	r0, r0, r3
 80401dc:	4152      	adcs	r2, r2
 80401de:	0903      	lsrs	r3, r0, #4
 80401e0:	428b      	cmp	r3, r1
 80401e2:	d301      	bcc.n	80401e8 <__udivsi3+0xcc>
 80401e4:	010b      	lsls	r3, r1, #4
 80401e6:	1ac0      	subs	r0, r0, r3
 80401e8:	4152      	adcs	r2, r2
 80401ea:	08c3      	lsrs	r3, r0, #3
 80401ec:	428b      	cmp	r3, r1
 80401ee:	d301      	bcc.n	80401f4 <__udivsi3+0xd8>
 80401f0:	00cb      	lsls	r3, r1, #3
 80401f2:	1ac0      	subs	r0, r0, r3
 80401f4:	4152      	adcs	r2, r2
 80401f6:	0883      	lsrs	r3, r0, #2
 80401f8:	428b      	cmp	r3, r1
 80401fa:	d301      	bcc.n	8040200 <__udivsi3+0xe4>
 80401fc:	008b      	lsls	r3, r1, #2
 80401fe:	1ac0      	subs	r0, r0, r3
 8040200:	4152      	adcs	r2, r2
 8040202:	0843      	lsrs	r3, r0, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d301      	bcc.n	804020c <__udivsi3+0xf0>
 8040208:	004b      	lsls	r3, r1, #1
 804020a:	1ac0      	subs	r0, r0, r3
 804020c:	4152      	adcs	r2, r2
 804020e:	1a41      	subs	r1, r0, r1
 8040210:	d200      	bcs.n	8040214 <__udivsi3+0xf8>
 8040212:	4601      	mov	r1, r0
 8040214:	4152      	adcs	r2, r2
 8040216:	4610      	mov	r0, r2
 8040218:	4770      	bx	lr
 804021a:	e7ff      	b.n	804021c <__udivsi3+0x100>
 804021c:	b501      	push	{r0, lr}
 804021e:	2000      	movs	r0, #0
 8040220:	f000 f806 	bl	8040230 <__aeabi_idiv0>
 8040224:	bd02      	pop	{r1, pc}
 8040226:	46c0      	nop			; (mov r8, r8)

08040228 <__aeabi_uidivmod>:
 8040228:	2900      	cmp	r1, #0
 804022a:	d0f7      	beq.n	804021c <__udivsi3+0x100>
 804022c:	e776      	b.n	804011c <__udivsi3>
 804022e:	4770      	bx	lr

08040230 <__aeabi_idiv0>:
 8040230:	4770      	bx	lr
 8040232:	46c0      	nop			; (mov r8, r8)

08040234 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__

int __io_putchar(int ch)
{
 8040234:	b580      	push	{r7, lr}
 8040236:	b082      	sub	sp, #8
 8040238:	af00      	add	r7, sp, #0
 804023a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 804023c:	2301      	movs	r3, #1
 804023e:	425b      	negs	r3, r3
 8040240:	1d39      	adds	r1, r7, #4
 8040242:	4804      	ldr	r0, [pc, #16]	; (8040254 <__io_putchar+0x20>)
 8040244:	2201      	movs	r2, #1
 8040246:	f001 faed 	bl	8041824 <HAL_UART_Transmit>
}
 804024a:	46c0      	nop			; (mov r8, r8)
 804024c:	0018      	movs	r0, r3
 804024e:	46bd      	mov	sp, r7
 8040250:	b002      	add	sp, #8
 8040252:	bd80      	pop	{r7, pc}
 8040254:	2000009c 	.word	0x2000009c

08040258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040258:	b580      	push	{r7, lr}
 804025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804025c:	f000 fa70 	bl	8040740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040260:	f000 f826 	bl	80402b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040264:	f000 f8b6 	bl	80403d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040268:	f000 f884 	bl	8040374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("starting Application version:%d,%d\n",version[0],version[1]);
 804026c:	4b0d      	ldr	r3, [pc, #52]	; (80402a4 <main+0x4c>)
 804026e:	781b      	ldrb	r3, [r3, #0]
 8040270:	0019      	movs	r1, r3
 8040272:	4b0c      	ldr	r3, [pc, #48]	; (80402a4 <main+0x4c>)
 8040274:	785b      	ldrb	r3, [r3, #1]
 8040276:	001a      	movs	r2, r3
 8040278:	4b0b      	ldr	r3, [pc, #44]	; (80402a8 <main+0x50>)
 804027a:	0018      	movs	r0, r3
 804027c:	f001 feae 	bl	8041fdc <iprintf>
  HAL_Delay(2000);
 8040280:	23fa      	movs	r3, #250	; 0xfa
 8040282:	00db      	lsls	r3, r3, #3
 8040284:	0018      	movs	r0, r3
 8040286:	f000 fabf 	bl	8040808 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 804028a:	2380      	movs	r3, #128	; 0x80
 804028c:	009b      	lsls	r3, r3, #2
 804028e:	4a07      	ldr	r2, [pc, #28]	; (80402ac <main+0x54>)
 8040290:	0019      	movs	r1, r3
 8040292:	0010      	movs	r0, r2
 8040294:	f000 fd1d 	bl	8040cd2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8040298:	23fa      	movs	r3, #250	; 0xfa
 804029a:	009b      	lsls	r3, r3, #2
 804029c:	0018      	movs	r0, r3
 804029e:	f000 fab3 	bl	8040808 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80402a2:	e7f2      	b.n	804028a <main+0x32>
 80402a4:	20000000 	.word	0x20000000
 80402a8:	08042f30 	.word	0x08042f30
 80402ac:	48000800 	.word	0x48000800

080402b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80402b0:	b590      	push	{r4, r7, lr}
 80402b2:	b095      	sub	sp, #84	; 0x54
 80402b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80402b6:	2420      	movs	r4, #32
 80402b8:	193b      	adds	r3, r7, r4
 80402ba:	0018      	movs	r0, r3
 80402bc:	2330      	movs	r3, #48	; 0x30
 80402be:	001a      	movs	r2, r3
 80402c0:	2100      	movs	r1, #0
 80402c2:	f001 fe83 	bl	8041fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80402c6:	2310      	movs	r3, #16
 80402c8:	18fb      	adds	r3, r7, r3
 80402ca:	0018      	movs	r0, r3
 80402cc:	2310      	movs	r3, #16
 80402ce:	001a      	movs	r2, r3
 80402d0:	2100      	movs	r1, #0
 80402d2:	f001 fe7b 	bl	8041fcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80402d6:	003b      	movs	r3, r7
 80402d8:	0018      	movs	r0, r3
 80402da:	2310      	movs	r3, #16
 80402dc:	001a      	movs	r2, r3
 80402de:	2100      	movs	r1, #0
 80402e0:	f001 fe74 	bl	8041fcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80402e4:	0021      	movs	r1, r4
 80402e6:	187b      	adds	r3, r7, r1
 80402e8:	2202      	movs	r2, #2
 80402ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80402ec:	187b      	adds	r3, r7, r1
 80402ee:	2201      	movs	r2, #1
 80402f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80402f2:	187b      	adds	r3, r7, r1
 80402f4:	2210      	movs	r2, #16
 80402f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80402f8:	187b      	adds	r3, r7, r1
 80402fa:	2202      	movs	r2, #2
 80402fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80402fe:	187b      	adds	r3, r7, r1
 8040300:	2200      	movs	r2, #0
 8040302:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8040304:	187b      	adds	r3, r7, r1
 8040306:	22a0      	movs	r2, #160	; 0xa0
 8040308:	0392      	lsls	r2, r2, #14
 804030a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 804030c:	187b      	adds	r3, r7, r1
 804030e:	2200      	movs	r2, #0
 8040310:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040312:	187b      	adds	r3, r7, r1
 8040314:	0018      	movs	r0, r3
 8040316:	f000 fcf7 	bl	8040d08 <HAL_RCC_OscConfig>
 804031a:	1e03      	subs	r3, r0, #0
 804031c:	d001      	beq.n	8040322 <SystemClock_Config+0x72>
  {
    Error_Handler();
 804031e:	f000 f8b5 	bl	804048c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040322:	2110      	movs	r1, #16
 8040324:	187b      	adds	r3, r7, r1
 8040326:	2207      	movs	r2, #7
 8040328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804032a:	187b      	adds	r3, r7, r1
 804032c:	2202      	movs	r2, #2
 804032e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040330:	187b      	adds	r3, r7, r1
 8040332:	2200      	movs	r2, #0
 8040334:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040336:	187b      	adds	r3, r7, r1
 8040338:	2200      	movs	r2, #0
 804033a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 804033c:	187b      	adds	r3, r7, r1
 804033e:	2101      	movs	r1, #1
 8040340:	0018      	movs	r0, r3
 8040342:	f000 fffb 	bl	804133c <HAL_RCC_ClockConfig>
 8040346:	1e03      	subs	r3, r0, #0
 8040348:	d001      	beq.n	804034e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 804034a:	f000 f89f 	bl	804048c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 804034e:	003b      	movs	r3, r7
 8040350:	2201      	movs	r2, #1
 8040352:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8040354:	003b      	movs	r3, r7
 8040356:	2200      	movs	r2, #0
 8040358:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804035a:	003b      	movs	r3, r7
 804035c:	0018      	movs	r0, r3
 804035e:	f001 f93f 	bl	80415e0 <HAL_RCCEx_PeriphCLKConfig>
 8040362:	1e03      	subs	r3, r0, #0
 8040364:	d001      	beq.n	804036a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8040366:	f000 f891 	bl	804048c <Error_Handler>
  }
}
 804036a:	46c0      	nop			; (mov r8, r8)
 804036c:	46bd      	mov	sp, r7
 804036e:	b015      	add	sp, #84	; 0x54
 8040370:	bd90      	pop	{r4, r7, pc}
	...

08040374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040374:	b580      	push	{r7, lr}
 8040376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040378:	4b14      	ldr	r3, [pc, #80]	; (80403cc <MX_USART1_UART_Init+0x58>)
 804037a:	4a15      	ldr	r2, [pc, #84]	; (80403d0 <MX_USART1_UART_Init+0x5c>)
 804037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 804037e:	4b13      	ldr	r3, [pc, #76]	; (80403cc <MX_USART1_UART_Init+0x58>)
 8040380:	2296      	movs	r2, #150	; 0x96
 8040382:	0212      	lsls	r2, r2, #8
 8040384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040386:	4b11      	ldr	r3, [pc, #68]	; (80403cc <MX_USART1_UART_Init+0x58>)
 8040388:	2200      	movs	r2, #0
 804038a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 804038c:	4b0f      	ldr	r3, [pc, #60]	; (80403cc <MX_USART1_UART_Init+0x58>)
 804038e:	2200      	movs	r2, #0
 8040390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040392:	4b0e      	ldr	r3, [pc, #56]	; (80403cc <MX_USART1_UART_Init+0x58>)
 8040394:	2200      	movs	r2, #0
 8040396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040398:	4b0c      	ldr	r3, [pc, #48]	; (80403cc <MX_USART1_UART_Init+0x58>)
 804039a:	220c      	movs	r2, #12
 804039c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804039e:	4b0b      	ldr	r3, [pc, #44]	; (80403cc <MX_USART1_UART_Init+0x58>)
 80403a0:	2200      	movs	r2, #0
 80403a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80403a4:	4b09      	ldr	r3, [pc, #36]	; (80403cc <MX_USART1_UART_Init+0x58>)
 80403a6:	2200      	movs	r2, #0
 80403a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80403aa:	4b08      	ldr	r3, [pc, #32]	; (80403cc <MX_USART1_UART_Init+0x58>)
 80403ac:	2200      	movs	r2, #0
 80403ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80403b0:	4b06      	ldr	r3, [pc, #24]	; (80403cc <MX_USART1_UART_Init+0x58>)
 80403b2:	2200      	movs	r2, #0
 80403b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80403b6:	4b05      	ldr	r3, [pc, #20]	; (80403cc <MX_USART1_UART_Init+0x58>)
 80403b8:	0018      	movs	r0, r3
 80403ba:	f001 f9df 	bl	804177c <HAL_UART_Init>
 80403be:	1e03      	subs	r3, r0, #0
 80403c0:	d001      	beq.n	80403c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80403c2:	f000 f863 	bl	804048c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80403c6:	46c0      	nop			; (mov r8, r8)
 80403c8:	46bd      	mov	sp, r7
 80403ca:	bd80      	pop	{r7, pc}
 80403cc:	2000009c 	.word	0x2000009c
 80403d0:	40013800 	.word	0x40013800

080403d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80403d4:	b590      	push	{r4, r7, lr}
 80403d6:	b089      	sub	sp, #36	; 0x24
 80403d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80403da:	240c      	movs	r4, #12
 80403dc:	193b      	adds	r3, r7, r4
 80403de:	0018      	movs	r0, r3
 80403e0:	2314      	movs	r3, #20
 80403e2:	001a      	movs	r2, r3
 80403e4:	2100      	movs	r1, #0
 80403e6:	f001 fdf1 	bl	8041fcc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80403ea:	4b26      	ldr	r3, [pc, #152]	; (8040484 <MX_GPIO_Init+0xb0>)
 80403ec:	695a      	ldr	r2, [r3, #20]
 80403ee:	4b25      	ldr	r3, [pc, #148]	; (8040484 <MX_GPIO_Init+0xb0>)
 80403f0:	2180      	movs	r1, #128	; 0x80
 80403f2:	0289      	lsls	r1, r1, #10
 80403f4:	430a      	orrs	r2, r1
 80403f6:	615a      	str	r2, [r3, #20]
 80403f8:	4b22      	ldr	r3, [pc, #136]	; (8040484 <MX_GPIO_Init+0xb0>)
 80403fa:	695a      	ldr	r2, [r3, #20]
 80403fc:	2380      	movs	r3, #128	; 0x80
 80403fe:	029b      	lsls	r3, r3, #10
 8040400:	4013      	ands	r3, r2
 8040402:	60bb      	str	r3, [r7, #8]
 8040404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040406:	4b1f      	ldr	r3, [pc, #124]	; (8040484 <MX_GPIO_Init+0xb0>)
 8040408:	695a      	ldr	r2, [r3, #20]
 804040a:	4b1e      	ldr	r3, [pc, #120]	; (8040484 <MX_GPIO_Init+0xb0>)
 804040c:	2180      	movs	r1, #128	; 0x80
 804040e:	0309      	lsls	r1, r1, #12
 8040410:	430a      	orrs	r2, r1
 8040412:	615a      	str	r2, [r3, #20]
 8040414:	4b1b      	ldr	r3, [pc, #108]	; (8040484 <MX_GPIO_Init+0xb0>)
 8040416:	695a      	ldr	r2, [r3, #20]
 8040418:	2380      	movs	r3, #128	; 0x80
 804041a:	031b      	lsls	r3, r3, #12
 804041c:	4013      	ands	r3, r2
 804041e:	607b      	str	r3, [r7, #4]
 8040420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8040422:	23c0      	movs	r3, #192	; 0xc0
 8040424:	009b      	lsls	r3, r3, #2
 8040426:	4818      	ldr	r0, [pc, #96]	; (8040488 <MX_GPIO_Init+0xb4>)
 8040428:	2200      	movs	r2, #0
 804042a:	0019      	movs	r1, r3
 804042c:	f000 fc34 	bl	8040c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040430:	193b      	adds	r3, r7, r4
 8040432:	2201      	movs	r2, #1
 8040434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040436:	193b      	adds	r3, r7, r4
 8040438:	2290      	movs	r2, #144	; 0x90
 804043a:	0352      	lsls	r2, r2, #13
 804043c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804043e:	193b      	adds	r3, r7, r4
 8040440:	2200      	movs	r2, #0
 8040442:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040444:	193a      	adds	r2, r7, r4
 8040446:	2390      	movs	r3, #144	; 0x90
 8040448:	05db      	lsls	r3, r3, #23
 804044a:	0011      	movs	r1, r2
 804044c:	0018      	movs	r0, r3
 804044e:	f000 fab3 	bl	80409b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8040452:	0021      	movs	r1, r4
 8040454:	187b      	adds	r3, r7, r1
 8040456:	22c0      	movs	r2, #192	; 0xc0
 8040458:	0092      	lsls	r2, r2, #2
 804045a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804045c:	187b      	adds	r3, r7, r1
 804045e:	2201      	movs	r2, #1
 8040460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040462:	187b      	adds	r3, r7, r1
 8040464:	2200      	movs	r2, #0
 8040466:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040468:	187b      	adds	r3, r7, r1
 804046a:	2200      	movs	r2, #0
 804046c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804046e:	187b      	adds	r3, r7, r1
 8040470:	4a05      	ldr	r2, [pc, #20]	; (8040488 <MX_GPIO_Init+0xb4>)
 8040472:	0019      	movs	r1, r3
 8040474:	0010      	movs	r0, r2
 8040476:	f000 fa9f 	bl	80409b8 <HAL_GPIO_Init>

}
 804047a:	46c0      	nop			; (mov r8, r8)
 804047c:	46bd      	mov	sp, r7
 804047e:	b009      	add	sp, #36	; 0x24
 8040480:	bd90      	pop	{r4, r7, pc}
 8040482:	46c0      	nop			; (mov r8, r8)
 8040484:	40021000 	.word	0x40021000
 8040488:	48000800 	.word	0x48000800

0804048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804048c:	b580      	push	{r7, lr}
 804048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040490:	b672      	cpsid	i
}
 8040492:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040494:	e7fe      	b.n	8040494 <Error_Handler+0x8>
	...

08040498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040498:	b580      	push	{r7, lr}
 804049a:	b082      	sub	sp, #8
 804049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804049e:	4b0f      	ldr	r3, [pc, #60]	; (80404dc <HAL_MspInit+0x44>)
 80404a0:	699a      	ldr	r2, [r3, #24]
 80404a2:	4b0e      	ldr	r3, [pc, #56]	; (80404dc <HAL_MspInit+0x44>)
 80404a4:	2101      	movs	r1, #1
 80404a6:	430a      	orrs	r2, r1
 80404a8:	619a      	str	r2, [r3, #24]
 80404aa:	4b0c      	ldr	r3, [pc, #48]	; (80404dc <HAL_MspInit+0x44>)
 80404ac:	699b      	ldr	r3, [r3, #24]
 80404ae:	2201      	movs	r2, #1
 80404b0:	4013      	ands	r3, r2
 80404b2:	607b      	str	r3, [r7, #4]
 80404b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80404b6:	4b09      	ldr	r3, [pc, #36]	; (80404dc <HAL_MspInit+0x44>)
 80404b8:	69da      	ldr	r2, [r3, #28]
 80404ba:	4b08      	ldr	r3, [pc, #32]	; (80404dc <HAL_MspInit+0x44>)
 80404bc:	2180      	movs	r1, #128	; 0x80
 80404be:	0549      	lsls	r1, r1, #21
 80404c0:	430a      	orrs	r2, r1
 80404c2:	61da      	str	r2, [r3, #28]
 80404c4:	4b05      	ldr	r3, [pc, #20]	; (80404dc <HAL_MspInit+0x44>)
 80404c6:	69da      	ldr	r2, [r3, #28]
 80404c8:	2380      	movs	r3, #128	; 0x80
 80404ca:	055b      	lsls	r3, r3, #21
 80404cc:	4013      	ands	r3, r2
 80404ce:	603b      	str	r3, [r7, #0]
 80404d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80404d2:	46c0      	nop			; (mov r8, r8)
 80404d4:	46bd      	mov	sp, r7
 80404d6:	b002      	add	sp, #8
 80404d8:	bd80      	pop	{r7, pc}
 80404da:	46c0      	nop			; (mov r8, r8)
 80404dc:	40021000 	.word	0x40021000

080404e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80404e0:	b590      	push	{r4, r7, lr}
 80404e2:	b08b      	sub	sp, #44	; 0x2c
 80404e4:	af00      	add	r7, sp, #0
 80404e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80404e8:	2414      	movs	r4, #20
 80404ea:	193b      	adds	r3, r7, r4
 80404ec:	0018      	movs	r0, r3
 80404ee:	2314      	movs	r3, #20
 80404f0:	001a      	movs	r2, r3
 80404f2:	2100      	movs	r1, #0
 80404f4:	f001 fd6a 	bl	8041fcc <memset>
  if(huart->Instance==USART1)
 80404f8:	687b      	ldr	r3, [r7, #4]
 80404fa:	681b      	ldr	r3, [r3, #0]
 80404fc:	4a1d      	ldr	r2, [pc, #116]	; (8040574 <HAL_UART_MspInit+0x94>)
 80404fe:	4293      	cmp	r3, r2
 8040500:	d133      	bne.n	804056a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040502:	4b1d      	ldr	r3, [pc, #116]	; (8040578 <HAL_UART_MspInit+0x98>)
 8040504:	699a      	ldr	r2, [r3, #24]
 8040506:	4b1c      	ldr	r3, [pc, #112]	; (8040578 <HAL_UART_MspInit+0x98>)
 8040508:	2180      	movs	r1, #128	; 0x80
 804050a:	01c9      	lsls	r1, r1, #7
 804050c:	430a      	orrs	r2, r1
 804050e:	619a      	str	r2, [r3, #24]
 8040510:	4b19      	ldr	r3, [pc, #100]	; (8040578 <HAL_UART_MspInit+0x98>)
 8040512:	699a      	ldr	r2, [r3, #24]
 8040514:	2380      	movs	r3, #128	; 0x80
 8040516:	01db      	lsls	r3, r3, #7
 8040518:	4013      	ands	r3, r2
 804051a:	613b      	str	r3, [r7, #16]
 804051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804051e:	4b16      	ldr	r3, [pc, #88]	; (8040578 <HAL_UART_MspInit+0x98>)
 8040520:	695a      	ldr	r2, [r3, #20]
 8040522:	4b15      	ldr	r3, [pc, #84]	; (8040578 <HAL_UART_MspInit+0x98>)
 8040524:	2180      	movs	r1, #128	; 0x80
 8040526:	0289      	lsls	r1, r1, #10
 8040528:	430a      	orrs	r2, r1
 804052a:	615a      	str	r2, [r3, #20]
 804052c:	4b12      	ldr	r3, [pc, #72]	; (8040578 <HAL_UART_MspInit+0x98>)
 804052e:	695a      	ldr	r2, [r3, #20]
 8040530:	2380      	movs	r3, #128	; 0x80
 8040532:	029b      	lsls	r3, r3, #10
 8040534:	4013      	ands	r3, r2
 8040536:	60fb      	str	r3, [r7, #12]
 8040538:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 804053a:	193b      	adds	r3, r7, r4
 804053c:	22c0      	movs	r2, #192	; 0xc0
 804053e:	00d2      	lsls	r2, r2, #3
 8040540:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040542:	0021      	movs	r1, r4
 8040544:	187b      	adds	r3, r7, r1
 8040546:	2202      	movs	r2, #2
 8040548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804054a:	187b      	adds	r3, r7, r1
 804054c:	2200      	movs	r2, #0
 804054e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8040550:	187b      	adds	r3, r7, r1
 8040552:	2203      	movs	r2, #3
 8040554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8040556:	187b      	adds	r3, r7, r1
 8040558:	2201      	movs	r2, #1
 804055a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804055c:	187a      	adds	r2, r7, r1
 804055e:	2390      	movs	r3, #144	; 0x90
 8040560:	05db      	lsls	r3, r3, #23
 8040562:	0011      	movs	r1, r2
 8040564:	0018      	movs	r0, r3
 8040566:	f000 fa27 	bl	80409b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 804056a:	46c0      	nop			; (mov r8, r8)
 804056c:	46bd      	mov	sp, r7
 804056e:	b00b      	add	sp, #44	; 0x2c
 8040570:	bd90      	pop	{r4, r7, pc}
 8040572:	46c0      	nop			; (mov r8, r8)
 8040574:	40013800 	.word	0x40013800
 8040578:	40021000 	.word	0x40021000

0804057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 804057c:	b580      	push	{r7, lr}
 804057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040580:	e7fe      	b.n	8040580 <NMI_Handler+0x4>

08040582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040582:	b580      	push	{r7, lr}
 8040584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040586:	e7fe      	b.n	8040586 <HardFault_Handler+0x4>

08040588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040588:	b580      	push	{r7, lr}
 804058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 804058c:	46c0      	nop			; (mov r8, r8)
 804058e:	46bd      	mov	sp, r7
 8040590:	bd80      	pop	{r7, pc}

08040592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040592:	b580      	push	{r7, lr}
 8040594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040596:	46c0      	nop			; (mov r8, r8)
 8040598:	46bd      	mov	sp, r7
 804059a:	bd80      	pop	{r7, pc}

0804059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804059c:	b580      	push	{r7, lr}
 804059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80405a0:	f000 f916 	bl	80407d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80405a4:	46c0      	nop			; (mov r8, r8)
 80405a6:	46bd      	mov	sp, r7
 80405a8:	bd80      	pop	{r7, pc}

080405aa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80405aa:	b580      	push	{r7, lr}
 80405ac:	b086      	sub	sp, #24
 80405ae:	af00      	add	r7, sp, #0
 80405b0:	60f8      	str	r0, [r7, #12]
 80405b2:	60b9      	str	r1, [r7, #8]
 80405b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405b6:	2300      	movs	r3, #0
 80405b8:	617b      	str	r3, [r7, #20]
 80405ba:	e00a      	b.n	80405d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80405bc:	e000      	b.n	80405c0 <_read+0x16>
 80405be:	bf00      	nop
 80405c0:	0001      	movs	r1, r0
 80405c2:	68bb      	ldr	r3, [r7, #8]
 80405c4:	1c5a      	adds	r2, r3, #1
 80405c6:	60ba      	str	r2, [r7, #8]
 80405c8:	b2ca      	uxtb	r2, r1
 80405ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405cc:	697b      	ldr	r3, [r7, #20]
 80405ce:	3301      	adds	r3, #1
 80405d0:	617b      	str	r3, [r7, #20]
 80405d2:	697a      	ldr	r2, [r7, #20]
 80405d4:	687b      	ldr	r3, [r7, #4]
 80405d6:	429a      	cmp	r2, r3
 80405d8:	dbf0      	blt.n	80405bc <_read+0x12>
	}

return len;
 80405da:	687b      	ldr	r3, [r7, #4]
}
 80405dc:	0018      	movs	r0, r3
 80405de:	46bd      	mov	sp, r7
 80405e0:	b006      	add	sp, #24
 80405e2:	bd80      	pop	{r7, pc}

080405e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80405e4:	b580      	push	{r7, lr}
 80405e6:	b086      	sub	sp, #24
 80405e8:	af00      	add	r7, sp, #0
 80405ea:	60f8      	str	r0, [r7, #12]
 80405ec:	60b9      	str	r1, [r7, #8]
 80405ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405f0:	2300      	movs	r3, #0
 80405f2:	617b      	str	r3, [r7, #20]
 80405f4:	e009      	b.n	804060a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80405f6:	68bb      	ldr	r3, [r7, #8]
 80405f8:	1c5a      	adds	r2, r3, #1
 80405fa:	60ba      	str	r2, [r7, #8]
 80405fc:	781b      	ldrb	r3, [r3, #0]
 80405fe:	0018      	movs	r0, r3
 8040600:	f7ff fe18 	bl	8040234 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040604:	697b      	ldr	r3, [r7, #20]
 8040606:	3301      	adds	r3, #1
 8040608:	617b      	str	r3, [r7, #20]
 804060a:	697a      	ldr	r2, [r7, #20]
 804060c:	687b      	ldr	r3, [r7, #4]
 804060e:	429a      	cmp	r2, r3
 8040610:	dbf1      	blt.n	80405f6 <_write+0x12>
	}
	return len;
 8040612:	687b      	ldr	r3, [r7, #4]
}
 8040614:	0018      	movs	r0, r3
 8040616:	46bd      	mov	sp, r7
 8040618:	b006      	add	sp, #24
 804061a:	bd80      	pop	{r7, pc}

0804061c <_close>:

int _close(int file)
{
 804061c:	b580      	push	{r7, lr}
 804061e:	b082      	sub	sp, #8
 8040620:	af00      	add	r7, sp, #0
 8040622:	6078      	str	r0, [r7, #4]
	return -1;
 8040624:	2301      	movs	r3, #1
 8040626:	425b      	negs	r3, r3
}
 8040628:	0018      	movs	r0, r3
 804062a:	46bd      	mov	sp, r7
 804062c:	b002      	add	sp, #8
 804062e:	bd80      	pop	{r7, pc}

08040630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040630:	b580      	push	{r7, lr}
 8040632:	b082      	sub	sp, #8
 8040634:	af00      	add	r7, sp, #0
 8040636:	6078      	str	r0, [r7, #4]
 8040638:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 804063a:	683b      	ldr	r3, [r7, #0]
 804063c:	2280      	movs	r2, #128	; 0x80
 804063e:	0192      	lsls	r2, r2, #6
 8040640:	605a      	str	r2, [r3, #4]
	return 0;
 8040642:	2300      	movs	r3, #0
}
 8040644:	0018      	movs	r0, r3
 8040646:	46bd      	mov	sp, r7
 8040648:	b002      	add	sp, #8
 804064a:	bd80      	pop	{r7, pc}

0804064c <_isatty>:

int _isatty(int file)
{
 804064c:	b580      	push	{r7, lr}
 804064e:	b082      	sub	sp, #8
 8040650:	af00      	add	r7, sp, #0
 8040652:	6078      	str	r0, [r7, #4]
	return 1;
 8040654:	2301      	movs	r3, #1
}
 8040656:	0018      	movs	r0, r3
 8040658:	46bd      	mov	sp, r7
 804065a:	b002      	add	sp, #8
 804065c:	bd80      	pop	{r7, pc}

0804065e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 804065e:	b580      	push	{r7, lr}
 8040660:	b084      	sub	sp, #16
 8040662:	af00      	add	r7, sp, #0
 8040664:	60f8      	str	r0, [r7, #12]
 8040666:	60b9      	str	r1, [r7, #8]
 8040668:	607a      	str	r2, [r7, #4]
	return 0;
 804066a:	2300      	movs	r3, #0
}
 804066c:	0018      	movs	r0, r3
 804066e:	46bd      	mov	sp, r7
 8040670:	b004      	add	sp, #16
 8040672:	bd80      	pop	{r7, pc}

08040674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040674:	b580      	push	{r7, lr}
 8040676:	b086      	sub	sp, #24
 8040678:	af00      	add	r7, sp, #0
 804067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 804067c:	4a14      	ldr	r2, [pc, #80]	; (80406d0 <_sbrk+0x5c>)
 804067e:	4b15      	ldr	r3, [pc, #84]	; (80406d4 <_sbrk+0x60>)
 8040680:	1ad3      	subs	r3, r2, r3
 8040682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040684:	697b      	ldr	r3, [r7, #20]
 8040686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040688:	4b13      	ldr	r3, [pc, #76]	; (80406d8 <_sbrk+0x64>)
 804068a:	681b      	ldr	r3, [r3, #0]
 804068c:	2b00      	cmp	r3, #0
 804068e:	d102      	bne.n	8040696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040690:	4b11      	ldr	r3, [pc, #68]	; (80406d8 <_sbrk+0x64>)
 8040692:	4a12      	ldr	r2, [pc, #72]	; (80406dc <_sbrk+0x68>)
 8040694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040696:	4b10      	ldr	r3, [pc, #64]	; (80406d8 <_sbrk+0x64>)
 8040698:	681a      	ldr	r2, [r3, #0]
 804069a:	687b      	ldr	r3, [r7, #4]
 804069c:	18d3      	adds	r3, r2, r3
 804069e:	693a      	ldr	r2, [r7, #16]
 80406a0:	429a      	cmp	r2, r3
 80406a2:	d207      	bcs.n	80406b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80406a4:	f001 fc68 	bl	8041f78 <__errno>
 80406a8:	0003      	movs	r3, r0
 80406aa:	220c      	movs	r2, #12
 80406ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80406ae:	2301      	movs	r3, #1
 80406b0:	425b      	negs	r3, r3
 80406b2:	e009      	b.n	80406c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80406b4:	4b08      	ldr	r3, [pc, #32]	; (80406d8 <_sbrk+0x64>)
 80406b6:	681b      	ldr	r3, [r3, #0]
 80406b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80406ba:	4b07      	ldr	r3, [pc, #28]	; (80406d8 <_sbrk+0x64>)
 80406bc:	681a      	ldr	r2, [r3, #0]
 80406be:	687b      	ldr	r3, [r7, #4]
 80406c0:	18d2      	adds	r2, r2, r3
 80406c2:	4b05      	ldr	r3, [pc, #20]	; (80406d8 <_sbrk+0x64>)
 80406c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80406c6:	68fb      	ldr	r3, [r7, #12]
}
 80406c8:	0018      	movs	r0, r3
 80406ca:	46bd      	mov	sp, r7
 80406cc:	b006      	add	sp, #24
 80406ce:	bd80      	pop	{r7, pc}
 80406d0:	20002000 	.word	0x20002000
 80406d4:	00000400 	.word	0x00000400
 80406d8:	20000090 	.word	0x20000090
 80406dc:	20000138 	.word	0x20000138

080406e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80406e0:	b580      	push	{r7, lr}
 80406e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80406e4:	46c0      	nop			; (mov r8, r8)
 80406e6:	46bd      	mov	sp, r7
 80406e8:	bd80      	pop	{r7, pc}
	...

080406ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80406ec:	480d      	ldr	r0, [pc, #52]	; (8040724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80406ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80406f0:	480d      	ldr	r0, [pc, #52]	; (8040728 <LoopForever+0x6>)
  ldr r1, =_edata
 80406f2:	490e      	ldr	r1, [pc, #56]	; (804072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80406f4:	4a0e      	ldr	r2, [pc, #56]	; (8040730 <LoopForever+0xe>)
  movs r3, #0
 80406f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80406f8:	e002      	b.n	8040700 <LoopCopyDataInit>

080406fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80406fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80406fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80406fe:	3304      	adds	r3, #4

08040700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040704:	d3f9      	bcc.n	80406fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040706:	4a0b      	ldr	r2, [pc, #44]	; (8040734 <LoopForever+0x12>)
  ldr r4, =_ebss
 8040708:	4c0b      	ldr	r4, [pc, #44]	; (8040738 <LoopForever+0x16>)
  movs r3, #0
 804070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804070c:	e001      	b.n	8040712 <LoopFillZerobss>

0804070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040710:	3204      	adds	r2, #4

08040712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040714:	d3fb      	bcc.n	804070e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8040716:	f7ff ffe3 	bl	80406e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 804071a:	f001 fc33 	bl	8041f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 804071e:	f7ff fd9b 	bl	8040258 <main>

08040722 <LoopForever>:

LoopForever:
    b LoopForever
 8040722:	e7fe      	b.n	8040722 <LoopForever>
  ldr   r0, =_estack
 8040724:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8040728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804072c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8040730:	0804302c 	.word	0x0804302c
  ldr r2, =_sbss
 8040734:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8040738:	20000134 	.word	0x20000134

0804073c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 804073c:	e7fe      	b.n	804073c <ADC1_IRQHandler>
	...

08040740 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040740:	b580      	push	{r7, lr}
 8040742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040744:	4b07      	ldr	r3, [pc, #28]	; (8040764 <HAL_Init+0x24>)
 8040746:	681a      	ldr	r2, [r3, #0]
 8040748:	4b06      	ldr	r3, [pc, #24]	; (8040764 <HAL_Init+0x24>)
 804074a:	2110      	movs	r1, #16
 804074c:	430a      	orrs	r2, r1
 804074e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8040750:	2000      	movs	r0, #0
 8040752:	f000 f809 	bl	8040768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040756:	f7ff fe9f 	bl	8040498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804075a:	2300      	movs	r3, #0
}
 804075c:	0018      	movs	r0, r3
 804075e:	46bd      	mov	sp, r7
 8040760:	bd80      	pop	{r7, pc}
 8040762:	46c0      	nop			; (mov r8, r8)
 8040764:	40022000 	.word	0x40022000

08040768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040768:	b590      	push	{r4, r7, lr}
 804076a:	b083      	sub	sp, #12
 804076c:	af00      	add	r7, sp, #0
 804076e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040770:	4b14      	ldr	r3, [pc, #80]	; (80407c4 <HAL_InitTick+0x5c>)
 8040772:	681c      	ldr	r4, [r3, #0]
 8040774:	4b14      	ldr	r3, [pc, #80]	; (80407c8 <HAL_InitTick+0x60>)
 8040776:	781b      	ldrb	r3, [r3, #0]
 8040778:	0019      	movs	r1, r3
 804077a:	23fa      	movs	r3, #250	; 0xfa
 804077c:	0098      	lsls	r0, r3, #2
 804077e:	f7ff fccd 	bl	804011c <__udivsi3>
 8040782:	0003      	movs	r3, r0
 8040784:	0019      	movs	r1, r3
 8040786:	0020      	movs	r0, r4
 8040788:	f7ff fcc8 	bl	804011c <__udivsi3>
 804078c:	0003      	movs	r3, r0
 804078e:	0018      	movs	r0, r3
 8040790:	f000 f905 	bl	804099e <HAL_SYSTICK_Config>
 8040794:	1e03      	subs	r3, r0, #0
 8040796:	d001      	beq.n	804079c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8040798:	2301      	movs	r3, #1
 804079a:	e00f      	b.n	80407bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804079c:	687b      	ldr	r3, [r7, #4]
 804079e:	2b03      	cmp	r3, #3
 80407a0:	d80b      	bhi.n	80407ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80407a2:	6879      	ldr	r1, [r7, #4]
 80407a4:	2301      	movs	r3, #1
 80407a6:	425b      	negs	r3, r3
 80407a8:	2200      	movs	r2, #0
 80407aa:	0018      	movs	r0, r3
 80407ac:	f000 f8e2 	bl	8040974 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80407b0:	4b06      	ldr	r3, [pc, #24]	; (80407cc <HAL_InitTick+0x64>)
 80407b2:	687a      	ldr	r2, [r7, #4]
 80407b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80407b6:	2300      	movs	r3, #0
 80407b8:	e000      	b.n	80407bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80407ba:	2301      	movs	r3, #1
}
 80407bc:	0018      	movs	r0, r3
 80407be:	46bd      	mov	sp, r7
 80407c0:	b003      	add	sp, #12
 80407c2:	bd90      	pop	{r4, r7, pc}
 80407c4:	20000004 	.word	0x20000004
 80407c8:	2000000c 	.word	0x2000000c
 80407cc:	20000008 	.word	0x20000008

080407d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80407d0:	b580      	push	{r7, lr}
 80407d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80407d4:	4b05      	ldr	r3, [pc, #20]	; (80407ec <HAL_IncTick+0x1c>)
 80407d6:	781b      	ldrb	r3, [r3, #0]
 80407d8:	001a      	movs	r2, r3
 80407da:	4b05      	ldr	r3, [pc, #20]	; (80407f0 <HAL_IncTick+0x20>)
 80407dc:	681b      	ldr	r3, [r3, #0]
 80407de:	18d2      	adds	r2, r2, r3
 80407e0:	4b03      	ldr	r3, [pc, #12]	; (80407f0 <HAL_IncTick+0x20>)
 80407e2:	601a      	str	r2, [r3, #0]
}
 80407e4:	46c0      	nop			; (mov r8, r8)
 80407e6:	46bd      	mov	sp, r7
 80407e8:	bd80      	pop	{r7, pc}
 80407ea:	46c0      	nop			; (mov r8, r8)
 80407ec:	2000000c 	.word	0x2000000c
 80407f0:	20000120 	.word	0x20000120

080407f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80407f4:	b580      	push	{r7, lr}
 80407f6:	af00      	add	r7, sp, #0
  return uwTick;
 80407f8:	4b02      	ldr	r3, [pc, #8]	; (8040804 <HAL_GetTick+0x10>)
 80407fa:	681b      	ldr	r3, [r3, #0]
}
 80407fc:	0018      	movs	r0, r3
 80407fe:	46bd      	mov	sp, r7
 8040800:	bd80      	pop	{r7, pc}
 8040802:	46c0      	nop			; (mov r8, r8)
 8040804:	20000120 	.word	0x20000120

08040808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040808:	b580      	push	{r7, lr}
 804080a:	b084      	sub	sp, #16
 804080c:	af00      	add	r7, sp, #0
 804080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040810:	f7ff fff0 	bl	80407f4 <HAL_GetTick>
 8040814:	0003      	movs	r3, r0
 8040816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8040818:	687b      	ldr	r3, [r7, #4]
 804081a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 804081c:	68fb      	ldr	r3, [r7, #12]
 804081e:	3301      	adds	r3, #1
 8040820:	d005      	beq.n	804082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040822:	4b0a      	ldr	r3, [pc, #40]	; (804084c <HAL_Delay+0x44>)
 8040824:	781b      	ldrb	r3, [r3, #0]
 8040826:	001a      	movs	r2, r3
 8040828:	68fb      	ldr	r3, [r7, #12]
 804082a:	189b      	adds	r3, r3, r2
 804082c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 804082e:	46c0      	nop			; (mov r8, r8)
 8040830:	f7ff ffe0 	bl	80407f4 <HAL_GetTick>
 8040834:	0002      	movs	r2, r0
 8040836:	68bb      	ldr	r3, [r7, #8]
 8040838:	1ad3      	subs	r3, r2, r3
 804083a:	68fa      	ldr	r2, [r7, #12]
 804083c:	429a      	cmp	r2, r3
 804083e:	d8f7      	bhi.n	8040830 <HAL_Delay+0x28>
  {
  }
}
 8040840:	46c0      	nop			; (mov r8, r8)
 8040842:	46c0      	nop			; (mov r8, r8)
 8040844:	46bd      	mov	sp, r7
 8040846:	b004      	add	sp, #16
 8040848:	bd80      	pop	{r7, pc}
 804084a:	46c0      	nop			; (mov r8, r8)
 804084c:	2000000c 	.word	0x2000000c

08040850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040850:	b590      	push	{r4, r7, lr}
 8040852:	b083      	sub	sp, #12
 8040854:	af00      	add	r7, sp, #0
 8040856:	0002      	movs	r2, r0
 8040858:	6039      	str	r1, [r7, #0]
 804085a:	1dfb      	adds	r3, r7, #7
 804085c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 804085e:	1dfb      	adds	r3, r7, #7
 8040860:	781b      	ldrb	r3, [r3, #0]
 8040862:	2b7f      	cmp	r3, #127	; 0x7f
 8040864:	d828      	bhi.n	80408b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8040866:	4a2f      	ldr	r2, [pc, #188]	; (8040924 <__NVIC_SetPriority+0xd4>)
 8040868:	1dfb      	adds	r3, r7, #7
 804086a:	781b      	ldrb	r3, [r3, #0]
 804086c:	b25b      	sxtb	r3, r3
 804086e:	089b      	lsrs	r3, r3, #2
 8040870:	33c0      	adds	r3, #192	; 0xc0
 8040872:	009b      	lsls	r3, r3, #2
 8040874:	589b      	ldr	r3, [r3, r2]
 8040876:	1dfa      	adds	r2, r7, #7
 8040878:	7812      	ldrb	r2, [r2, #0]
 804087a:	0011      	movs	r1, r2
 804087c:	2203      	movs	r2, #3
 804087e:	400a      	ands	r2, r1
 8040880:	00d2      	lsls	r2, r2, #3
 8040882:	21ff      	movs	r1, #255	; 0xff
 8040884:	4091      	lsls	r1, r2
 8040886:	000a      	movs	r2, r1
 8040888:	43d2      	mvns	r2, r2
 804088a:	401a      	ands	r2, r3
 804088c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 804088e:	683b      	ldr	r3, [r7, #0]
 8040890:	019b      	lsls	r3, r3, #6
 8040892:	22ff      	movs	r2, #255	; 0xff
 8040894:	401a      	ands	r2, r3
 8040896:	1dfb      	adds	r3, r7, #7
 8040898:	781b      	ldrb	r3, [r3, #0]
 804089a:	0018      	movs	r0, r3
 804089c:	2303      	movs	r3, #3
 804089e:	4003      	ands	r3, r0
 80408a0:	00db      	lsls	r3, r3, #3
 80408a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80408a4:	481f      	ldr	r0, [pc, #124]	; (8040924 <__NVIC_SetPriority+0xd4>)
 80408a6:	1dfb      	adds	r3, r7, #7
 80408a8:	781b      	ldrb	r3, [r3, #0]
 80408aa:	b25b      	sxtb	r3, r3
 80408ac:	089b      	lsrs	r3, r3, #2
 80408ae:	430a      	orrs	r2, r1
 80408b0:	33c0      	adds	r3, #192	; 0xc0
 80408b2:	009b      	lsls	r3, r3, #2
 80408b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80408b6:	e031      	b.n	804091c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80408b8:	4a1b      	ldr	r2, [pc, #108]	; (8040928 <__NVIC_SetPriority+0xd8>)
 80408ba:	1dfb      	adds	r3, r7, #7
 80408bc:	781b      	ldrb	r3, [r3, #0]
 80408be:	0019      	movs	r1, r3
 80408c0:	230f      	movs	r3, #15
 80408c2:	400b      	ands	r3, r1
 80408c4:	3b08      	subs	r3, #8
 80408c6:	089b      	lsrs	r3, r3, #2
 80408c8:	3306      	adds	r3, #6
 80408ca:	009b      	lsls	r3, r3, #2
 80408cc:	18d3      	adds	r3, r2, r3
 80408ce:	3304      	adds	r3, #4
 80408d0:	681b      	ldr	r3, [r3, #0]
 80408d2:	1dfa      	adds	r2, r7, #7
 80408d4:	7812      	ldrb	r2, [r2, #0]
 80408d6:	0011      	movs	r1, r2
 80408d8:	2203      	movs	r2, #3
 80408da:	400a      	ands	r2, r1
 80408dc:	00d2      	lsls	r2, r2, #3
 80408de:	21ff      	movs	r1, #255	; 0xff
 80408e0:	4091      	lsls	r1, r2
 80408e2:	000a      	movs	r2, r1
 80408e4:	43d2      	mvns	r2, r2
 80408e6:	401a      	ands	r2, r3
 80408e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80408ea:	683b      	ldr	r3, [r7, #0]
 80408ec:	019b      	lsls	r3, r3, #6
 80408ee:	22ff      	movs	r2, #255	; 0xff
 80408f0:	401a      	ands	r2, r3
 80408f2:	1dfb      	adds	r3, r7, #7
 80408f4:	781b      	ldrb	r3, [r3, #0]
 80408f6:	0018      	movs	r0, r3
 80408f8:	2303      	movs	r3, #3
 80408fa:	4003      	ands	r3, r0
 80408fc:	00db      	lsls	r3, r3, #3
 80408fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8040900:	4809      	ldr	r0, [pc, #36]	; (8040928 <__NVIC_SetPriority+0xd8>)
 8040902:	1dfb      	adds	r3, r7, #7
 8040904:	781b      	ldrb	r3, [r3, #0]
 8040906:	001c      	movs	r4, r3
 8040908:	230f      	movs	r3, #15
 804090a:	4023      	ands	r3, r4
 804090c:	3b08      	subs	r3, #8
 804090e:	089b      	lsrs	r3, r3, #2
 8040910:	430a      	orrs	r2, r1
 8040912:	3306      	adds	r3, #6
 8040914:	009b      	lsls	r3, r3, #2
 8040916:	18c3      	adds	r3, r0, r3
 8040918:	3304      	adds	r3, #4
 804091a:	601a      	str	r2, [r3, #0]
}
 804091c:	46c0      	nop			; (mov r8, r8)
 804091e:	46bd      	mov	sp, r7
 8040920:	b003      	add	sp, #12
 8040922:	bd90      	pop	{r4, r7, pc}
 8040924:	e000e100 	.word	0xe000e100
 8040928:	e000ed00 	.word	0xe000ed00

0804092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 804092c:	b580      	push	{r7, lr}
 804092e:	b082      	sub	sp, #8
 8040930:	af00      	add	r7, sp, #0
 8040932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040934:	687b      	ldr	r3, [r7, #4]
 8040936:	1e5a      	subs	r2, r3, #1
 8040938:	2380      	movs	r3, #128	; 0x80
 804093a:	045b      	lsls	r3, r3, #17
 804093c:	429a      	cmp	r2, r3
 804093e:	d301      	bcc.n	8040944 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040940:	2301      	movs	r3, #1
 8040942:	e010      	b.n	8040966 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040944:	4b0a      	ldr	r3, [pc, #40]	; (8040970 <SysTick_Config+0x44>)
 8040946:	687a      	ldr	r2, [r7, #4]
 8040948:	3a01      	subs	r2, #1
 804094a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804094c:	2301      	movs	r3, #1
 804094e:	425b      	negs	r3, r3
 8040950:	2103      	movs	r1, #3
 8040952:	0018      	movs	r0, r3
 8040954:	f7ff ff7c 	bl	8040850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040958:	4b05      	ldr	r3, [pc, #20]	; (8040970 <SysTick_Config+0x44>)
 804095a:	2200      	movs	r2, #0
 804095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804095e:	4b04      	ldr	r3, [pc, #16]	; (8040970 <SysTick_Config+0x44>)
 8040960:	2207      	movs	r2, #7
 8040962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040964:	2300      	movs	r3, #0
}
 8040966:	0018      	movs	r0, r3
 8040968:	46bd      	mov	sp, r7
 804096a:	b002      	add	sp, #8
 804096c:	bd80      	pop	{r7, pc}
 804096e:	46c0      	nop			; (mov r8, r8)
 8040970:	e000e010 	.word	0xe000e010

08040974 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040974:	b580      	push	{r7, lr}
 8040976:	b084      	sub	sp, #16
 8040978:	af00      	add	r7, sp, #0
 804097a:	60b9      	str	r1, [r7, #8]
 804097c:	607a      	str	r2, [r7, #4]
 804097e:	210f      	movs	r1, #15
 8040980:	187b      	adds	r3, r7, r1
 8040982:	1c02      	adds	r2, r0, #0
 8040984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8040986:	68ba      	ldr	r2, [r7, #8]
 8040988:	187b      	adds	r3, r7, r1
 804098a:	781b      	ldrb	r3, [r3, #0]
 804098c:	b25b      	sxtb	r3, r3
 804098e:	0011      	movs	r1, r2
 8040990:	0018      	movs	r0, r3
 8040992:	f7ff ff5d 	bl	8040850 <__NVIC_SetPriority>
}
 8040996:	46c0      	nop			; (mov r8, r8)
 8040998:	46bd      	mov	sp, r7
 804099a:	b004      	add	sp, #16
 804099c:	bd80      	pop	{r7, pc}

0804099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804099e:	b580      	push	{r7, lr}
 80409a0:	b082      	sub	sp, #8
 80409a2:	af00      	add	r7, sp, #0
 80409a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80409a6:	687b      	ldr	r3, [r7, #4]
 80409a8:	0018      	movs	r0, r3
 80409aa:	f7ff ffbf 	bl	804092c <SysTick_Config>
 80409ae:	0003      	movs	r3, r0
}
 80409b0:	0018      	movs	r0, r3
 80409b2:	46bd      	mov	sp, r7
 80409b4:	b002      	add	sp, #8
 80409b6:	bd80      	pop	{r7, pc}

080409b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80409b8:	b580      	push	{r7, lr}
 80409ba:	b086      	sub	sp, #24
 80409bc:	af00      	add	r7, sp, #0
 80409be:	6078      	str	r0, [r7, #4]
 80409c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80409c2:	2300      	movs	r3, #0
 80409c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80409c6:	e14f      	b.n	8040c68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80409c8:	683b      	ldr	r3, [r7, #0]
 80409ca:	681b      	ldr	r3, [r3, #0]
 80409cc:	2101      	movs	r1, #1
 80409ce:	697a      	ldr	r2, [r7, #20]
 80409d0:	4091      	lsls	r1, r2
 80409d2:	000a      	movs	r2, r1
 80409d4:	4013      	ands	r3, r2
 80409d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80409d8:	68fb      	ldr	r3, [r7, #12]
 80409da:	2b00      	cmp	r3, #0
 80409dc:	d100      	bne.n	80409e0 <HAL_GPIO_Init+0x28>
 80409de:	e140      	b.n	8040c62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80409e0:	683b      	ldr	r3, [r7, #0]
 80409e2:	685b      	ldr	r3, [r3, #4]
 80409e4:	2203      	movs	r2, #3
 80409e6:	4013      	ands	r3, r2
 80409e8:	2b01      	cmp	r3, #1
 80409ea:	d005      	beq.n	80409f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80409ec:	683b      	ldr	r3, [r7, #0]
 80409ee:	685b      	ldr	r3, [r3, #4]
 80409f0:	2203      	movs	r2, #3
 80409f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80409f4:	2b02      	cmp	r3, #2
 80409f6:	d130      	bne.n	8040a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80409f8:	687b      	ldr	r3, [r7, #4]
 80409fa:	689b      	ldr	r3, [r3, #8]
 80409fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80409fe:	697b      	ldr	r3, [r7, #20]
 8040a00:	005b      	lsls	r3, r3, #1
 8040a02:	2203      	movs	r2, #3
 8040a04:	409a      	lsls	r2, r3
 8040a06:	0013      	movs	r3, r2
 8040a08:	43da      	mvns	r2, r3
 8040a0a:	693b      	ldr	r3, [r7, #16]
 8040a0c:	4013      	ands	r3, r2
 8040a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8040a10:	683b      	ldr	r3, [r7, #0]
 8040a12:	68da      	ldr	r2, [r3, #12]
 8040a14:	697b      	ldr	r3, [r7, #20]
 8040a16:	005b      	lsls	r3, r3, #1
 8040a18:	409a      	lsls	r2, r3
 8040a1a:	0013      	movs	r3, r2
 8040a1c:	693a      	ldr	r2, [r7, #16]
 8040a1e:	4313      	orrs	r3, r2
 8040a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040a22:	687b      	ldr	r3, [r7, #4]
 8040a24:	693a      	ldr	r2, [r7, #16]
 8040a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040a28:	687b      	ldr	r3, [r7, #4]
 8040a2a:	685b      	ldr	r3, [r3, #4]
 8040a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040a2e:	2201      	movs	r2, #1
 8040a30:	697b      	ldr	r3, [r7, #20]
 8040a32:	409a      	lsls	r2, r3
 8040a34:	0013      	movs	r3, r2
 8040a36:	43da      	mvns	r2, r3
 8040a38:	693b      	ldr	r3, [r7, #16]
 8040a3a:	4013      	ands	r3, r2
 8040a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040a3e:	683b      	ldr	r3, [r7, #0]
 8040a40:	685b      	ldr	r3, [r3, #4]
 8040a42:	091b      	lsrs	r3, r3, #4
 8040a44:	2201      	movs	r2, #1
 8040a46:	401a      	ands	r2, r3
 8040a48:	697b      	ldr	r3, [r7, #20]
 8040a4a:	409a      	lsls	r2, r3
 8040a4c:	0013      	movs	r3, r2
 8040a4e:	693a      	ldr	r2, [r7, #16]
 8040a50:	4313      	orrs	r3, r2
 8040a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040a54:	687b      	ldr	r3, [r7, #4]
 8040a56:	693a      	ldr	r2, [r7, #16]
 8040a58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040a5a:	683b      	ldr	r3, [r7, #0]
 8040a5c:	685b      	ldr	r3, [r3, #4]
 8040a5e:	2203      	movs	r2, #3
 8040a60:	4013      	ands	r3, r2
 8040a62:	2b03      	cmp	r3, #3
 8040a64:	d017      	beq.n	8040a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040a66:	687b      	ldr	r3, [r7, #4]
 8040a68:	68db      	ldr	r3, [r3, #12]
 8040a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8040a6c:	697b      	ldr	r3, [r7, #20]
 8040a6e:	005b      	lsls	r3, r3, #1
 8040a70:	2203      	movs	r2, #3
 8040a72:	409a      	lsls	r2, r3
 8040a74:	0013      	movs	r3, r2
 8040a76:	43da      	mvns	r2, r3
 8040a78:	693b      	ldr	r3, [r7, #16]
 8040a7a:	4013      	ands	r3, r2
 8040a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8040a7e:	683b      	ldr	r3, [r7, #0]
 8040a80:	689a      	ldr	r2, [r3, #8]
 8040a82:	697b      	ldr	r3, [r7, #20]
 8040a84:	005b      	lsls	r3, r3, #1
 8040a86:	409a      	lsls	r2, r3
 8040a88:	0013      	movs	r3, r2
 8040a8a:	693a      	ldr	r2, [r7, #16]
 8040a8c:	4313      	orrs	r3, r2
 8040a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040a90:	687b      	ldr	r3, [r7, #4]
 8040a92:	693a      	ldr	r2, [r7, #16]
 8040a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040a96:	683b      	ldr	r3, [r7, #0]
 8040a98:	685b      	ldr	r3, [r3, #4]
 8040a9a:	2203      	movs	r2, #3
 8040a9c:	4013      	ands	r3, r2
 8040a9e:	2b02      	cmp	r3, #2
 8040aa0:	d123      	bne.n	8040aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8040aa2:	697b      	ldr	r3, [r7, #20]
 8040aa4:	08da      	lsrs	r2, r3, #3
 8040aa6:	687b      	ldr	r3, [r7, #4]
 8040aa8:	3208      	adds	r2, #8
 8040aaa:	0092      	lsls	r2, r2, #2
 8040aac:	58d3      	ldr	r3, [r2, r3]
 8040aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8040ab0:	697b      	ldr	r3, [r7, #20]
 8040ab2:	2207      	movs	r2, #7
 8040ab4:	4013      	ands	r3, r2
 8040ab6:	009b      	lsls	r3, r3, #2
 8040ab8:	220f      	movs	r2, #15
 8040aba:	409a      	lsls	r2, r3
 8040abc:	0013      	movs	r3, r2
 8040abe:	43da      	mvns	r2, r3
 8040ac0:	693b      	ldr	r3, [r7, #16]
 8040ac2:	4013      	ands	r3, r2
 8040ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8040ac6:	683b      	ldr	r3, [r7, #0]
 8040ac8:	691a      	ldr	r2, [r3, #16]
 8040aca:	697b      	ldr	r3, [r7, #20]
 8040acc:	2107      	movs	r1, #7
 8040ace:	400b      	ands	r3, r1
 8040ad0:	009b      	lsls	r3, r3, #2
 8040ad2:	409a      	lsls	r2, r3
 8040ad4:	0013      	movs	r3, r2
 8040ad6:	693a      	ldr	r2, [r7, #16]
 8040ad8:	4313      	orrs	r3, r2
 8040ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8040adc:	697b      	ldr	r3, [r7, #20]
 8040ade:	08da      	lsrs	r2, r3, #3
 8040ae0:	687b      	ldr	r3, [r7, #4]
 8040ae2:	3208      	adds	r2, #8
 8040ae4:	0092      	lsls	r2, r2, #2
 8040ae6:	6939      	ldr	r1, [r7, #16]
 8040ae8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040aea:	687b      	ldr	r3, [r7, #4]
 8040aec:	681b      	ldr	r3, [r3, #0]
 8040aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8040af0:	697b      	ldr	r3, [r7, #20]
 8040af2:	005b      	lsls	r3, r3, #1
 8040af4:	2203      	movs	r2, #3
 8040af6:	409a      	lsls	r2, r3
 8040af8:	0013      	movs	r3, r2
 8040afa:	43da      	mvns	r2, r3
 8040afc:	693b      	ldr	r3, [r7, #16]
 8040afe:	4013      	ands	r3, r2
 8040b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8040b02:	683b      	ldr	r3, [r7, #0]
 8040b04:	685b      	ldr	r3, [r3, #4]
 8040b06:	2203      	movs	r2, #3
 8040b08:	401a      	ands	r2, r3
 8040b0a:	697b      	ldr	r3, [r7, #20]
 8040b0c:	005b      	lsls	r3, r3, #1
 8040b0e:	409a      	lsls	r2, r3
 8040b10:	0013      	movs	r3, r2
 8040b12:	693a      	ldr	r2, [r7, #16]
 8040b14:	4313      	orrs	r3, r2
 8040b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040b18:	687b      	ldr	r3, [r7, #4]
 8040b1a:	693a      	ldr	r2, [r7, #16]
 8040b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040b1e:	683b      	ldr	r3, [r7, #0]
 8040b20:	685a      	ldr	r2, [r3, #4]
 8040b22:	23c0      	movs	r3, #192	; 0xc0
 8040b24:	029b      	lsls	r3, r3, #10
 8040b26:	4013      	ands	r3, r2
 8040b28:	d100      	bne.n	8040b2c <HAL_GPIO_Init+0x174>
 8040b2a:	e09a      	b.n	8040c62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b2c:	4b54      	ldr	r3, [pc, #336]	; (8040c80 <HAL_GPIO_Init+0x2c8>)
 8040b2e:	699a      	ldr	r2, [r3, #24]
 8040b30:	4b53      	ldr	r3, [pc, #332]	; (8040c80 <HAL_GPIO_Init+0x2c8>)
 8040b32:	2101      	movs	r1, #1
 8040b34:	430a      	orrs	r2, r1
 8040b36:	619a      	str	r2, [r3, #24]
 8040b38:	4b51      	ldr	r3, [pc, #324]	; (8040c80 <HAL_GPIO_Init+0x2c8>)
 8040b3a:	699b      	ldr	r3, [r3, #24]
 8040b3c:	2201      	movs	r2, #1
 8040b3e:	4013      	ands	r3, r2
 8040b40:	60bb      	str	r3, [r7, #8]
 8040b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8040b44:	4a4f      	ldr	r2, [pc, #316]	; (8040c84 <HAL_GPIO_Init+0x2cc>)
 8040b46:	697b      	ldr	r3, [r7, #20]
 8040b48:	089b      	lsrs	r3, r3, #2
 8040b4a:	3302      	adds	r3, #2
 8040b4c:	009b      	lsls	r3, r3, #2
 8040b4e:	589b      	ldr	r3, [r3, r2]
 8040b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8040b52:	697b      	ldr	r3, [r7, #20]
 8040b54:	2203      	movs	r2, #3
 8040b56:	4013      	ands	r3, r2
 8040b58:	009b      	lsls	r3, r3, #2
 8040b5a:	220f      	movs	r2, #15
 8040b5c:	409a      	lsls	r2, r3
 8040b5e:	0013      	movs	r3, r2
 8040b60:	43da      	mvns	r2, r3
 8040b62:	693b      	ldr	r3, [r7, #16]
 8040b64:	4013      	ands	r3, r2
 8040b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8040b68:	687a      	ldr	r2, [r7, #4]
 8040b6a:	2390      	movs	r3, #144	; 0x90
 8040b6c:	05db      	lsls	r3, r3, #23
 8040b6e:	429a      	cmp	r2, r3
 8040b70:	d013      	beq.n	8040b9a <HAL_GPIO_Init+0x1e2>
 8040b72:	687b      	ldr	r3, [r7, #4]
 8040b74:	4a44      	ldr	r2, [pc, #272]	; (8040c88 <HAL_GPIO_Init+0x2d0>)
 8040b76:	4293      	cmp	r3, r2
 8040b78:	d00d      	beq.n	8040b96 <HAL_GPIO_Init+0x1de>
 8040b7a:	687b      	ldr	r3, [r7, #4]
 8040b7c:	4a43      	ldr	r2, [pc, #268]	; (8040c8c <HAL_GPIO_Init+0x2d4>)
 8040b7e:	4293      	cmp	r3, r2
 8040b80:	d007      	beq.n	8040b92 <HAL_GPIO_Init+0x1da>
 8040b82:	687b      	ldr	r3, [r7, #4]
 8040b84:	4a42      	ldr	r2, [pc, #264]	; (8040c90 <HAL_GPIO_Init+0x2d8>)
 8040b86:	4293      	cmp	r3, r2
 8040b88:	d101      	bne.n	8040b8e <HAL_GPIO_Init+0x1d6>
 8040b8a:	2303      	movs	r3, #3
 8040b8c:	e006      	b.n	8040b9c <HAL_GPIO_Init+0x1e4>
 8040b8e:	2305      	movs	r3, #5
 8040b90:	e004      	b.n	8040b9c <HAL_GPIO_Init+0x1e4>
 8040b92:	2302      	movs	r3, #2
 8040b94:	e002      	b.n	8040b9c <HAL_GPIO_Init+0x1e4>
 8040b96:	2301      	movs	r3, #1
 8040b98:	e000      	b.n	8040b9c <HAL_GPIO_Init+0x1e4>
 8040b9a:	2300      	movs	r3, #0
 8040b9c:	697a      	ldr	r2, [r7, #20]
 8040b9e:	2103      	movs	r1, #3
 8040ba0:	400a      	ands	r2, r1
 8040ba2:	0092      	lsls	r2, r2, #2
 8040ba4:	4093      	lsls	r3, r2
 8040ba6:	693a      	ldr	r2, [r7, #16]
 8040ba8:	4313      	orrs	r3, r2
 8040baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8040bac:	4935      	ldr	r1, [pc, #212]	; (8040c84 <HAL_GPIO_Init+0x2cc>)
 8040bae:	697b      	ldr	r3, [r7, #20]
 8040bb0:	089b      	lsrs	r3, r3, #2
 8040bb2:	3302      	adds	r3, #2
 8040bb4:	009b      	lsls	r3, r3, #2
 8040bb6:	693a      	ldr	r2, [r7, #16]
 8040bb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040bba:	4b36      	ldr	r3, [pc, #216]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040bbc:	681b      	ldr	r3, [r3, #0]
 8040bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bc0:	68fb      	ldr	r3, [r7, #12]
 8040bc2:	43da      	mvns	r2, r3
 8040bc4:	693b      	ldr	r3, [r7, #16]
 8040bc6:	4013      	ands	r3, r2
 8040bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040bca:	683b      	ldr	r3, [r7, #0]
 8040bcc:	685a      	ldr	r2, [r3, #4]
 8040bce:	2380      	movs	r3, #128	; 0x80
 8040bd0:	025b      	lsls	r3, r3, #9
 8040bd2:	4013      	ands	r3, r2
 8040bd4:	d003      	beq.n	8040bde <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8040bd6:	693a      	ldr	r2, [r7, #16]
 8040bd8:	68fb      	ldr	r3, [r7, #12]
 8040bda:	4313      	orrs	r3, r2
 8040bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8040bde:	4b2d      	ldr	r3, [pc, #180]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040be0:	693a      	ldr	r2, [r7, #16]
 8040be2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8040be4:	4b2b      	ldr	r3, [pc, #172]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040be6:	685b      	ldr	r3, [r3, #4]
 8040be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bea:	68fb      	ldr	r3, [r7, #12]
 8040bec:	43da      	mvns	r2, r3
 8040bee:	693b      	ldr	r3, [r7, #16]
 8040bf0:	4013      	ands	r3, r2
 8040bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040bf4:	683b      	ldr	r3, [r7, #0]
 8040bf6:	685a      	ldr	r2, [r3, #4]
 8040bf8:	2380      	movs	r3, #128	; 0x80
 8040bfa:	029b      	lsls	r3, r3, #10
 8040bfc:	4013      	ands	r3, r2
 8040bfe:	d003      	beq.n	8040c08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8040c00:	693a      	ldr	r2, [r7, #16]
 8040c02:	68fb      	ldr	r3, [r7, #12]
 8040c04:	4313      	orrs	r3, r2
 8040c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8040c08:	4b22      	ldr	r3, [pc, #136]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040c0a:	693a      	ldr	r2, [r7, #16]
 8040c0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040c0e:	4b21      	ldr	r3, [pc, #132]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040c10:	689b      	ldr	r3, [r3, #8]
 8040c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c14:	68fb      	ldr	r3, [r7, #12]
 8040c16:	43da      	mvns	r2, r3
 8040c18:	693b      	ldr	r3, [r7, #16]
 8040c1a:	4013      	ands	r3, r2
 8040c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040c1e:	683b      	ldr	r3, [r7, #0]
 8040c20:	685a      	ldr	r2, [r3, #4]
 8040c22:	2380      	movs	r3, #128	; 0x80
 8040c24:	035b      	lsls	r3, r3, #13
 8040c26:	4013      	ands	r3, r2
 8040c28:	d003      	beq.n	8040c32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8040c2a:	693a      	ldr	r2, [r7, #16]
 8040c2c:	68fb      	ldr	r3, [r7, #12]
 8040c2e:	4313      	orrs	r3, r2
 8040c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8040c32:	4b18      	ldr	r3, [pc, #96]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040c34:	693a      	ldr	r2, [r7, #16]
 8040c36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8040c38:	4b16      	ldr	r3, [pc, #88]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040c3a:	68db      	ldr	r3, [r3, #12]
 8040c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c3e:	68fb      	ldr	r3, [r7, #12]
 8040c40:	43da      	mvns	r2, r3
 8040c42:	693b      	ldr	r3, [r7, #16]
 8040c44:	4013      	ands	r3, r2
 8040c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040c48:	683b      	ldr	r3, [r7, #0]
 8040c4a:	685a      	ldr	r2, [r3, #4]
 8040c4c:	2380      	movs	r3, #128	; 0x80
 8040c4e:	039b      	lsls	r3, r3, #14
 8040c50:	4013      	ands	r3, r2
 8040c52:	d003      	beq.n	8040c5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8040c54:	693a      	ldr	r2, [r7, #16]
 8040c56:	68fb      	ldr	r3, [r7, #12]
 8040c58:	4313      	orrs	r3, r2
 8040c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8040c5c:	4b0d      	ldr	r3, [pc, #52]	; (8040c94 <HAL_GPIO_Init+0x2dc>)
 8040c5e:	693a      	ldr	r2, [r7, #16]
 8040c60:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8040c62:	697b      	ldr	r3, [r7, #20]
 8040c64:	3301      	adds	r3, #1
 8040c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8040c68:	683b      	ldr	r3, [r7, #0]
 8040c6a:	681a      	ldr	r2, [r3, #0]
 8040c6c:	697b      	ldr	r3, [r7, #20]
 8040c6e:	40da      	lsrs	r2, r3
 8040c70:	1e13      	subs	r3, r2, #0
 8040c72:	d000      	beq.n	8040c76 <HAL_GPIO_Init+0x2be>
 8040c74:	e6a8      	b.n	80409c8 <HAL_GPIO_Init+0x10>
  } 
}
 8040c76:	46c0      	nop			; (mov r8, r8)
 8040c78:	46c0      	nop			; (mov r8, r8)
 8040c7a:	46bd      	mov	sp, r7
 8040c7c:	b006      	add	sp, #24
 8040c7e:	bd80      	pop	{r7, pc}
 8040c80:	40021000 	.word	0x40021000
 8040c84:	40010000 	.word	0x40010000
 8040c88:	48000400 	.word	0x48000400
 8040c8c:	48000800 	.word	0x48000800
 8040c90:	48000c00 	.word	0x48000c00
 8040c94:	40010400 	.word	0x40010400

08040c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040c98:	b580      	push	{r7, lr}
 8040c9a:	b082      	sub	sp, #8
 8040c9c:	af00      	add	r7, sp, #0
 8040c9e:	6078      	str	r0, [r7, #4]
 8040ca0:	0008      	movs	r0, r1
 8040ca2:	0011      	movs	r1, r2
 8040ca4:	1cbb      	adds	r3, r7, #2
 8040ca6:	1c02      	adds	r2, r0, #0
 8040ca8:	801a      	strh	r2, [r3, #0]
 8040caa:	1c7b      	adds	r3, r7, #1
 8040cac:	1c0a      	adds	r2, r1, #0
 8040cae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040cb0:	1c7b      	adds	r3, r7, #1
 8040cb2:	781b      	ldrb	r3, [r3, #0]
 8040cb4:	2b00      	cmp	r3, #0
 8040cb6:	d004      	beq.n	8040cc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040cb8:	1cbb      	adds	r3, r7, #2
 8040cba:	881a      	ldrh	r2, [r3, #0]
 8040cbc:	687b      	ldr	r3, [r7, #4]
 8040cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040cc0:	e003      	b.n	8040cca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040cc2:	1cbb      	adds	r3, r7, #2
 8040cc4:	881a      	ldrh	r2, [r3, #0]
 8040cc6:	687b      	ldr	r3, [r7, #4]
 8040cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040cca:	46c0      	nop			; (mov r8, r8)
 8040ccc:	46bd      	mov	sp, r7
 8040cce:	b002      	add	sp, #8
 8040cd0:	bd80      	pop	{r7, pc}

08040cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8040cd2:	b580      	push	{r7, lr}
 8040cd4:	b084      	sub	sp, #16
 8040cd6:	af00      	add	r7, sp, #0
 8040cd8:	6078      	str	r0, [r7, #4]
 8040cda:	000a      	movs	r2, r1
 8040cdc:	1cbb      	adds	r3, r7, #2
 8040cde:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8040ce0:	687b      	ldr	r3, [r7, #4]
 8040ce2:	695b      	ldr	r3, [r3, #20]
 8040ce4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040ce6:	1cbb      	adds	r3, r7, #2
 8040ce8:	881b      	ldrh	r3, [r3, #0]
 8040cea:	68fa      	ldr	r2, [r7, #12]
 8040cec:	4013      	ands	r3, r2
 8040cee:	041a      	lsls	r2, r3, #16
 8040cf0:	68fb      	ldr	r3, [r7, #12]
 8040cf2:	43db      	mvns	r3, r3
 8040cf4:	1cb9      	adds	r1, r7, #2
 8040cf6:	8809      	ldrh	r1, [r1, #0]
 8040cf8:	400b      	ands	r3, r1
 8040cfa:	431a      	orrs	r2, r3
 8040cfc:	687b      	ldr	r3, [r7, #4]
 8040cfe:	619a      	str	r2, [r3, #24]
}
 8040d00:	46c0      	nop			; (mov r8, r8)
 8040d02:	46bd      	mov	sp, r7
 8040d04:	b004      	add	sp, #16
 8040d06:	bd80      	pop	{r7, pc}

08040d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040d08:	b580      	push	{r7, lr}
 8040d0a:	b088      	sub	sp, #32
 8040d0c:	af00      	add	r7, sp, #0
 8040d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8040d10:	687b      	ldr	r3, [r7, #4]
 8040d12:	2b00      	cmp	r3, #0
 8040d14:	d101      	bne.n	8040d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8040d16:	2301      	movs	r3, #1
 8040d18:	e301      	b.n	804131e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040d1a:	687b      	ldr	r3, [r7, #4]
 8040d1c:	681b      	ldr	r3, [r3, #0]
 8040d1e:	2201      	movs	r2, #1
 8040d20:	4013      	ands	r3, r2
 8040d22:	d100      	bne.n	8040d26 <HAL_RCC_OscConfig+0x1e>
 8040d24:	e08d      	b.n	8040e42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8040d26:	4bc3      	ldr	r3, [pc, #780]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d28:	685b      	ldr	r3, [r3, #4]
 8040d2a:	220c      	movs	r2, #12
 8040d2c:	4013      	ands	r3, r2
 8040d2e:	2b04      	cmp	r3, #4
 8040d30:	d00e      	beq.n	8040d50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8040d32:	4bc0      	ldr	r3, [pc, #768]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d34:	685b      	ldr	r3, [r3, #4]
 8040d36:	220c      	movs	r2, #12
 8040d38:	4013      	ands	r3, r2
 8040d3a:	2b08      	cmp	r3, #8
 8040d3c:	d116      	bne.n	8040d6c <HAL_RCC_OscConfig+0x64>
 8040d3e:	4bbd      	ldr	r3, [pc, #756]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d40:	685a      	ldr	r2, [r3, #4]
 8040d42:	2380      	movs	r3, #128	; 0x80
 8040d44:	025b      	lsls	r3, r3, #9
 8040d46:	401a      	ands	r2, r3
 8040d48:	2380      	movs	r3, #128	; 0x80
 8040d4a:	025b      	lsls	r3, r3, #9
 8040d4c:	429a      	cmp	r2, r3
 8040d4e:	d10d      	bne.n	8040d6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040d50:	4bb8      	ldr	r3, [pc, #736]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d52:	681a      	ldr	r2, [r3, #0]
 8040d54:	2380      	movs	r3, #128	; 0x80
 8040d56:	029b      	lsls	r3, r3, #10
 8040d58:	4013      	ands	r3, r2
 8040d5a:	d100      	bne.n	8040d5e <HAL_RCC_OscConfig+0x56>
 8040d5c:	e070      	b.n	8040e40 <HAL_RCC_OscConfig+0x138>
 8040d5e:	687b      	ldr	r3, [r7, #4]
 8040d60:	685b      	ldr	r3, [r3, #4]
 8040d62:	2b00      	cmp	r3, #0
 8040d64:	d000      	beq.n	8040d68 <HAL_RCC_OscConfig+0x60>
 8040d66:	e06b      	b.n	8040e40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8040d68:	2301      	movs	r3, #1
 8040d6a:	e2d8      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040d6c:	687b      	ldr	r3, [r7, #4]
 8040d6e:	685b      	ldr	r3, [r3, #4]
 8040d70:	2b01      	cmp	r3, #1
 8040d72:	d107      	bne.n	8040d84 <HAL_RCC_OscConfig+0x7c>
 8040d74:	4baf      	ldr	r3, [pc, #700]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d76:	681a      	ldr	r2, [r3, #0]
 8040d78:	4bae      	ldr	r3, [pc, #696]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d7a:	2180      	movs	r1, #128	; 0x80
 8040d7c:	0249      	lsls	r1, r1, #9
 8040d7e:	430a      	orrs	r2, r1
 8040d80:	601a      	str	r2, [r3, #0]
 8040d82:	e02f      	b.n	8040de4 <HAL_RCC_OscConfig+0xdc>
 8040d84:	687b      	ldr	r3, [r7, #4]
 8040d86:	685b      	ldr	r3, [r3, #4]
 8040d88:	2b00      	cmp	r3, #0
 8040d8a:	d10c      	bne.n	8040da6 <HAL_RCC_OscConfig+0x9e>
 8040d8c:	4ba9      	ldr	r3, [pc, #676]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d8e:	681a      	ldr	r2, [r3, #0]
 8040d90:	4ba8      	ldr	r3, [pc, #672]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d92:	49a9      	ldr	r1, [pc, #676]	; (8041038 <HAL_RCC_OscConfig+0x330>)
 8040d94:	400a      	ands	r2, r1
 8040d96:	601a      	str	r2, [r3, #0]
 8040d98:	4ba6      	ldr	r3, [pc, #664]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d9a:	681a      	ldr	r2, [r3, #0]
 8040d9c:	4ba5      	ldr	r3, [pc, #660]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040d9e:	49a7      	ldr	r1, [pc, #668]	; (804103c <HAL_RCC_OscConfig+0x334>)
 8040da0:	400a      	ands	r2, r1
 8040da2:	601a      	str	r2, [r3, #0]
 8040da4:	e01e      	b.n	8040de4 <HAL_RCC_OscConfig+0xdc>
 8040da6:	687b      	ldr	r3, [r7, #4]
 8040da8:	685b      	ldr	r3, [r3, #4]
 8040daa:	2b05      	cmp	r3, #5
 8040dac:	d10e      	bne.n	8040dcc <HAL_RCC_OscConfig+0xc4>
 8040dae:	4ba1      	ldr	r3, [pc, #644]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040db0:	681a      	ldr	r2, [r3, #0]
 8040db2:	4ba0      	ldr	r3, [pc, #640]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040db4:	2180      	movs	r1, #128	; 0x80
 8040db6:	02c9      	lsls	r1, r1, #11
 8040db8:	430a      	orrs	r2, r1
 8040dba:	601a      	str	r2, [r3, #0]
 8040dbc:	4b9d      	ldr	r3, [pc, #628]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dbe:	681a      	ldr	r2, [r3, #0]
 8040dc0:	4b9c      	ldr	r3, [pc, #624]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dc2:	2180      	movs	r1, #128	; 0x80
 8040dc4:	0249      	lsls	r1, r1, #9
 8040dc6:	430a      	orrs	r2, r1
 8040dc8:	601a      	str	r2, [r3, #0]
 8040dca:	e00b      	b.n	8040de4 <HAL_RCC_OscConfig+0xdc>
 8040dcc:	4b99      	ldr	r3, [pc, #612]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dce:	681a      	ldr	r2, [r3, #0]
 8040dd0:	4b98      	ldr	r3, [pc, #608]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dd2:	4999      	ldr	r1, [pc, #612]	; (8041038 <HAL_RCC_OscConfig+0x330>)
 8040dd4:	400a      	ands	r2, r1
 8040dd6:	601a      	str	r2, [r3, #0]
 8040dd8:	4b96      	ldr	r3, [pc, #600]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dda:	681a      	ldr	r2, [r3, #0]
 8040ddc:	4b95      	ldr	r3, [pc, #596]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040dde:	4997      	ldr	r1, [pc, #604]	; (804103c <HAL_RCC_OscConfig+0x334>)
 8040de0:	400a      	ands	r2, r1
 8040de2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040de4:	687b      	ldr	r3, [r7, #4]
 8040de6:	685b      	ldr	r3, [r3, #4]
 8040de8:	2b00      	cmp	r3, #0
 8040dea:	d014      	beq.n	8040e16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040dec:	f7ff fd02 	bl	80407f4 <HAL_GetTick>
 8040df0:	0003      	movs	r3, r0
 8040df2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040df4:	e008      	b.n	8040e08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8040df6:	f7ff fcfd 	bl	80407f4 <HAL_GetTick>
 8040dfa:	0002      	movs	r2, r0
 8040dfc:	69bb      	ldr	r3, [r7, #24]
 8040dfe:	1ad3      	subs	r3, r2, r3
 8040e00:	2b64      	cmp	r3, #100	; 0x64
 8040e02:	d901      	bls.n	8040e08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8040e04:	2303      	movs	r3, #3
 8040e06:	e28a      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040e08:	4b8a      	ldr	r3, [pc, #552]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e0a:	681a      	ldr	r2, [r3, #0]
 8040e0c:	2380      	movs	r3, #128	; 0x80
 8040e0e:	029b      	lsls	r3, r3, #10
 8040e10:	4013      	ands	r3, r2
 8040e12:	d0f0      	beq.n	8040df6 <HAL_RCC_OscConfig+0xee>
 8040e14:	e015      	b.n	8040e42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040e16:	f7ff fced 	bl	80407f4 <HAL_GetTick>
 8040e1a:	0003      	movs	r3, r0
 8040e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8040e1e:	e008      	b.n	8040e32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8040e20:	f7ff fce8 	bl	80407f4 <HAL_GetTick>
 8040e24:	0002      	movs	r2, r0
 8040e26:	69bb      	ldr	r3, [r7, #24]
 8040e28:	1ad3      	subs	r3, r2, r3
 8040e2a:	2b64      	cmp	r3, #100	; 0x64
 8040e2c:	d901      	bls.n	8040e32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8040e2e:	2303      	movs	r3, #3
 8040e30:	e275      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8040e32:	4b80      	ldr	r3, [pc, #512]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e34:	681a      	ldr	r2, [r3, #0]
 8040e36:	2380      	movs	r3, #128	; 0x80
 8040e38:	029b      	lsls	r3, r3, #10
 8040e3a:	4013      	ands	r3, r2
 8040e3c:	d1f0      	bne.n	8040e20 <HAL_RCC_OscConfig+0x118>
 8040e3e:	e000      	b.n	8040e42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040e40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8040e42:	687b      	ldr	r3, [r7, #4]
 8040e44:	681b      	ldr	r3, [r3, #0]
 8040e46:	2202      	movs	r2, #2
 8040e48:	4013      	ands	r3, r2
 8040e4a:	d100      	bne.n	8040e4e <HAL_RCC_OscConfig+0x146>
 8040e4c:	e069      	b.n	8040f22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8040e4e:	4b79      	ldr	r3, [pc, #484]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e50:	685b      	ldr	r3, [r3, #4]
 8040e52:	220c      	movs	r2, #12
 8040e54:	4013      	ands	r3, r2
 8040e56:	d00b      	beq.n	8040e70 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8040e58:	4b76      	ldr	r3, [pc, #472]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e5a:	685b      	ldr	r3, [r3, #4]
 8040e5c:	220c      	movs	r2, #12
 8040e5e:	4013      	ands	r3, r2
 8040e60:	2b08      	cmp	r3, #8
 8040e62:	d11c      	bne.n	8040e9e <HAL_RCC_OscConfig+0x196>
 8040e64:	4b73      	ldr	r3, [pc, #460]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e66:	685a      	ldr	r2, [r3, #4]
 8040e68:	2380      	movs	r3, #128	; 0x80
 8040e6a:	025b      	lsls	r3, r3, #9
 8040e6c:	4013      	ands	r3, r2
 8040e6e:	d116      	bne.n	8040e9e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8040e70:	4b70      	ldr	r3, [pc, #448]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e72:	681b      	ldr	r3, [r3, #0]
 8040e74:	2202      	movs	r2, #2
 8040e76:	4013      	ands	r3, r2
 8040e78:	d005      	beq.n	8040e86 <HAL_RCC_OscConfig+0x17e>
 8040e7a:	687b      	ldr	r3, [r7, #4]
 8040e7c:	68db      	ldr	r3, [r3, #12]
 8040e7e:	2b01      	cmp	r3, #1
 8040e80:	d001      	beq.n	8040e86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8040e82:	2301      	movs	r3, #1
 8040e84:	e24b      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8040e86:	4b6b      	ldr	r3, [pc, #428]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e88:	681b      	ldr	r3, [r3, #0]
 8040e8a:	22f8      	movs	r2, #248	; 0xf8
 8040e8c:	4393      	bics	r3, r2
 8040e8e:	0019      	movs	r1, r3
 8040e90:	687b      	ldr	r3, [r7, #4]
 8040e92:	691b      	ldr	r3, [r3, #16]
 8040e94:	00da      	lsls	r2, r3, #3
 8040e96:	4b67      	ldr	r3, [pc, #412]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040e98:	430a      	orrs	r2, r1
 8040e9a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8040e9c:	e041      	b.n	8040f22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8040e9e:	687b      	ldr	r3, [r7, #4]
 8040ea0:	68db      	ldr	r3, [r3, #12]
 8040ea2:	2b00      	cmp	r3, #0
 8040ea4:	d024      	beq.n	8040ef0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8040ea6:	4b63      	ldr	r3, [pc, #396]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040ea8:	681a      	ldr	r2, [r3, #0]
 8040eaa:	4b62      	ldr	r3, [pc, #392]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040eac:	2101      	movs	r1, #1
 8040eae:	430a      	orrs	r2, r1
 8040eb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040eb2:	f7ff fc9f 	bl	80407f4 <HAL_GetTick>
 8040eb6:	0003      	movs	r3, r0
 8040eb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8040eba:	e008      	b.n	8040ece <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8040ebc:	f7ff fc9a 	bl	80407f4 <HAL_GetTick>
 8040ec0:	0002      	movs	r2, r0
 8040ec2:	69bb      	ldr	r3, [r7, #24]
 8040ec4:	1ad3      	subs	r3, r2, r3
 8040ec6:	2b02      	cmp	r3, #2
 8040ec8:	d901      	bls.n	8040ece <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8040eca:	2303      	movs	r3, #3
 8040ecc:	e227      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8040ece:	4b59      	ldr	r3, [pc, #356]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040ed0:	681b      	ldr	r3, [r3, #0]
 8040ed2:	2202      	movs	r2, #2
 8040ed4:	4013      	ands	r3, r2
 8040ed6:	d0f1      	beq.n	8040ebc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8040ed8:	4b56      	ldr	r3, [pc, #344]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040eda:	681b      	ldr	r3, [r3, #0]
 8040edc:	22f8      	movs	r2, #248	; 0xf8
 8040ede:	4393      	bics	r3, r2
 8040ee0:	0019      	movs	r1, r3
 8040ee2:	687b      	ldr	r3, [r7, #4]
 8040ee4:	691b      	ldr	r3, [r3, #16]
 8040ee6:	00da      	lsls	r2, r3, #3
 8040ee8:	4b52      	ldr	r3, [pc, #328]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040eea:	430a      	orrs	r2, r1
 8040eec:	601a      	str	r2, [r3, #0]
 8040eee:	e018      	b.n	8040f22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8040ef0:	4b50      	ldr	r3, [pc, #320]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040ef2:	681a      	ldr	r2, [r3, #0]
 8040ef4:	4b4f      	ldr	r3, [pc, #316]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040ef6:	2101      	movs	r1, #1
 8040ef8:	438a      	bics	r2, r1
 8040efa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040efc:	f7ff fc7a 	bl	80407f4 <HAL_GetTick>
 8040f00:	0003      	movs	r3, r0
 8040f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8040f04:	e008      	b.n	8040f18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8040f06:	f7ff fc75 	bl	80407f4 <HAL_GetTick>
 8040f0a:	0002      	movs	r2, r0
 8040f0c:	69bb      	ldr	r3, [r7, #24]
 8040f0e:	1ad3      	subs	r3, r2, r3
 8040f10:	2b02      	cmp	r3, #2
 8040f12:	d901      	bls.n	8040f18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8040f14:	2303      	movs	r3, #3
 8040f16:	e202      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8040f18:	4b46      	ldr	r3, [pc, #280]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f1a:	681b      	ldr	r3, [r3, #0]
 8040f1c:	2202      	movs	r2, #2
 8040f1e:	4013      	ands	r3, r2
 8040f20:	d1f1      	bne.n	8040f06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8040f22:	687b      	ldr	r3, [r7, #4]
 8040f24:	681b      	ldr	r3, [r3, #0]
 8040f26:	2208      	movs	r2, #8
 8040f28:	4013      	ands	r3, r2
 8040f2a:	d036      	beq.n	8040f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8040f2c:	687b      	ldr	r3, [r7, #4]
 8040f2e:	69db      	ldr	r3, [r3, #28]
 8040f30:	2b00      	cmp	r3, #0
 8040f32:	d019      	beq.n	8040f68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8040f34:	4b3f      	ldr	r3, [pc, #252]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040f38:	4b3e      	ldr	r3, [pc, #248]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f3a:	2101      	movs	r1, #1
 8040f3c:	430a      	orrs	r2, r1
 8040f3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8040f40:	f7ff fc58 	bl	80407f4 <HAL_GetTick>
 8040f44:	0003      	movs	r3, r0
 8040f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8040f48:	e008      	b.n	8040f5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8040f4a:	f7ff fc53 	bl	80407f4 <HAL_GetTick>
 8040f4e:	0002      	movs	r2, r0
 8040f50:	69bb      	ldr	r3, [r7, #24]
 8040f52:	1ad3      	subs	r3, r2, r3
 8040f54:	2b02      	cmp	r3, #2
 8040f56:	d901      	bls.n	8040f5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8040f58:	2303      	movs	r3, #3
 8040f5a:	e1e0      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8040f5c:	4b35      	ldr	r3, [pc, #212]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f60:	2202      	movs	r2, #2
 8040f62:	4013      	ands	r3, r2
 8040f64:	d0f1      	beq.n	8040f4a <HAL_RCC_OscConfig+0x242>
 8040f66:	e018      	b.n	8040f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8040f68:	4b32      	ldr	r3, [pc, #200]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040f6c:	4b31      	ldr	r3, [pc, #196]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f6e:	2101      	movs	r1, #1
 8040f70:	438a      	bics	r2, r1
 8040f72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8040f74:	f7ff fc3e 	bl	80407f4 <HAL_GetTick>
 8040f78:	0003      	movs	r3, r0
 8040f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8040f7c:	e008      	b.n	8040f90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8040f7e:	f7ff fc39 	bl	80407f4 <HAL_GetTick>
 8040f82:	0002      	movs	r2, r0
 8040f84:	69bb      	ldr	r3, [r7, #24]
 8040f86:	1ad3      	subs	r3, r2, r3
 8040f88:	2b02      	cmp	r3, #2
 8040f8a:	d901      	bls.n	8040f90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8040f8c:	2303      	movs	r3, #3
 8040f8e:	e1c6      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8040f90:	4b28      	ldr	r3, [pc, #160]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f94:	2202      	movs	r2, #2
 8040f96:	4013      	ands	r3, r2
 8040f98:	d1f1      	bne.n	8040f7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8040f9a:	687b      	ldr	r3, [r7, #4]
 8040f9c:	681b      	ldr	r3, [r3, #0]
 8040f9e:	2204      	movs	r2, #4
 8040fa0:	4013      	ands	r3, r2
 8040fa2:	d100      	bne.n	8040fa6 <HAL_RCC_OscConfig+0x29e>
 8040fa4:	e0b4      	b.n	8041110 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8040fa6:	201f      	movs	r0, #31
 8040fa8:	183b      	adds	r3, r7, r0
 8040faa:	2200      	movs	r2, #0
 8040fac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8040fae:	4b21      	ldr	r3, [pc, #132]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040fb0:	69da      	ldr	r2, [r3, #28]
 8040fb2:	2380      	movs	r3, #128	; 0x80
 8040fb4:	055b      	lsls	r3, r3, #21
 8040fb6:	4013      	ands	r3, r2
 8040fb8:	d110      	bne.n	8040fdc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8040fba:	4b1e      	ldr	r3, [pc, #120]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040fbc:	69da      	ldr	r2, [r3, #28]
 8040fbe:	4b1d      	ldr	r3, [pc, #116]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040fc0:	2180      	movs	r1, #128	; 0x80
 8040fc2:	0549      	lsls	r1, r1, #21
 8040fc4:	430a      	orrs	r2, r1
 8040fc6:	61da      	str	r2, [r3, #28]
 8040fc8:	4b1a      	ldr	r3, [pc, #104]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8040fca:	69da      	ldr	r2, [r3, #28]
 8040fcc:	2380      	movs	r3, #128	; 0x80
 8040fce:	055b      	lsls	r3, r3, #21
 8040fd0:	4013      	ands	r3, r2
 8040fd2:	60fb      	str	r3, [r7, #12]
 8040fd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8040fd6:	183b      	adds	r3, r7, r0
 8040fd8:	2201      	movs	r2, #1
 8040fda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8040fdc:	4b18      	ldr	r3, [pc, #96]	; (8041040 <HAL_RCC_OscConfig+0x338>)
 8040fde:	681a      	ldr	r2, [r3, #0]
 8040fe0:	2380      	movs	r3, #128	; 0x80
 8040fe2:	005b      	lsls	r3, r3, #1
 8040fe4:	4013      	ands	r3, r2
 8040fe6:	d11a      	bne.n	804101e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8040fe8:	4b15      	ldr	r3, [pc, #84]	; (8041040 <HAL_RCC_OscConfig+0x338>)
 8040fea:	681a      	ldr	r2, [r3, #0]
 8040fec:	4b14      	ldr	r3, [pc, #80]	; (8041040 <HAL_RCC_OscConfig+0x338>)
 8040fee:	2180      	movs	r1, #128	; 0x80
 8040ff0:	0049      	lsls	r1, r1, #1
 8040ff2:	430a      	orrs	r2, r1
 8040ff4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8040ff6:	f7ff fbfd 	bl	80407f4 <HAL_GetTick>
 8040ffa:	0003      	movs	r3, r0
 8040ffc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8040ffe:	e008      	b.n	8041012 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041000:	f7ff fbf8 	bl	80407f4 <HAL_GetTick>
 8041004:	0002      	movs	r2, r0
 8041006:	69bb      	ldr	r3, [r7, #24]
 8041008:	1ad3      	subs	r3, r2, r3
 804100a:	2b64      	cmp	r3, #100	; 0x64
 804100c:	d901      	bls.n	8041012 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 804100e:	2303      	movs	r3, #3
 8041010:	e185      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041012:	4b0b      	ldr	r3, [pc, #44]	; (8041040 <HAL_RCC_OscConfig+0x338>)
 8041014:	681a      	ldr	r2, [r3, #0]
 8041016:	2380      	movs	r3, #128	; 0x80
 8041018:	005b      	lsls	r3, r3, #1
 804101a:	4013      	ands	r3, r2
 804101c:	d0f0      	beq.n	8041000 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804101e:	687b      	ldr	r3, [r7, #4]
 8041020:	689b      	ldr	r3, [r3, #8]
 8041022:	2b01      	cmp	r3, #1
 8041024:	d10e      	bne.n	8041044 <HAL_RCC_OscConfig+0x33c>
 8041026:	4b03      	ldr	r3, [pc, #12]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 8041028:	6a1a      	ldr	r2, [r3, #32]
 804102a:	4b02      	ldr	r3, [pc, #8]	; (8041034 <HAL_RCC_OscConfig+0x32c>)
 804102c:	2101      	movs	r1, #1
 804102e:	430a      	orrs	r2, r1
 8041030:	621a      	str	r2, [r3, #32]
 8041032:	e035      	b.n	80410a0 <HAL_RCC_OscConfig+0x398>
 8041034:	40021000 	.word	0x40021000
 8041038:	fffeffff 	.word	0xfffeffff
 804103c:	fffbffff 	.word	0xfffbffff
 8041040:	40007000 	.word	0x40007000
 8041044:	687b      	ldr	r3, [r7, #4]
 8041046:	689b      	ldr	r3, [r3, #8]
 8041048:	2b00      	cmp	r3, #0
 804104a:	d10c      	bne.n	8041066 <HAL_RCC_OscConfig+0x35e>
 804104c:	4bb6      	ldr	r3, [pc, #728]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804104e:	6a1a      	ldr	r2, [r3, #32]
 8041050:	4bb5      	ldr	r3, [pc, #724]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041052:	2101      	movs	r1, #1
 8041054:	438a      	bics	r2, r1
 8041056:	621a      	str	r2, [r3, #32]
 8041058:	4bb3      	ldr	r3, [pc, #716]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804105a:	6a1a      	ldr	r2, [r3, #32]
 804105c:	4bb2      	ldr	r3, [pc, #712]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804105e:	2104      	movs	r1, #4
 8041060:	438a      	bics	r2, r1
 8041062:	621a      	str	r2, [r3, #32]
 8041064:	e01c      	b.n	80410a0 <HAL_RCC_OscConfig+0x398>
 8041066:	687b      	ldr	r3, [r7, #4]
 8041068:	689b      	ldr	r3, [r3, #8]
 804106a:	2b05      	cmp	r3, #5
 804106c:	d10c      	bne.n	8041088 <HAL_RCC_OscConfig+0x380>
 804106e:	4bae      	ldr	r3, [pc, #696]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041070:	6a1a      	ldr	r2, [r3, #32]
 8041072:	4bad      	ldr	r3, [pc, #692]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041074:	2104      	movs	r1, #4
 8041076:	430a      	orrs	r2, r1
 8041078:	621a      	str	r2, [r3, #32]
 804107a:	4bab      	ldr	r3, [pc, #684]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804107c:	6a1a      	ldr	r2, [r3, #32]
 804107e:	4baa      	ldr	r3, [pc, #680]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041080:	2101      	movs	r1, #1
 8041082:	430a      	orrs	r2, r1
 8041084:	621a      	str	r2, [r3, #32]
 8041086:	e00b      	b.n	80410a0 <HAL_RCC_OscConfig+0x398>
 8041088:	4ba7      	ldr	r3, [pc, #668]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804108a:	6a1a      	ldr	r2, [r3, #32]
 804108c:	4ba6      	ldr	r3, [pc, #664]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804108e:	2101      	movs	r1, #1
 8041090:	438a      	bics	r2, r1
 8041092:	621a      	str	r2, [r3, #32]
 8041094:	4ba4      	ldr	r3, [pc, #656]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041096:	6a1a      	ldr	r2, [r3, #32]
 8041098:	4ba3      	ldr	r3, [pc, #652]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804109a:	2104      	movs	r1, #4
 804109c:	438a      	bics	r2, r1
 804109e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80410a0:	687b      	ldr	r3, [r7, #4]
 80410a2:	689b      	ldr	r3, [r3, #8]
 80410a4:	2b00      	cmp	r3, #0
 80410a6:	d014      	beq.n	80410d2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80410a8:	f7ff fba4 	bl	80407f4 <HAL_GetTick>
 80410ac:	0003      	movs	r3, r0
 80410ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80410b0:	e009      	b.n	80410c6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80410b2:	f7ff fb9f 	bl	80407f4 <HAL_GetTick>
 80410b6:	0002      	movs	r2, r0
 80410b8:	69bb      	ldr	r3, [r7, #24]
 80410ba:	1ad3      	subs	r3, r2, r3
 80410bc:	4a9b      	ldr	r2, [pc, #620]	; (804132c <HAL_RCC_OscConfig+0x624>)
 80410be:	4293      	cmp	r3, r2
 80410c0:	d901      	bls.n	80410c6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80410c2:	2303      	movs	r3, #3
 80410c4:	e12b      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80410c6:	4b98      	ldr	r3, [pc, #608]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80410c8:	6a1b      	ldr	r3, [r3, #32]
 80410ca:	2202      	movs	r2, #2
 80410cc:	4013      	ands	r3, r2
 80410ce:	d0f0      	beq.n	80410b2 <HAL_RCC_OscConfig+0x3aa>
 80410d0:	e013      	b.n	80410fa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80410d2:	f7ff fb8f 	bl	80407f4 <HAL_GetTick>
 80410d6:	0003      	movs	r3, r0
 80410d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80410da:	e009      	b.n	80410f0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80410dc:	f7ff fb8a 	bl	80407f4 <HAL_GetTick>
 80410e0:	0002      	movs	r2, r0
 80410e2:	69bb      	ldr	r3, [r7, #24]
 80410e4:	1ad3      	subs	r3, r2, r3
 80410e6:	4a91      	ldr	r2, [pc, #580]	; (804132c <HAL_RCC_OscConfig+0x624>)
 80410e8:	4293      	cmp	r3, r2
 80410ea:	d901      	bls.n	80410f0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80410ec:	2303      	movs	r3, #3
 80410ee:	e116      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80410f0:	4b8d      	ldr	r3, [pc, #564]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80410f2:	6a1b      	ldr	r3, [r3, #32]
 80410f4:	2202      	movs	r2, #2
 80410f6:	4013      	ands	r3, r2
 80410f8:	d1f0      	bne.n	80410dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80410fa:	231f      	movs	r3, #31
 80410fc:	18fb      	adds	r3, r7, r3
 80410fe:	781b      	ldrb	r3, [r3, #0]
 8041100:	2b01      	cmp	r3, #1
 8041102:	d105      	bne.n	8041110 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041104:	4b88      	ldr	r3, [pc, #544]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041106:	69da      	ldr	r2, [r3, #28]
 8041108:	4b87      	ldr	r3, [pc, #540]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804110a:	4989      	ldr	r1, [pc, #548]	; (8041330 <HAL_RCC_OscConfig+0x628>)
 804110c:	400a      	ands	r2, r1
 804110e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8041110:	687b      	ldr	r3, [r7, #4]
 8041112:	681b      	ldr	r3, [r3, #0]
 8041114:	2210      	movs	r2, #16
 8041116:	4013      	ands	r3, r2
 8041118:	d063      	beq.n	80411e2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 804111a:	687b      	ldr	r3, [r7, #4]
 804111c:	695b      	ldr	r3, [r3, #20]
 804111e:	2b01      	cmp	r3, #1
 8041120:	d12a      	bne.n	8041178 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8041122:	4b81      	ldr	r3, [pc, #516]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041126:	4b80      	ldr	r3, [pc, #512]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041128:	2104      	movs	r1, #4
 804112a:	430a      	orrs	r2, r1
 804112c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 804112e:	4b7e      	ldr	r3, [pc, #504]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041132:	4b7d      	ldr	r3, [pc, #500]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041134:	2101      	movs	r1, #1
 8041136:	430a      	orrs	r2, r1
 8041138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804113a:	f7ff fb5b 	bl	80407f4 <HAL_GetTick>
 804113e:	0003      	movs	r3, r0
 8041140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8041142:	e008      	b.n	8041156 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8041144:	f7ff fb56 	bl	80407f4 <HAL_GetTick>
 8041148:	0002      	movs	r2, r0
 804114a:	69bb      	ldr	r3, [r7, #24]
 804114c:	1ad3      	subs	r3, r2, r3
 804114e:	2b02      	cmp	r3, #2
 8041150:	d901      	bls.n	8041156 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8041152:	2303      	movs	r3, #3
 8041154:	e0e3      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8041156:	4b74      	ldr	r3, [pc, #464]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804115a:	2202      	movs	r2, #2
 804115c:	4013      	ands	r3, r2
 804115e:	d0f1      	beq.n	8041144 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8041160:	4b71      	ldr	r3, [pc, #452]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041164:	22f8      	movs	r2, #248	; 0xf8
 8041166:	4393      	bics	r3, r2
 8041168:	0019      	movs	r1, r3
 804116a:	687b      	ldr	r3, [r7, #4]
 804116c:	699b      	ldr	r3, [r3, #24]
 804116e:	00da      	lsls	r2, r3, #3
 8041170:	4b6d      	ldr	r3, [pc, #436]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041172:	430a      	orrs	r2, r1
 8041174:	635a      	str	r2, [r3, #52]	; 0x34
 8041176:	e034      	b.n	80411e2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8041178:	687b      	ldr	r3, [r7, #4]
 804117a:	695b      	ldr	r3, [r3, #20]
 804117c:	3305      	adds	r3, #5
 804117e:	d111      	bne.n	80411a4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8041180:	4b69      	ldr	r3, [pc, #420]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041184:	4b68      	ldr	r3, [pc, #416]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041186:	2104      	movs	r1, #4
 8041188:	438a      	bics	r2, r1
 804118a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 804118c:	4b66      	ldr	r3, [pc, #408]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041190:	22f8      	movs	r2, #248	; 0xf8
 8041192:	4393      	bics	r3, r2
 8041194:	0019      	movs	r1, r3
 8041196:	687b      	ldr	r3, [r7, #4]
 8041198:	699b      	ldr	r3, [r3, #24]
 804119a:	00da      	lsls	r2, r3, #3
 804119c:	4b62      	ldr	r3, [pc, #392]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804119e:	430a      	orrs	r2, r1
 80411a0:	635a      	str	r2, [r3, #52]	; 0x34
 80411a2:	e01e      	b.n	80411e2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80411a4:	4b60      	ldr	r3, [pc, #384]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80411a8:	4b5f      	ldr	r3, [pc, #380]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411aa:	2104      	movs	r1, #4
 80411ac:	430a      	orrs	r2, r1
 80411ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80411b0:	4b5d      	ldr	r3, [pc, #372]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80411b4:	4b5c      	ldr	r3, [pc, #368]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411b6:	2101      	movs	r1, #1
 80411b8:	438a      	bics	r2, r1
 80411ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80411bc:	f7ff fb1a 	bl	80407f4 <HAL_GetTick>
 80411c0:	0003      	movs	r3, r0
 80411c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80411c4:	e008      	b.n	80411d8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80411c6:	f7ff fb15 	bl	80407f4 <HAL_GetTick>
 80411ca:	0002      	movs	r2, r0
 80411cc:	69bb      	ldr	r3, [r7, #24]
 80411ce:	1ad3      	subs	r3, r2, r3
 80411d0:	2b02      	cmp	r3, #2
 80411d2:	d901      	bls.n	80411d8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80411d4:	2303      	movs	r3, #3
 80411d6:	e0a2      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80411d8:	4b53      	ldr	r3, [pc, #332]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80411dc:	2202      	movs	r2, #2
 80411de:	4013      	ands	r3, r2
 80411e0:	d1f1      	bne.n	80411c6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80411e2:	687b      	ldr	r3, [r7, #4]
 80411e4:	6a1b      	ldr	r3, [r3, #32]
 80411e6:	2b00      	cmp	r3, #0
 80411e8:	d100      	bne.n	80411ec <HAL_RCC_OscConfig+0x4e4>
 80411ea:	e097      	b.n	804131c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80411ec:	4b4e      	ldr	r3, [pc, #312]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80411ee:	685b      	ldr	r3, [r3, #4]
 80411f0:	220c      	movs	r2, #12
 80411f2:	4013      	ands	r3, r2
 80411f4:	2b08      	cmp	r3, #8
 80411f6:	d100      	bne.n	80411fa <HAL_RCC_OscConfig+0x4f2>
 80411f8:	e06b      	b.n	80412d2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80411fa:	687b      	ldr	r3, [r7, #4]
 80411fc:	6a1b      	ldr	r3, [r3, #32]
 80411fe:	2b02      	cmp	r3, #2
 8041200:	d14c      	bne.n	804129c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041202:	4b49      	ldr	r3, [pc, #292]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041204:	681a      	ldr	r2, [r3, #0]
 8041206:	4b48      	ldr	r3, [pc, #288]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041208:	494a      	ldr	r1, [pc, #296]	; (8041334 <HAL_RCC_OscConfig+0x62c>)
 804120a:	400a      	ands	r2, r1
 804120c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804120e:	f7ff faf1 	bl	80407f4 <HAL_GetTick>
 8041212:	0003      	movs	r3, r0
 8041214:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041216:	e008      	b.n	804122a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041218:	f7ff faec 	bl	80407f4 <HAL_GetTick>
 804121c:	0002      	movs	r2, r0
 804121e:	69bb      	ldr	r3, [r7, #24]
 8041220:	1ad3      	subs	r3, r2, r3
 8041222:	2b02      	cmp	r3, #2
 8041224:	d901      	bls.n	804122a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8041226:	2303      	movs	r3, #3
 8041228:	e079      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 804122a:	4b3f      	ldr	r3, [pc, #252]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804122c:	681a      	ldr	r2, [r3, #0]
 804122e:	2380      	movs	r3, #128	; 0x80
 8041230:	049b      	lsls	r3, r3, #18
 8041232:	4013      	ands	r3, r2
 8041234:	d1f0      	bne.n	8041218 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041236:	4b3c      	ldr	r3, [pc, #240]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804123a:	220f      	movs	r2, #15
 804123c:	4393      	bics	r3, r2
 804123e:	0019      	movs	r1, r3
 8041240:	687b      	ldr	r3, [r7, #4]
 8041242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8041244:	4b38      	ldr	r3, [pc, #224]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041246:	430a      	orrs	r2, r1
 8041248:	62da      	str	r2, [r3, #44]	; 0x2c
 804124a:	4b37      	ldr	r3, [pc, #220]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804124c:	685b      	ldr	r3, [r3, #4]
 804124e:	4a3a      	ldr	r2, [pc, #232]	; (8041338 <HAL_RCC_OscConfig+0x630>)
 8041250:	4013      	ands	r3, r2
 8041252:	0019      	movs	r1, r3
 8041254:	687b      	ldr	r3, [r7, #4]
 8041256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8041258:	687b      	ldr	r3, [r7, #4]
 804125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804125c:	431a      	orrs	r2, r3
 804125e:	4b32      	ldr	r3, [pc, #200]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041260:	430a      	orrs	r2, r1
 8041262:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041264:	4b30      	ldr	r3, [pc, #192]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041266:	681a      	ldr	r2, [r3, #0]
 8041268:	4b2f      	ldr	r3, [pc, #188]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804126a:	2180      	movs	r1, #128	; 0x80
 804126c:	0449      	lsls	r1, r1, #17
 804126e:	430a      	orrs	r2, r1
 8041270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041272:	f7ff fabf 	bl	80407f4 <HAL_GetTick>
 8041276:	0003      	movs	r3, r0
 8041278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 804127a:	e008      	b.n	804128e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804127c:	f7ff faba 	bl	80407f4 <HAL_GetTick>
 8041280:	0002      	movs	r2, r0
 8041282:	69bb      	ldr	r3, [r7, #24]
 8041284:	1ad3      	subs	r3, r2, r3
 8041286:	2b02      	cmp	r3, #2
 8041288:	d901      	bls.n	804128e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 804128a:	2303      	movs	r3, #3
 804128c:	e047      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 804128e:	4b26      	ldr	r3, [pc, #152]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 8041290:	681a      	ldr	r2, [r3, #0]
 8041292:	2380      	movs	r3, #128	; 0x80
 8041294:	049b      	lsls	r3, r3, #18
 8041296:	4013      	ands	r3, r2
 8041298:	d0f0      	beq.n	804127c <HAL_RCC_OscConfig+0x574>
 804129a:	e03f      	b.n	804131c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804129c:	4b22      	ldr	r3, [pc, #136]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 804129e:	681a      	ldr	r2, [r3, #0]
 80412a0:	4b21      	ldr	r3, [pc, #132]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80412a2:	4924      	ldr	r1, [pc, #144]	; (8041334 <HAL_RCC_OscConfig+0x62c>)
 80412a4:	400a      	ands	r2, r1
 80412a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80412a8:	f7ff faa4 	bl	80407f4 <HAL_GetTick>
 80412ac:	0003      	movs	r3, r0
 80412ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80412b0:	e008      	b.n	80412c4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80412b2:	f7ff fa9f 	bl	80407f4 <HAL_GetTick>
 80412b6:	0002      	movs	r2, r0
 80412b8:	69bb      	ldr	r3, [r7, #24]
 80412ba:	1ad3      	subs	r3, r2, r3
 80412bc:	2b02      	cmp	r3, #2
 80412be:	d901      	bls.n	80412c4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80412c0:	2303      	movs	r3, #3
 80412c2:	e02c      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80412c4:	4b18      	ldr	r3, [pc, #96]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80412c6:	681a      	ldr	r2, [r3, #0]
 80412c8:	2380      	movs	r3, #128	; 0x80
 80412ca:	049b      	lsls	r3, r3, #18
 80412cc:	4013      	ands	r3, r2
 80412ce:	d1f0      	bne.n	80412b2 <HAL_RCC_OscConfig+0x5aa>
 80412d0:	e024      	b.n	804131c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80412d2:	687b      	ldr	r3, [r7, #4]
 80412d4:	6a1b      	ldr	r3, [r3, #32]
 80412d6:	2b01      	cmp	r3, #1
 80412d8:	d101      	bne.n	80412de <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80412da:	2301      	movs	r3, #1
 80412dc:	e01f      	b.n	804131e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80412de:	4b12      	ldr	r3, [pc, #72]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80412e0:	685b      	ldr	r3, [r3, #4]
 80412e2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80412e4:	4b10      	ldr	r3, [pc, #64]	; (8041328 <HAL_RCC_OscConfig+0x620>)
 80412e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80412e8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80412ea:	697a      	ldr	r2, [r7, #20]
 80412ec:	2380      	movs	r3, #128	; 0x80
 80412ee:	025b      	lsls	r3, r3, #9
 80412f0:	401a      	ands	r2, r3
 80412f2:	687b      	ldr	r3, [r7, #4]
 80412f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412f6:	429a      	cmp	r2, r3
 80412f8:	d10e      	bne.n	8041318 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80412fa:	693b      	ldr	r3, [r7, #16]
 80412fc:	220f      	movs	r2, #15
 80412fe:	401a      	ands	r2, r3
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041304:	429a      	cmp	r2, r3
 8041306:	d107      	bne.n	8041318 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8041308:	697a      	ldr	r2, [r7, #20]
 804130a:	23f0      	movs	r3, #240	; 0xf0
 804130c:	039b      	lsls	r3, r3, #14
 804130e:	401a      	ands	r2, r3
 8041310:	687b      	ldr	r3, [r7, #4]
 8041312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8041314:	429a      	cmp	r2, r3
 8041316:	d001      	beq.n	804131c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8041318:	2301      	movs	r3, #1
 804131a:	e000      	b.n	804131e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 804131c:	2300      	movs	r3, #0
}
 804131e:	0018      	movs	r0, r3
 8041320:	46bd      	mov	sp, r7
 8041322:	b008      	add	sp, #32
 8041324:	bd80      	pop	{r7, pc}
 8041326:	46c0      	nop			; (mov r8, r8)
 8041328:	40021000 	.word	0x40021000
 804132c:	00001388 	.word	0x00001388
 8041330:	efffffff 	.word	0xefffffff
 8041334:	feffffff 	.word	0xfeffffff
 8041338:	ffc2ffff 	.word	0xffc2ffff

0804133c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804133c:	b580      	push	{r7, lr}
 804133e:	b084      	sub	sp, #16
 8041340:	af00      	add	r7, sp, #0
 8041342:	6078      	str	r0, [r7, #4]
 8041344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041346:	687b      	ldr	r3, [r7, #4]
 8041348:	2b00      	cmp	r3, #0
 804134a:	d101      	bne.n	8041350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 804134c:	2301      	movs	r3, #1
 804134e:	e0b3      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041350:	4b5b      	ldr	r3, [pc, #364]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041352:	681b      	ldr	r3, [r3, #0]
 8041354:	2201      	movs	r2, #1
 8041356:	4013      	ands	r3, r2
 8041358:	683a      	ldr	r2, [r7, #0]
 804135a:	429a      	cmp	r2, r3
 804135c:	d911      	bls.n	8041382 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804135e:	4b58      	ldr	r3, [pc, #352]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041360:	681b      	ldr	r3, [r3, #0]
 8041362:	2201      	movs	r2, #1
 8041364:	4393      	bics	r3, r2
 8041366:	0019      	movs	r1, r3
 8041368:	4b55      	ldr	r3, [pc, #340]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 804136a:	683a      	ldr	r2, [r7, #0]
 804136c:	430a      	orrs	r2, r1
 804136e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041370:	4b53      	ldr	r3, [pc, #332]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041372:	681b      	ldr	r3, [r3, #0]
 8041374:	2201      	movs	r2, #1
 8041376:	4013      	ands	r3, r2
 8041378:	683a      	ldr	r2, [r7, #0]
 804137a:	429a      	cmp	r2, r3
 804137c:	d001      	beq.n	8041382 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 804137e:	2301      	movs	r3, #1
 8041380:	e09a      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041382:	687b      	ldr	r3, [r7, #4]
 8041384:	681b      	ldr	r3, [r3, #0]
 8041386:	2202      	movs	r2, #2
 8041388:	4013      	ands	r3, r2
 804138a:	d015      	beq.n	80413b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	681b      	ldr	r3, [r3, #0]
 8041390:	2204      	movs	r2, #4
 8041392:	4013      	ands	r3, r2
 8041394:	d006      	beq.n	80413a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8041396:	4b4b      	ldr	r3, [pc, #300]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041398:	685a      	ldr	r2, [r3, #4]
 804139a:	4b4a      	ldr	r3, [pc, #296]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 804139c:	21e0      	movs	r1, #224	; 0xe0
 804139e:	00c9      	lsls	r1, r1, #3
 80413a0:	430a      	orrs	r2, r1
 80413a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80413a4:	4b47      	ldr	r3, [pc, #284]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 80413a6:	685b      	ldr	r3, [r3, #4]
 80413a8:	22f0      	movs	r2, #240	; 0xf0
 80413aa:	4393      	bics	r3, r2
 80413ac:	0019      	movs	r1, r3
 80413ae:	687b      	ldr	r3, [r7, #4]
 80413b0:	689a      	ldr	r2, [r3, #8]
 80413b2:	4b44      	ldr	r3, [pc, #272]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 80413b4:	430a      	orrs	r2, r1
 80413b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80413b8:	687b      	ldr	r3, [r7, #4]
 80413ba:	681b      	ldr	r3, [r3, #0]
 80413bc:	2201      	movs	r2, #1
 80413be:	4013      	ands	r3, r2
 80413c0:	d040      	beq.n	8041444 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80413c2:	687b      	ldr	r3, [r7, #4]
 80413c4:	685b      	ldr	r3, [r3, #4]
 80413c6:	2b01      	cmp	r3, #1
 80413c8:	d107      	bne.n	80413da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80413ca:	4b3e      	ldr	r3, [pc, #248]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 80413cc:	681a      	ldr	r2, [r3, #0]
 80413ce:	2380      	movs	r3, #128	; 0x80
 80413d0:	029b      	lsls	r3, r3, #10
 80413d2:	4013      	ands	r3, r2
 80413d4:	d114      	bne.n	8041400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80413d6:	2301      	movs	r3, #1
 80413d8:	e06e      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	685b      	ldr	r3, [r3, #4]
 80413de:	2b02      	cmp	r3, #2
 80413e0:	d107      	bne.n	80413f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80413e2:	4b38      	ldr	r3, [pc, #224]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 80413e4:	681a      	ldr	r2, [r3, #0]
 80413e6:	2380      	movs	r3, #128	; 0x80
 80413e8:	049b      	lsls	r3, r3, #18
 80413ea:	4013      	ands	r3, r2
 80413ec:	d108      	bne.n	8041400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80413ee:	2301      	movs	r3, #1
 80413f0:	e062      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80413f2:	4b34      	ldr	r3, [pc, #208]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 80413f4:	681b      	ldr	r3, [r3, #0]
 80413f6:	2202      	movs	r2, #2
 80413f8:	4013      	ands	r3, r2
 80413fa:	d101      	bne.n	8041400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80413fc:	2301      	movs	r3, #1
 80413fe:	e05b      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8041400:	4b30      	ldr	r3, [pc, #192]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041402:	685b      	ldr	r3, [r3, #4]
 8041404:	2203      	movs	r2, #3
 8041406:	4393      	bics	r3, r2
 8041408:	0019      	movs	r1, r3
 804140a:	687b      	ldr	r3, [r7, #4]
 804140c:	685a      	ldr	r2, [r3, #4]
 804140e:	4b2d      	ldr	r3, [pc, #180]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041410:	430a      	orrs	r2, r1
 8041412:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8041414:	f7ff f9ee 	bl	80407f4 <HAL_GetTick>
 8041418:	0003      	movs	r3, r0
 804141a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804141c:	e009      	b.n	8041432 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 804141e:	f7ff f9e9 	bl	80407f4 <HAL_GetTick>
 8041422:	0002      	movs	r2, r0
 8041424:	68fb      	ldr	r3, [r7, #12]
 8041426:	1ad3      	subs	r3, r2, r3
 8041428:	4a27      	ldr	r2, [pc, #156]	; (80414c8 <HAL_RCC_ClockConfig+0x18c>)
 804142a:	4293      	cmp	r3, r2
 804142c:	d901      	bls.n	8041432 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 804142e:	2303      	movs	r3, #3
 8041430:	e042      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041432:	4b24      	ldr	r3, [pc, #144]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041434:	685b      	ldr	r3, [r3, #4]
 8041436:	220c      	movs	r2, #12
 8041438:	401a      	ands	r2, r3
 804143a:	687b      	ldr	r3, [r7, #4]
 804143c:	685b      	ldr	r3, [r3, #4]
 804143e:	009b      	lsls	r3, r3, #2
 8041440:	429a      	cmp	r2, r3
 8041442:	d1ec      	bne.n	804141e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041444:	4b1e      	ldr	r3, [pc, #120]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041446:	681b      	ldr	r3, [r3, #0]
 8041448:	2201      	movs	r2, #1
 804144a:	4013      	ands	r3, r2
 804144c:	683a      	ldr	r2, [r7, #0]
 804144e:	429a      	cmp	r2, r3
 8041450:	d211      	bcs.n	8041476 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041452:	4b1b      	ldr	r3, [pc, #108]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041454:	681b      	ldr	r3, [r3, #0]
 8041456:	2201      	movs	r2, #1
 8041458:	4393      	bics	r3, r2
 804145a:	0019      	movs	r1, r3
 804145c:	4b18      	ldr	r3, [pc, #96]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 804145e:	683a      	ldr	r2, [r7, #0]
 8041460:	430a      	orrs	r2, r1
 8041462:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041464:	4b16      	ldr	r3, [pc, #88]	; (80414c0 <HAL_RCC_ClockConfig+0x184>)
 8041466:	681b      	ldr	r3, [r3, #0]
 8041468:	2201      	movs	r2, #1
 804146a:	4013      	ands	r3, r2
 804146c:	683a      	ldr	r2, [r7, #0]
 804146e:	429a      	cmp	r2, r3
 8041470:	d001      	beq.n	8041476 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8041472:	2301      	movs	r3, #1
 8041474:	e020      	b.n	80414b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041476:	687b      	ldr	r3, [r7, #4]
 8041478:	681b      	ldr	r3, [r3, #0]
 804147a:	2204      	movs	r2, #4
 804147c:	4013      	ands	r3, r2
 804147e:	d009      	beq.n	8041494 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8041480:	4b10      	ldr	r3, [pc, #64]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041482:	685b      	ldr	r3, [r3, #4]
 8041484:	4a11      	ldr	r2, [pc, #68]	; (80414cc <HAL_RCC_ClockConfig+0x190>)
 8041486:	4013      	ands	r3, r2
 8041488:	0019      	movs	r1, r3
 804148a:	687b      	ldr	r3, [r7, #4]
 804148c:	68da      	ldr	r2, [r3, #12]
 804148e:	4b0d      	ldr	r3, [pc, #52]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 8041490:	430a      	orrs	r2, r1
 8041492:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8041494:	f000 f820 	bl	80414d8 <HAL_RCC_GetSysClockFreq>
 8041498:	0001      	movs	r1, r0
 804149a:	4b0a      	ldr	r3, [pc, #40]	; (80414c4 <HAL_RCC_ClockConfig+0x188>)
 804149c:	685b      	ldr	r3, [r3, #4]
 804149e:	091b      	lsrs	r3, r3, #4
 80414a0:	220f      	movs	r2, #15
 80414a2:	4013      	ands	r3, r2
 80414a4:	4a0a      	ldr	r2, [pc, #40]	; (80414d0 <HAL_RCC_ClockConfig+0x194>)
 80414a6:	5cd3      	ldrb	r3, [r2, r3]
 80414a8:	000a      	movs	r2, r1
 80414aa:	40da      	lsrs	r2, r3
 80414ac:	4b09      	ldr	r3, [pc, #36]	; (80414d4 <HAL_RCC_ClockConfig+0x198>)
 80414ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80414b0:	2000      	movs	r0, #0
 80414b2:	f7ff f959 	bl	8040768 <HAL_InitTick>
  
  return HAL_OK;
 80414b6:	2300      	movs	r3, #0
}
 80414b8:	0018      	movs	r0, r3
 80414ba:	46bd      	mov	sp, r7
 80414bc:	b004      	add	sp, #16
 80414be:	bd80      	pop	{r7, pc}
 80414c0:	40022000 	.word	0x40022000
 80414c4:	40021000 	.word	0x40021000
 80414c8:	00001388 	.word	0x00001388
 80414cc:	fffff8ff 	.word	0xfffff8ff
 80414d0:	08042f74 	.word	0x08042f74
 80414d4:	20000004 	.word	0x20000004

080414d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80414d8:	b590      	push	{r4, r7, lr}
 80414da:	b08f      	sub	sp, #60	; 0x3c
 80414dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80414de:	2314      	movs	r3, #20
 80414e0:	18fb      	adds	r3, r7, r3
 80414e2:	4a2b      	ldr	r2, [pc, #172]	; (8041590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80414e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80414e6:	c313      	stmia	r3!, {r0, r1, r4}
 80414e8:	6812      	ldr	r2, [r2, #0]
 80414ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80414ec:	1d3b      	adds	r3, r7, #4
 80414ee:	4a29      	ldr	r2, [pc, #164]	; (8041594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80414f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80414f2:	c313      	stmia	r3!, {r0, r1, r4}
 80414f4:	6812      	ldr	r2, [r2, #0]
 80414f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80414f8:	2300      	movs	r3, #0
 80414fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80414fc:	2300      	movs	r3, #0
 80414fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8041500:	2300      	movs	r3, #0
 8041502:	637b      	str	r3, [r7, #52]	; 0x34
 8041504:	2300      	movs	r3, #0
 8041506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8041508:	2300      	movs	r3, #0
 804150a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 804150c:	4b22      	ldr	r3, [pc, #136]	; (8041598 <HAL_RCC_GetSysClockFreq+0xc0>)
 804150e:	685b      	ldr	r3, [r3, #4]
 8041510:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8041512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041514:	220c      	movs	r2, #12
 8041516:	4013      	ands	r3, r2
 8041518:	2b04      	cmp	r3, #4
 804151a:	d002      	beq.n	8041522 <HAL_RCC_GetSysClockFreq+0x4a>
 804151c:	2b08      	cmp	r3, #8
 804151e:	d003      	beq.n	8041528 <HAL_RCC_GetSysClockFreq+0x50>
 8041520:	e02d      	b.n	804157e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8041522:	4b1e      	ldr	r3, [pc, #120]	; (804159c <HAL_RCC_GetSysClockFreq+0xc4>)
 8041524:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8041526:	e02d      	b.n	8041584 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8041528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804152a:	0c9b      	lsrs	r3, r3, #18
 804152c:	220f      	movs	r2, #15
 804152e:	4013      	ands	r3, r2
 8041530:	2214      	movs	r2, #20
 8041532:	18ba      	adds	r2, r7, r2
 8041534:	5cd3      	ldrb	r3, [r2, r3]
 8041536:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8041538:	4b17      	ldr	r3, [pc, #92]	; (8041598 <HAL_RCC_GetSysClockFreq+0xc0>)
 804153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804153c:	220f      	movs	r2, #15
 804153e:	4013      	ands	r3, r2
 8041540:	1d3a      	adds	r2, r7, #4
 8041542:	5cd3      	ldrb	r3, [r2, r3]
 8041544:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8041546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8041548:	2380      	movs	r3, #128	; 0x80
 804154a:	025b      	lsls	r3, r3, #9
 804154c:	4013      	ands	r3, r2
 804154e:	d009      	beq.n	8041564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8041550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8041552:	4812      	ldr	r0, [pc, #72]	; (804159c <HAL_RCC_GetSysClockFreq+0xc4>)
 8041554:	f7fe fde2 	bl	804011c <__udivsi3>
 8041558:	0003      	movs	r3, r0
 804155a:	001a      	movs	r2, r3
 804155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804155e:	4353      	muls	r3, r2
 8041560:	637b      	str	r3, [r7, #52]	; 0x34
 8041562:	e009      	b.n	8041578 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8041564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8041566:	000a      	movs	r2, r1
 8041568:	0152      	lsls	r2, r2, #5
 804156a:	1a52      	subs	r2, r2, r1
 804156c:	0193      	lsls	r3, r2, #6
 804156e:	1a9b      	subs	r3, r3, r2
 8041570:	00db      	lsls	r3, r3, #3
 8041572:	185b      	adds	r3, r3, r1
 8041574:	021b      	lsls	r3, r3, #8
 8041576:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8041578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804157a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 804157c:	e002      	b.n	8041584 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 804157e:	4b07      	ldr	r3, [pc, #28]	; (804159c <HAL_RCC_GetSysClockFreq+0xc4>)
 8041580:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8041582:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8041584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8041586:	0018      	movs	r0, r3
 8041588:	46bd      	mov	sp, r7
 804158a:	b00f      	add	sp, #60	; 0x3c
 804158c:	bd90      	pop	{r4, r7, pc}
 804158e:	46c0      	nop			; (mov r8, r8)
 8041590:	08042f54 	.word	0x08042f54
 8041594:	08042f64 	.word	0x08042f64
 8041598:	40021000 	.word	0x40021000
 804159c:	007a1200 	.word	0x007a1200

080415a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80415a0:	b580      	push	{r7, lr}
 80415a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80415a4:	4b02      	ldr	r3, [pc, #8]	; (80415b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80415a6:	681b      	ldr	r3, [r3, #0]
}
 80415a8:	0018      	movs	r0, r3
 80415aa:	46bd      	mov	sp, r7
 80415ac:	bd80      	pop	{r7, pc}
 80415ae:	46c0      	nop			; (mov r8, r8)
 80415b0:	20000004 	.word	0x20000004

080415b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80415b4:	b580      	push	{r7, lr}
 80415b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80415b8:	f7ff fff2 	bl	80415a0 <HAL_RCC_GetHCLKFreq>
 80415bc:	0001      	movs	r1, r0
 80415be:	4b06      	ldr	r3, [pc, #24]	; (80415d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80415c0:	685b      	ldr	r3, [r3, #4]
 80415c2:	0a1b      	lsrs	r3, r3, #8
 80415c4:	2207      	movs	r2, #7
 80415c6:	4013      	ands	r3, r2
 80415c8:	4a04      	ldr	r2, [pc, #16]	; (80415dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80415ca:	5cd3      	ldrb	r3, [r2, r3]
 80415cc:	40d9      	lsrs	r1, r3
 80415ce:	000b      	movs	r3, r1
}    
 80415d0:	0018      	movs	r0, r3
 80415d2:	46bd      	mov	sp, r7
 80415d4:	bd80      	pop	{r7, pc}
 80415d6:	46c0      	nop			; (mov r8, r8)
 80415d8:	40021000 	.word	0x40021000
 80415dc:	08042f84 	.word	0x08042f84

080415e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80415e0:	b580      	push	{r7, lr}
 80415e2:	b086      	sub	sp, #24
 80415e4:	af00      	add	r7, sp, #0
 80415e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80415e8:	2300      	movs	r3, #0
 80415ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80415ec:	2300      	movs	r3, #0
 80415ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80415f0:	687b      	ldr	r3, [r7, #4]
 80415f2:	681a      	ldr	r2, [r3, #0]
 80415f4:	2380      	movs	r3, #128	; 0x80
 80415f6:	025b      	lsls	r3, r3, #9
 80415f8:	4013      	ands	r3, r2
 80415fa:	d100      	bne.n	80415fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80415fc:	e08e      	b.n	804171c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80415fe:	2017      	movs	r0, #23
 8041600:	183b      	adds	r3, r7, r0
 8041602:	2200      	movs	r2, #0
 8041604:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041606:	4b57      	ldr	r3, [pc, #348]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041608:	69da      	ldr	r2, [r3, #28]
 804160a:	2380      	movs	r3, #128	; 0x80
 804160c:	055b      	lsls	r3, r3, #21
 804160e:	4013      	ands	r3, r2
 8041610:	d110      	bne.n	8041634 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041612:	4b54      	ldr	r3, [pc, #336]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041614:	69da      	ldr	r2, [r3, #28]
 8041616:	4b53      	ldr	r3, [pc, #332]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041618:	2180      	movs	r1, #128	; 0x80
 804161a:	0549      	lsls	r1, r1, #21
 804161c:	430a      	orrs	r2, r1
 804161e:	61da      	str	r2, [r3, #28]
 8041620:	4b50      	ldr	r3, [pc, #320]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041622:	69da      	ldr	r2, [r3, #28]
 8041624:	2380      	movs	r3, #128	; 0x80
 8041626:	055b      	lsls	r3, r3, #21
 8041628:	4013      	ands	r3, r2
 804162a:	60bb      	str	r3, [r7, #8]
 804162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804162e:	183b      	adds	r3, r7, r0
 8041630:	2201      	movs	r2, #1
 8041632:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041634:	4b4c      	ldr	r3, [pc, #304]	; (8041768 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8041636:	681a      	ldr	r2, [r3, #0]
 8041638:	2380      	movs	r3, #128	; 0x80
 804163a:	005b      	lsls	r3, r3, #1
 804163c:	4013      	ands	r3, r2
 804163e:	d11a      	bne.n	8041676 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8041640:	4b49      	ldr	r3, [pc, #292]	; (8041768 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8041642:	681a      	ldr	r2, [r3, #0]
 8041644:	4b48      	ldr	r3, [pc, #288]	; (8041768 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8041646:	2180      	movs	r1, #128	; 0x80
 8041648:	0049      	lsls	r1, r1, #1
 804164a:	430a      	orrs	r2, r1
 804164c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804164e:	f7ff f8d1 	bl	80407f4 <HAL_GetTick>
 8041652:	0003      	movs	r3, r0
 8041654:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041656:	e008      	b.n	804166a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041658:	f7ff f8cc 	bl	80407f4 <HAL_GetTick>
 804165c:	0002      	movs	r2, r0
 804165e:	693b      	ldr	r3, [r7, #16]
 8041660:	1ad3      	subs	r3, r2, r3
 8041662:	2b64      	cmp	r3, #100	; 0x64
 8041664:	d901      	bls.n	804166a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8041666:	2303      	movs	r3, #3
 8041668:	e077      	b.n	804175a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 804166a:	4b3f      	ldr	r3, [pc, #252]	; (8041768 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 804166c:	681a      	ldr	r2, [r3, #0]
 804166e:	2380      	movs	r3, #128	; 0x80
 8041670:	005b      	lsls	r3, r3, #1
 8041672:	4013      	ands	r3, r2
 8041674:	d0f0      	beq.n	8041658 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041676:	4b3b      	ldr	r3, [pc, #236]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041678:	6a1a      	ldr	r2, [r3, #32]
 804167a:	23c0      	movs	r3, #192	; 0xc0
 804167c:	009b      	lsls	r3, r3, #2
 804167e:	4013      	ands	r3, r2
 8041680:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041682:	68fb      	ldr	r3, [r7, #12]
 8041684:	2b00      	cmp	r3, #0
 8041686:	d034      	beq.n	80416f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8041688:	687b      	ldr	r3, [r7, #4]
 804168a:	685a      	ldr	r2, [r3, #4]
 804168c:	23c0      	movs	r3, #192	; 0xc0
 804168e:	009b      	lsls	r3, r3, #2
 8041690:	4013      	ands	r3, r2
 8041692:	68fa      	ldr	r2, [r7, #12]
 8041694:	429a      	cmp	r2, r3
 8041696:	d02c      	beq.n	80416f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041698:	4b32      	ldr	r3, [pc, #200]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 804169a:	6a1b      	ldr	r3, [r3, #32]
 804169c:	4a33      	ldr	r2, [pc, #204]	; (804176c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 804169e:	4013      	ands	r3, r2
 80416a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80416a2:	4b30      	ldr	r3, [pc, #192]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416a4:	6a1a      	ldr	r2, [r3, #32]
 80416a6:	4b2f      	ldr	r3, [pc, #188]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416a8:	2180      	movs	r1, #128	; 0x80
 80416aa:	0249      	lsls	r1, r1, #9
 80416ac:	430a      	orrs	r2, r1
 80416ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80416b0:	4b2c      	ldr	r3, [pc, #176]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416b2:	6a1a      	ldr	r2, [r3, #32]
 80416b4:	4b2b      	ldr	r3, [pc, #172]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416b6:	492e      	ldr	r1, [pc, #184]	; (8041770 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80416b8:	400a      	ands	r2, r1
 80416ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80416bc:	4b29      	ldr	r3, [pc, #164]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416be:	68fa      	ldr	r2, [r7, #12]
 80416c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80416c2:	68fb      	ldr	r3, [r7, #12]
 80416c4:	2201      	movs	r2, #1
 80416c6:	4013      	ands	r3, r2
 80416c8:	d013      	beq.n	80416f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80416ca:	f7ff f893 	bl	80407f4 <HAL_GetTick>
 80416ce:	0003      	movs	r3, r0
 80416d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80416d2:	e009      	b.n	80416e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80416d4:	f7ff f88e 	bl	80407f4 <HAL_GetTick>
 80416d8:	0002      	movs	r2, r0
 80416da:	693b      	ldr	r3, [r7, #16]
 80416dc:	1ad3      	subs	r3, r2, r3
 80416de:	4a25      	ldr	r2, [pc, #148]	; (8041774 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80416e0:	4293      	cmp	r3, r2
 80416e2:	d901      	bls.n	80416e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80416e4:	2303      	movs	r3, #3
 80416e6:	e038      	b.n	804175a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80416e8:	4b1e      	ldr	r3, [pc, #120]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416ea:	6a1b      	ldr	r3, [r3, #32]
 80416ec:	2202      	movs	r2, #2
 80416ee:	4013      	ands	r3, r2
 80416f0:	d0f0      	beq.n	80416d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80416f2:	4b1c      	ldr	r3, [pc, #112]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80416f4:	6a1b      	ldr	r3, [r3, #32]
 80416f6:	4a1d      	ldr	r2, [pc, #116]	; (804176c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80416f8:	4013      	ands	r3, r2
 80416fa:	0019      	movs	r1, r3
 80416fc:	687b      	ldr	r3, [r7, #4]
 80416fe:	685a      	ldr	r2, [r3, #4]
 8041700:	4b18      	ldr	r3, [pc, #96]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041702:	430a      	orrs	r2, r1
 8041704:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8041706:	2317      	movs	r3, #23
 8041708:	18fb      	adds	r3, r7, r3
 804170a:	781b      	ldrb	r3, [r3, #0]
 804170c:	2b01      	cmp	r3, #1
 804170e:	d105      	bne.n	804171c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041710:	4b14      	ldr	r3, [pc, #80]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041712:	69da      	ldr	r2, [r3, #28]
 8041714:	4b13      	ldr	r3, [pc, #76]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041716:	4918      	ldr	r1, [pc, #96]	; (8041778 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8041718:	400a      	ands	r2, r1
 804171a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804171c:	687b      	ldr	r3, [r7, #4]
 804171e:	681b      	ldr	r3, [r3, #0]
 8041720:	2201      	movs	r2, #1
 8041722:	4013      	ands	r3, r2
 8041724:	d009      	beq.n	804173a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041726:	4b0f      	ldr	r3, [pc, #60]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804172a:	2203      	movs	r2, #3
 804172c:	4393      	bics	r3, r2
 804172e:	0019      	movs	r1, r3
 8041730:	687b      	ldr	r3, [r7, #4]
 8041732:	689a      	ldr	r2, [r3, #8]
 8041734:	4b0b      	ldr	r3, [pc, #44]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041736:	430a      	orrs	r2, r1
 8041738:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804173a:	687b      	ldr	r3, [r7, #4]
 804173c:	681b      	ldr	r3, [r3, #0]
 804173e:	2220      	movs	r2, #32
 8041740:	4013      	ands	r3, r2
 8041742:	d009      	beq.n	8041758 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041744:	4b07      	ldr	r3, [pc, #28]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041748:	2210      	movs	r2, #16
 804174a:	4393      	bics	r3, r2
 804174c:	0019      	movs	r1, r3
 804174e:	687b      	ldr	r3, [r7, #4]
 8041750:	68da      	ldr	r2, [r3, #12]
 8041752:	4b04      	ldr	r3, [pc, #16]	; (8041764 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8041754:	430a      	orrs	r2, r1
 8041756:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8041758:	2300      	movs	r3, #0
}
 804175a:	0018      	movs	r0, r3
 804175c:	46bd      	mov	sp, r7
 804175e:	b006      	add	sp, #24
 8041760:	bd80      	pop	{r7, pc}
 8041762:	46c0      	nop			; (mov r8, r8)
 8041764:	40021000 	.word	0x40021000
 8041768:	40007000 	.word	0x40007000
 804176c:	fffffcff 	.word	0xfffffcff
 8041770:	fffeffff 	.word	0xfffeffff
 8041774:	00001388 	.word	0x00001388
 8041778:	efffffff 	.word	0xefffffff

0804177c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804177c:	b580      	push	{r7, lr}
 804177e:	b082      	sub	sp, #8
 8041780:	af00      	add	r7, sp, #0
 8041782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8041784:	687b      	ldr	r3, [r7, #4]
 8041786:	2b00      	cmp	r3, #0
 8041788:	d101      	bne.n	804178e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804178a:	2301      	movs	r3, #1
 804178c:	e044      	b.n	8041818 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041792:	2b00      	cmp	r3, #0
 8041794:	d107      	bne.n	80417a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	2274      	movs	r2, #116	; 0x74
 804179a:	2100      	movs	r1, #0
 804179c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	0018      	movs	r0, r3
 80417a2:	f7fe fe9d 	bl	80404e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80417a6:	687b      	ldr	r3, [r7, #4]
 80417a8:	2224      	movs	r2, #36	; 0x24
 80417aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80417ac:	687b      	ldr	r3, [r7, #4]
 80417ae:	681b      	ldr	r3, [r3, #0]
 80417b0:	681a      	ldr	r2, [r3, #0]
 80417b2:	687b      	ldr	r3, [r7, #4]
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	2101      	movs	r1, #1
 80417b8:	438a      	bics	r2, r1
 80417ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80417bc:	687b      	ldr	r3, [r7, #4]
 80417be:	0018      	movs	r0, r3
 80417c0:	f000 f8da 	bl	8041978 <UART_SetConfig>
 80417c4:	0003      	movs	r3, r0
 80417c6:	2b01      	cmp	r3, #1
 80417c8:	d101      	bne.n	80417ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80417ca:	2301      	movs	r3, #1
 80417cc:	e024      	b.n	8041818 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80417ce:	687b      	ldr	r3, [r7, #4]
 80417d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80417d2:	2b00      	cmp	r3, #0
 80417d4:	d003      	beq.n	80417de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80417d6:	687b      	ldr	r3, [r7, #4]
 80417d8:	0018      	movs	r0, r3
 80417da:	f000 fa0d 	bl	8041bf8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80417de:	687b      	ldr	r3, [r7, #4]
 80417e0:	681b      	ldr	r3, [r3, #0]
 80417e2:	685a      	ldr	r2, [r3, #4]
 80417e4:	687b      	ldr	r3, [r7, #4]
 80417e6:	681b      	ldr	r3, [r3, #0]
 80417e8:	490d      	ldr	r1, [pc, #52]	; (8041820 <HAL_UART_Init+0xa4>)
 80417ea:	400a      	ands	r2, r1
 80417ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80417ee:	687b      	ldr	r3, [r7, #4]
 80417f0:	681b      	ldr	r3, [r3, #0]
 80417f2:	689a      	ldr	r2, [r3, #8]
 80417f4:	687b      	ldr	r3, [r7, #4]
 80417f6:	681b      	ldr	r3, [r3, #0]
 80417f8:	2108      	movs	r1, #8
 80417fa:	438a      	bics	r2, r1
 80417fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80417fe:	687b      	ldr	r3, [r7, #4]
 8041800:	681b      	ldr	r3, [r3, #0]
 8041802:	681a      	ldr	r2, [r3, #0]
 8041804:	687b      	ldr	r3, [r7, #4]
 8041806:	681b      	ldr	r3, [r3, #0]
 8041808:	2101      	movs	r1, #1
 804180a:	430a      	orrs	r2, r1
 804180c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804180e:	687b      	ldr	r3, [r7, #4]
 8041810:	0018      	movs	r0, r3
 8041812:	f000 faa5 	bl	8041d60 <UART_CheckIdleState>
 8041816:	0003      	movs	r3, r0
}
 8041818:	0018      	movs	r0, r3
 804181a:	46bd      	mov	sp, r7
 804181c:	b002      	add	sp, #8
 804181e:	bd80      	pop	{r7, pc}
 8041820:	fffff7ff 	.word	0xfffff7ff

08041824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041824:	b580      	push	{r7, lr}
 8041826:	b08a      	sub	sp, #40	; 0x28
 8041828:	af02      	add	r7, sp, #8
 804182a:	60f8      	str	r0, [r7, #12]
 804182c:	60b9      	str	r1, [r7, #8]
 804182e:	603b      	str	r3, [r7, #0]
 8041830:	1dbb      	adds	r3, r7, #6
 8041832:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8041834:	68fb      	ldr	r3, [r7, #12]
 8041836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041838:	2b20      	cmp	r3, #32
 804183a:	d000      	beq.n	804183e <HAL_UART_Transmit+0x1a>
 804183c:	e096      	b.n	804196c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 804183e:	68bb      	ldr	r3, [r7, #8]
 8041840:	2b00      	cmp	r3, #0
 8041842:	d003      	beq.n	804184c <HAL_UART_Transmit+0x28>
 8041844:	1dbb      	adds	r3, r7, #6
 8041846:	881b      	ldrh	r3, [r3, #0]
 8041848:	2b00      	cmp	r3, #0
 804184a:	d101      	bne.n	8041850 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 804184c:	2301      	movs	r3, #1
 804184e:	e08e      	b.n	804196e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041850:	68fb      	ldr	r3, [r7, #12]
 8041852:	689a      	ldr	r2, [r3, #8]
 8041854:	2380      	movs	r3, #128	; 0x80
 8041856:	015b      	lsls	r3, r3, #5
 8041858:	429a      	cmp	r2, r3
 804185a:	d109      	bne.n	8041870 <HAL_UART_Transmit+0x4c>
 804185c:	68fb      	ldr	r3, [r7, #12]
 804185e:	691b      	ldr	r3, [r3, #16]
 8041860:	2b00      	cmp	r3, #0
 8041862:	d105      	bne.n	8041870 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8041864:	68bb      	ldr	r3, [r7, #8]
 8041866:	2201      	movs	r2, #1
 8041868:	4013      	ands	r3, r2
 804186a:	d001      	beq.n	8041870 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 804186c:	2301      	movs	r3, #1
 804186e:	e07e      	b.n	804196e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8041870:	68fb      	ldr	r3, [r7, #12]
 8041872:	2274      	movs	r2, #116	; 0x74
 8041874:	5c9b      	ldrb	r3, [r3, r2]
 8041876:	2b01      	cmp	r3, #1
 8041878:	d101      	bne.n	804187e <HAL_UART_Transmit+0x5a>
 804187a:	2302      	movs	r3, #2
 804187c:	e077      	b.n	804196e <HAL_UART_Transmit+0x14a>
 804187e:	68fb      	ldr	r3, [r7, #12]
 8041880:	2274      	movs	r2, #116	; 0x74
 8041882:	2101      	movs	r1, #1
 8041884:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041886:	68fb      	ldr	r3, [r7, #12]
 8041888:	2280      	movs	r2, #128	; 0x80
 804188a:	2100      	movs	r1, #0
 804188c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804188e:	68fb      	ldr	r3, [r7, #12]
 8041890:	2221      	movs	r2, #33	; 0x21
 8041892:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8041894:	f7fe ffae 	bl	80407f4 <HAL_GetTick>
 8041898:	0003      	movs	r3, r0
 804189a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 804189c:	68fb      	ldr	r3, [r7, #12]
 804189e:	1dba      	adds	r2, r7, #6
 80418a0:	2150      	movs	r1, #80	; 0x50
 80418a2:	8812      	ldrh	r2, [r2, #0]
 80418a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80418a6:	68fb      	ldr	r3, [r7, #12]
 80418a8:	1dba      	adds	r2, r7, #6
 80418aa:	2152      	movs	r1, #82	; 0x52
 80418ac:	8812      	ldrh	r2, [r2, #0]
 80418ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80418b0:	68fb      	ldr	r3, [r7, #12]
 80418b2:	689a      	ldr	r2, [r3, #8]
 80418b4:	2380      	movs	r3, #128	; 0x80
 80418b6:	015b      	lsls	r3, r3, #5
 80418b8:	429a      	cmp	r2, r3
 80418ba:	d108      	bne.n	80418ce <HAL_UART_Transmit+0xaa>
 80418bc:	68fb      	ldr	r3, [r7, #12]
 80418be:	691b      	ldr	r3, [r3, #16]
 80418c0:	2b00      	cmp	r3, #0
 80418c2:	d104      	bne.n	80418ce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80418c4:	2300      	movs	r3, #0
 80418c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80418c8:	68bb      	ldr	r3, [r7, #8]
 80418ca:	61bb      	str	r3, [r7, #24]
 80418cc:	e003      	b.n	80418d6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80418ce:	68bb      	ldr	r3, [r7, #8]
 80418d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80418d2:	2300      	movs	r3, #0
 80418d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80418d6:	68fb      	ldr	r3, [r7, #12]
 80418d8:	2274      	movs	r2, #116	; 0x74
 80418da:	2100      	movs	r1, #0
 80418dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80418de:	e02d      	b.n	804193c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80418e0:	697a      	ldr	r2, [r7, #20]
 80418e2:	68f8      	ldr	r0, [r7, #12]
 80418e4:	683b      	ldr	r3, [r7, #0]
 80418e6:	9300      	str	r3, [sp, #0]
 80418e8:	0013      	movs	r3, r2
 80418ea:	2200      	movs	r2, #0
 80418ec:	2180      	movs	r1, #128	; 0x80
 80418ee:	f000 fa7f 	bl	8041df0 <UART_WaitOnFlagUntilTimeout>
 80418f2:	1e03      	subs	r3, r0, #0
 80418f4:	d001      	beq.n	80418fa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80418f6:	2303      	movs	r3, #3
 80418f8:	e039      	b.n	804196e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80418fa:	69fb      	ldr	r3, [r7, #28]
 80418fc:	2b00      	cmp	r3, #0
 80418fe:	d10b      	bne.n	8041918 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8041900:	69bb      	ldr	r3, [r7, #24]
 8041902:	881a      	ldrh	r2, [r3, #0]
 8041904:	68fb      	ldr	r3, [r7, #12]
 8041906:	681b      	ldr	r3, [r3, #0]
 8041908:	05d2      	lsls	r2, r2, #23
 804190a:	0dd2      	lsrs	r2, r2, #23
 804190c:	b292      	uxth	r2, r2
 804190e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8041910:	69bb      	ldr	r3, [r7, #24]
 8041912:	3302      	adds	r3, #2
 8041914:	61bb      	str	r3, [r7, #24]
 8041916:	e008      	b.n	804192a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8041918:	69fb      	ldr	r3, [r7, #28]
 804191a:	781a      	ldrb	r2, [r3, #0]
 804191c:	68fb      	ldr	r3, [r7, #12]
 804191e:	681b      	ldr	r3, [r3, #0]
 8041920:	b292      	uxth	r2, r2
 8041922:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8041924:	69fb      	ldr	r3, [r7, #28]
 8041926:	3301      	adds	r3, #1
 8041928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804192a:	68fb      	ldr	r3, [r7, #12]
 804192c:	2252      	movs	r2, #82	; 0x52
 804192e:	5a9b      	ldrh	r3, [r3, r2]
 8041930:	b29b      	uxth	r3, r3
 8041932:	3b01      	subs	r3, #1
 8041934:	b299      	uxth	r1, r3
 8041936:	68fb      	ldr	r3, [r7, #12]
 8041938:	2252      	movs	r2, #82	; 0x52
 804193a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 804193c:	68fb      	ldr	r3, [r7, #12]
 804193e:	2252      	movs	r2, #82	; 0x52
 8041940:	5a9b      	ldrh	r3, [r3, r2]
 8041942:	b29b      	uxth	r3, r3
 8041944:	2b00      	cmp	r3, #0
 8041946:	d1cb      	bne.n	80418e0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8041948:	697a      	ldr	r2, [r7, #20]
 804194a:	68f8      	ldr	r0, [r7, #12]
 804194c:	683b      	ldr	r3, [r7, #0]
 804194e:	9300      	str	r3, [sp, #0]
 8041950:	0013      	movs	r3, r2
 8041952:	2200      	movs	r2, #0
 8041954:	2140      	movs	r1, #64	; 0x40
 8041956:	f000 fa4b 	bl	8041df0 <UART_WaitOnFlagUntilTimeout>
 804195a:	1e03      	subs	r3, r0, #0
 804195c:	d001      	beq.n	8041962 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 804195e:	2303      	movs	r3, #3
 8041960:	e005      	b.n	804196e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8041962:	68fb      	ldr	r3, [r7, #12]
 8041964:	2220      	movs	r2, #32
 8041966:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8041968:	2300      	movs	r3, #0
 804196a:	e000      	b.n	804196e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 804196c:	2302      	movs	r3, #2
  }
}
 804196e:	0018      	movs	r0, r3
 8041970:	46bd      	mov	sp, r7
 8041972:	b008      	add	sp, #32
 8041974:	bd80      	pop	{r7, pc}
	...

08041978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8041978:	b580      	push	{r7, lr}
 804197a:	b088      	sub	sp, #32
 804197c:	af00      	add	r7, sp, #0
 804197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8041980:	231e      	movs	r3, #30
 8041982:	18fb      	adds	r3, r7, r3
 8041984:	2200      	movs	r2, #0
 8041986:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8041988:	687b      	ldr	r3, [r7, #4]
 804198a:	689a      	ldr	r2, [r3, #8]
 804198c:	687b      	ldr	r3, [r7, #4]
 804198e:	691b      	ldr	r3, [r3, #16]
 8041990:	431a      	orrs	r2, r3
 8041992:	687b      	ldr	r3, [r7, #4]
 8041994:	695b      	ldr	r3, [r3, #20]
 8041996:	431a      	orrs	r2, r3
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	69db      	ldr	r3, [r3, #28]
 804199c:	4313      	orrs	r3, r2
 804199e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80419a0:	687b      	ldr	r3, [r7, #4]
 80419a2:	681b      	ldr	r3, [r3, #0]
 80419a4:	681b      	ldr	r3, [r3, #0]
 80419a6:	4a8d      	ldr	r2, [pc, #564]	; (8041bdc <UART_SetConfig+0x264>)
 80419a8:	4013      	ands	r3, r2
 80419aa:	0019      	movs	r1, r3
 80419ac:	687b      	ldr	r3, [r7, #4]
 80419ae:	681b      	ldr	r3, [r3, #0]
 80419b0:	697a      	ldr	r2, [r7, #20]
 80419b2:	430a      	orrs	r2, r1
 80419b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80419b6:	687b      	ldr	r3, [r7, #4]
 80419b8:	681b      	ldr	r3, [r3, #0]
 80419ba:	685b      	ldr	r3, [r3, #4]
 80419bc:	4a88      	ldr	r2, [pc, #544]	; (8041be0 <UART_SetConfig+0x268>)
 80419be:	4013      	ands	r3, r2
 80419c0:	0019      	movs	r1, r3
 80419c2:	687b      	ldr	r3, [r7, #4]
 80419c4:	68da      	ldr	r2, [r3, #12]
 80419c6:	687b      	ldr	r3, [r7, #4]
 80419c8:	681b      	ldr	r3, [r3, #0]
 80419ca:	430a      	orrs	r2, r1
 80419cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80419ce:	687b      	ldr	r3, [r7, #4]
 80419d0:	699b      	ldr	r3, [r3, #24]
 80419d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80419d4:	687b      	ldr	r3, [r7, #4]
 80419d6:	6a1b      	ldr	r3, [r3, #32]
 80419d8:	697a      	ldr	r2, [r7, #20]
 80419da:	4313      	orrs	r3, r2
 80419dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80419de:	687b      	ldr	r3, [r7, #4]
 80419e0:	681b      	ldr	r3, [r3, #0]
 80419e2:	689b      	ldr	r3, [r3, #8]
 80419e4:	4a7f      	ldr	r2, [pc, #508]	; (8041be4 <UART_SetConfig+0x26c>)
 80419e6:	4013      	ands	r3, r2
 80419e8:	0019      	movs	r1, r3
 80419ea:	687b      	ldr	r3, [r7, #4]
 80419ec:	681b      	ldr	r3, [r3, #0]
 80419ee:	697a      	ldr	r2, [r7, #20]
 80419f0:	430a      	orrs	r2, r1
 80419f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80419f4:	687b      	ldr	r3, [r7, #4]
 80419f6:	681b      	ldr	r3, [r3, #0]
 80419f8:	4a7b      	ldr	r2, [pc, #492]	; (8041be8 <UART_SetConfig+0x270>)
 80419fa:	4293      	cmp	r3, r2
 80419fc:	d127      	bne.n	8041a4e <UART_SetConfig+0xd6>
 80419fe:	4b7b      	ldr	r3, [pc, #492]	; (8041bec <UART_SetConfig+0x274>)
 8041a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a02:	2203      	movs	r2, #3
 8041a04:	4013      	ands	r3, r2
 8041a06:	2b03      	cmp	r3, #3
 8041a08:	d00d      	beq.n	8041a26 <UART_SetConfig+0xae>
 8041a0a:	d81b      	bhi.n	8041a44 <UART_SetConfig+0xcc>
 8041a0c:	2b02      	cmp	r3, #2
 8041a0e:	d014      	beq.n	8041a3a <UART_SetConfig+0xc2>
 8041a10:	d818      	bhi.n	8041a44 <UART_SetConfig+0xcc>
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d002      	beq.n	8041a1c <UART_SetConfig+0xa4>
 8041a16:	2b01      	cmp	r3, #1
 8041a18:	d00a      	beq.n	8041a30 <UART_SetConfig+0xb8>
 8041a1a:	e013      	b.n	8041a44 <UART_SetConfig+0xcc>
 8041a1c:	231f      	movs	r3, #31
 8041a1e:	18fb      	adds	r3, r7, r3
 8041a20:	2200      	movs	r2, #0
 8041a22:	701a      	strb	r2, [r3, #0]
 8041a24:	e021      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a26:	231f      	movs	r3, #31
 8041a28:	18fb      	adds	r3, r7, r3
 8041a2a:	2202      	movs	r2, #2
 8041a2c:	701a      	strb	r2, [r3, #0]
 8041a2e:	e01c      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a30:	231f      	movs	r3, #31
 8041a32:	18fb      	adds	r3, r7, r3
 8041a34:	2204      	movs	r2, #4
 8041a36:	701a      	strb	r2, [r3, #0]
 8041a38:	e017      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a3a:	231f      	movs	r3, #31
 8041a3c:	18fb      	adds	r3, r7, r3
 8041a3e:	2208      	movs	r2, #8
 8041a40:	701a      	strb	r2, [r3, #0]
 8041a42:	e012      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a44:	231f      	movs	r3, #31
 8041a46:	18fb      	adds	r3, r7, r3
 8041a48:	2210      	movs	r2, #16
 8041a4a:	701a      	strb	r2, [r3, #0]
 8041a4c:	e00d      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a4e:	687b      	ldr	r3, [r7, #4]
 8041a50:	681b      	ldr	r3, [r3, #0]
 8041a52:	4a67      	ldr	r2, [pc, #412]	; (8041bf0 <UART_SetConfig+0x278>)
 8041a54:	4293      	cmp	r3, r2
 8041a56:	d104      	bne.n	8041a62 <UART_SetConfig+0xea>
 8041a58:	231f      	movs	r3, #31
 8041a5a:	18fb      	adds	r3, r7, r3
 8041a5c:	2200      	movs	r2, #0
 8041a5e:	701a      	strb	r2, [r3, #0]
 8041a60:	e003      	b.n	8041a6a <UART_SetConfig+0xf2>
 8041a62:	231f      	movs	r3, #31
 8041a64:	18fb      	adds	r3, r7, r3
 8041a66:	2210      	movs	r2, #16
 8041a68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8041a6a:	687b      	ldr	r3, [r7, #4]
 8041a6c:	69da      	ldr	r2, [r3, #28]
 8041a6e:	2380      	movs	r3, #128	; 0x80
 8041a70:	021b      	lsls	r3, r3, #8
 8041a72:	429a      	cmp	r2, r3
 8041a74:	d15d      	bne.n	8041b32 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8041a76:	231f      	movs	r3, #31
 8041a78:	18fb      	adds	r3, r7, r3
 8041a7a:	781b      	ldrb	r3, [r3, #0]
 8041a7c:	2b08      	cmp	r3, #8
 8041a7e:	d015      	beq.n	8041aac <UART_SetConfig+0x134>
 8041a80:	dc18      	bgt.n	8041ab4 <UART_SetConfig+0x13c>
 8041a82:	2b04      	cmp	r3, #4
 8041a84:	d00d      	beq.n	8041aa2 <UART_SetConfig+0x12a>
 8041a86:	dc15      	bgt.n	8041ab4 <UART_SetConfig+0x13c>
 8041a88:	2b00      	cmp	r3, #0
 8041a8a:	d002      	beq.n	8041a92 <UART_SetConfig+0x11a>
 8041a8c:	2b02      	cmp	r3, #2
 8041a8e:	d005      	beq.n	8041a9c <UART_SetConfig+0x124>
 8041a90:	e010      	b.n	8041ab4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8041a92:	f7ff fd8f 	bl	80415b4 <HAL_RCC_GetPCLK1Freq>
 8041a96:	0003      	movs	r3, r0
 8041a98:	61bb      	str	r3, [r7, #24]
        break;
 8041a9a:	e012      	b.n	8041ac2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8041a9c:	4b55      	ldr	r3, [pc, #340]	; (8041bf4 <UART_SetConfig+0x27c>)
 8041a9e:	61bb      	str	r3, [r7, #24]
        break;
 8041aa0:	e00f      	b.n	8041ac2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8041aa2:	f7ff fd19 	bl	80414d8 <HAL_RCC_GetSysClockFreq>
 8041aa6:	0003      	movs	r3, r0
 8041aa8:	61bb      	str	r3, [r7, #24]
        break;
 8041aaa:	e00a      	b.n	8041ac2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8041aac:	2380      	movs	r3, #128	; 0x80
 8041aae:	021b      	lsls	r3, r3, #8
 8041ab0:	61bb      	str	r3, [r7, #24]
        break;
 8041ab2:	e006      	b.n	8041ac2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8041ab4:	2300      	movs	r3, #0
 8041ab6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8041ab8:	231e      	movs	r3, #30
 8041aba:	18fb      	adds	r3, r7, r3
 8041abc:	2201      	movs	r2, #1
 8041abe:	701a      	strb	r2, [r3, #0]
        break;
 8041ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8041ac2:	69bb      	ldr	r3, [r7, #24]
 8041ac4:	2b00      	cmp	r3, #0
 8041ac6:	d100      	bne.n	8041aca <UART_SetConfig+0x152>
 8041ac8:	e07b      	b.n	8041bc2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8041aca:	69bb      	ldr	r3, [r7, #24]
 8041acc:	005a      	lsls	r2, r3, #1
 8041ace:	687b      	ldr	r3, [r7, #4]
 8041ad0:	685b      	ldr	r3, [r3, #4]
 8041ad2:	085b      	lsrs	r3, r3, #1
 8041ad4:	18d2      	adds	r2, r2, r3
 8041ad6:	687b      	ldr	r3, [r7, #4]
 8041ad8:	685b      	ldr	r3, [r3, #4]
 8041ada:	0019      	movs	r1, r3
 8041adc:	0010      	movs	r0, r2
 8041ade:	f7fe fb1d 	bl	804011c <__udivsi3>
 8041ae2:	0003      	movs	r3, r0
 8041ae4:	b29b      	uxth	r3, r3
 8041ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8041ae8:	693b      	ldr	r3, [r7, #16]
 8041aea:	2b0f      	cmp	r3, #15
 8041aec:	d91c      	bls.n	8041b28 <UART_SetConfig+0x1b0>
 8041aee:	693a      	ldr	r2, [r7, #16]
 8041af0:	2380      	movs	r3, #128	; 0x80
 8041af2:	025b      	lsls	r3, r3, #9
 8041af4:	429a      	cmp	r2, r3
 8041af6:	d217      	bcs.n	8041b28 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8041af8:	693b      	ldr	r3, [r7, #16]
 8041afa:	b29a      	uxth	r2, r3
 8041afc:	200e      	movs	r0, #14
 8041afe:	183b      	adds	r3, r7, r0
 8041b00:	210f      	movs	r1, #15
 8041b02:	438a      	bics	r2, r1
 8041b04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8041b06:	693b      	ldr	r3, [r7, #16]
 8041b08:	085b      	lsrs	r3, r3, #1
 8041b0a:	b29b      	uxth	r3, r3
 8041b0c:	2207      	movs	r2, #7
 8041b0e:	4013      	ands	r3, r2
 8041b10:	b299      	uxth	r1, r3
 8041b12:	183b      	adds	r3, r7, r0
 8041b14:	183a      	adds	r2, r7, r0
 8041b16:	8812      	ldrh	r2, [r2, #0]
 8041b18:	430a      	orrs	r2, r1
 8041b1a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8041b1c:	687b      	ldr	r3, [r7, #4]
 8041b1e:	681b      	ldr	r3, [r3, #0]
 8041b20:	183a      	adds	r2, r7, r0
 8041b22:	8812      	ldrh	r2, [r2, #0]
 8041b24:	60da      	str	r2, [r3, #12]
 8041b26:	e04c      	b.n	8041bc2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8041b28:	231e      	movs	r3, #30
 8041b2a:	18fb      	adds	r3, r7, r3
 8041b2c:	2201      	movs	r2, #1
 8041b2e:	701a      	strb	r2, [r3, #0]
 8041b30:	e047      	b.n	8041bc2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8041b32:	231f      	movs	r3, #31
 8041b34:	18fb      	adds	r3, r7, r3
 8041b36:	781b      	ldrb	r3, [r3, #0]
 8041b38:	2b08      	cmp	r3, #8
 8041b3a:	d015      	beq.n	8041b68 <UART_SetConfig+0x1f0>
 8041b3c:	dc18      	bgt.n	8041b70 <UART_SetConfig+0x1f8>
 8041b3e:	2b04      	cmp	r3, #4
 8041b40:	d00d      	beq.n	8041b5e <UART_SetConfig+0x1e6>
 8041b42:	dc15      	bgt.n	8041b70 <UART_SetConfig+0x1f8>
 8041b44:	2b00      	cmp	r3, #0
 8041b46:	d002      	beq.n	8041b4e <UART_SetConfig+0x1d6>
 8041b48:	2b02      	cmp	r3, #2
 8041b4a:	d005      	beq.n	8041b58 <UART_SetConfig+0x1e0>
 8041b4c:	e010      	b.n	8041b70 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8041b4e:	f7ff fd31 	bl	80415b4 <HAL_RCC_GetPCLK1Freq>
 8041b52:	0003      	movs	r3, r0
 8041b54:	61bb      	str	r3, [r7, #24]
        break;
 8041b56:	e012      	b.n	8041b7e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8041b58:	4b26      	ldr	r3, [pc, #152]	; (8041bf4 <UART_SetConfig+0x27c>)
 8041b5a:	61bb      	str	r3, [r7, #24]
        break;
 8041b5c:	e00f      	b.n	8041b7e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8041b5e:	f7ff fcbb 	bl	80414d8 <HAL_RCC_GetSysClockFreq>
 8041b62:	0003      	movs	r3, r0
 8041b64:	61bb      	str	r3, [r7, #24]
        break;
 8041b66:	e00a      	b.n	8041b7e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8041b68:	2380      	movs	r3, #128	; 0x80
 8041b6a:	021b      	lsls	r3, r3, #8
 8041b6c:	61bb      	str	r3, [r7, #24]
        break;
 8041b6e:	e006      	b.n	8041b7e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8041b70:	2300      	movs	r3, #0
 8041b72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8041b74:	231e      	movs	r3, #30
 8041b76:	18fb      	adds	r3, r7, r3
 8041b78:	2201      	movs	r2, #1
 8041b7a:	701a      	strb	r2, [r3, #0]
        break;
 8041b7c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8041b7e:	69bb      	ldr	r3, [r7, #24]
 8041b80:	2b00      	cmp	r3, #0
 8041b82:	d01e      	beq.n	8041bc2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8041b84:	687b      	ldr	r3, [r7, #4]
 8041b86:	685b      	ldr	r3, [r3, #4]
 8041b88:	085a      	lsrs	r2, r3, #1
 8041b8a:	69bb      	ldr	r3, [r7, #24]
 8041b8c:	18d2      	adds	r2, r2, r3
 8041b8e:	687b      	ldr	r3, [r7, #4]
 8041b90:	685b      	ldr	r3, [r3, #4]
 8041b92:	0019      	movs	r1, r3
 8041b94:	0010      	movs	r0, r2
 8041b96:	f7fe fac1 	bl	804011c <__udivsi3>
 8041b9a:	0003      	movs	r3, r0
 8041b9c:	b29b      	uxth	r3, r3
 8041b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8041ba0:	693b      	ldr	r3, [r7, #16]
 8041ba2:	2b0f      	cmp	r3, #15
 8041ba4:	d909      	bls.n	8041bba <UART_SetConfig+0x242>
 8041ba6:	693a      	ldr	r2, [r7, #16]
 8041ba8:	2380      	movs	r3, #128	; 0x80
 8041baa:	025b      	lsls	r3, r3, #9
 8041bac:	429a      	cmp	r2, r3
 8041bae:	d204      	bcs.n	8041bba <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8041bb0:	687b      	ldr	r3, [r7, #4]
 8041bb2:	681b      	ldr	r3, [r3, #0]
 8041bb4:	693a      	ldr	r2, [r7, #16]
 8041bb6:	60da      	str	r2, [r3, #12]
 8041bb8:	e003      	b.n	8041bc2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8041bba:	231e      	movs	r3, #30
 8041bbc:	18fb      	adds	r3, r7, r3
 8041bbe:	2201      	movs	r2, #1
 8041bc0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8041bc2:	687b      	ldr	r3, [r7, #4]
 8041bc4:	2200      	movs	r2, #0
 8041bc6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8041bc8:	687b      	ldr	r3, [r7, #4]
 8041bca:	2200      	movs	r2, #0
 8041bcc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8041bce:	231e      	movs	r3, #30
 8041bd0:	18fb      	adds	r3, r7, r3
 8041bd2:	781b      	ldrb	r3, [r3, #0]
}
 8041bd4:	0018      	movs	r0, r3
 8041bd6:	46bd      	mov	sp, r7
 8041bd8:	b008      	add	sp, #32
 8041bda:	bd80      	pop	{r7, pc}
 8041bdc:	ffff69f3 	.word	0xffff69f3
 8041be0:	ffffcfff 	.word	0xffffcfff
 8041be4:	fffff4ff 	.word	0xfffff4ff
 8041be8:	40013800 	.word	0x40013800
 8041bec:	40021000 	.word	0x40021000
 8041bf0:	40004400 	.word	0x40004400
 8041bf4:	007a1200 	.word	0x007a1200

08041bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8041bf8:	b580      	push	{r7, lr}
 8041bfa:	b082      	sub	sp, #8
 8041bfc:	af00      	add	r7, sp, #0
 8041bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8041c00:	687b      	ldr	r3, [r7, #4]
 8041c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c04:	2201      	movs	r2, #1
 8041c06:	4013      	ands	r3, r2
 8041c08:	d00b      	beq.n	8041c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8041c0a:	687b      	ldr	r3, [r7, #4]
 8041c0c:	681b      	ldr	r3, [r3, #0]
 8041c0e:	685b      	ldr	r3, [r3, #4]
 8041c10:	4a4a      	ldr	r2, [pc, #296]	; (8041d3c <UART_AdvFeatureConfig+0x144>)
 8041c12:	4013      	ands	r3, r2
 8041c14:	0019      	movs	r1, r3
 8041c16:	687b      	ldr	r3, [r7, #4]
 8041c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8041c1a:	687b      	ldr	r3, [r7, #4]
 8041c1c:	681b      	ldr	r3, [r3, #0]
 8041c1e:	430a      	orrs	r2, r1
 8041c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8041c22:	687b      	ldr	r3, [r7, #4]
 8041c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c26:	2202      	movs	r2, #2
 8041c28:	4013      	ands	r3, r2
 8041c2a:	d00b      	beq.n	8041c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8041c2c:	687b      	ldr	r3, [r7, #4]
 8041c2e:	681b      	ldr	r3, [r3, #0]
 8041c30:	685b      	ldr	r3, [r3, #4]
 8041c32:	4a43      	ldr	r2, [pc, #268]	; (8041d40 <UART_AdvFeatureConfig+0x148>)
 8041c34:	4013      	ands	r3, r2
 8041c36:	0019      	movs	r1, r3
 8041c38:	687b      	ldr	r3, [r7, #4]
 8041c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8041c3c:	687b      	ldr	r3, [r7, #4]
 8041c3e:	681b      	ldr	r3, [r3, #0]
 8041c40:	430a      	orrs	r2, r1
 8041c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c48:	2204      	movs	r2, #4
 8041c4a:	4013      	ands	r3, r2
 8041c4c:	d00b      	beq.n	8041c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8041c4e:	687b      	ldr	r3, [r7, #4]
 8041c50:	681b      	ldr	r3, [r3, #0]
 8041c52:	685b      	ldr	r3, [r3, #4]
 8041c54:	4a3b      	ldr	r2, [pc, #236]	; (8041d44 <UART_AdvFeatureConfig+0x14c>)
 8041c56:	4013      	ands	r3, r2
 8041c58:	0019      	movs	r1, r3
 8041c5a:	687b      	ldr	r3, [r7, #4]
 8041c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041c5e:	687b      	ldr	r3, [r7, #4]
 8041c60:	681b      	ldr	r3, [r3, #0]
 8041c62:	430a      	orrs	r2, r1
 8041c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c6a:	2208      	movs	r2, #8
 8041c6c:	4013      	ands	r3, r2
 8041c6e:	d00b      	beq.n	8041c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	681b      	ldr	r3, [r3, #0]
 8041c74:	685b      	ldr	r3, [r3, #4]
 8041c76:	4a34      	ldr	r2, [pc, #208]	; (8041d48 <UART_AdvFeatureConfig+0x150>)
 8041c78:	4013      	ands	r3, r2
 8041c7a:	0019      	movs	r1, r3
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041c80:	687b      	ldr	r3, [r7, #4]
 8041c82:	681b      	ldr	r3, [r3, #0]
 8041c84:	430a      	orrs	r2, r1
 8041c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c8c:	2210      	movs	r2, #16
 8041c8e:	4013      	ands	r3, r2
 8041c90:	d00b      	beq.n	8041caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8041c92:	687b      	ldr	r3, [r7, #4]
 8041c94:	681b      	ldr	r3, [r3, #0]
 8041c96:	689b      	ldr	r3, [r3, #8]
 8041c98:	4a2c      	ldr	r2, [pc, #176]	; (8041d4c <UART_AdvFeatureConfig+0x154>)
 8041c9a:	4013      	ands	r3, r2
 8041c9c:	0019      	movs	r1, r3
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	681b      	ldr	r3, [r3, #0]
 8041ca6:	430a      	orrs	r2, r1
 8041ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8041caa:	687b      	ldr	r3, [r7, #4]
 8041cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cae:	2220      	movs	r2, #32
 8041cb0:	4013      	ands	r3, r2
 8041cb2:	d00b      	beq.n	8041ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8041cb4:	687b      	ldr	r3, [r7, #4]
 8041cb6:	681b      	ldr	r3, [r3, #0]
 8041cb8:	689b      	ldr	r3, [r3, #8]
 8041cba:	4a25      	ldr	r2, [pc, #148]	; (8041d50 <UART_AdvFeatureConfig+0x158>)
 8041cbc:	4013      	ands	r3, r2
 8041cbe:	0019      	movs	r1, r3
 8041cc0:	687b      	ldr	r3, [r7, #4]
 8041cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8041cc4:	687b      	ldr	r3, [r7, #4]
 8041cc6:	681b      	ldr	r3, [r3, #0]
 8041cc8:	430a      	orrs	r2, r1
 8041cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8041ccc:	687b      	ldr	r3, [r7, #4]
 8041cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cd0:	2240      	movs	r2, #64	; 0x40
 8041cd2:	4013      	ands	r3, r2
 8041cd4:	d01d      	beq.n	8041d12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8041cd6:	687b      	ldr	r3, [r7, #4]
 8041cd8:	681b      	ldr	r3, [r3, #0]
 8041cda:	685b      	ldr	r3, [r3, #4]
 8041cdc:	4a1d      	ldr	r2, [pc, #116]	; (8041d54 <UART_AdvFeatureConfig+0x15c>)
 8041cde:	4013      	ands	r3, r2
 8041ce0:	0019      	movs	r1, r3
 8041ce2:	687b      	ldr	r3, [r7, #4]
 8041ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8041ce6:	687b      	ldr	r3, [r7, #4]
 8041ce8:	681b      	ldr	r3, [r3, #0]
 8041cea:	430a      	orrs	r2, r1
 8041cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8041cee:	687b      	ldr	r3, [r7, #4]
 8041cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8041cf2:	2380      	movs	r3, #128	; 0x80
 8041cf4:	035b      	lsls	r3, r3, #13
 8041cf6:	429a      	cmp	r2, r3
 8041cf8:	d10b      	bne.n	8041d12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	681b      	ldr	r3, [r3, #0]
 8041cfe:	685b      	ldr	r3, [r3, #4]
 8041d00:	4a15      	ldr	r2, [pc, #84]	; (8041d58 <UART_AdvFeatureConfig+0x160>)
 8041d02:	4013      	ands	r3, r2
 8041d04:	0019      	movs	r1, r3
 8041d06:	687b      	ldr	r3, [r7, #4]
 8041d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8041d0a:	687b      	ldr	r3, [r7, #4]
 8041d0c:	681b      	ldr	r3, [r3, #0]
 8041d0e:	430a      	orrs	r2, r1
 8041d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8041d12:	687b      	ldr	r3, [r7, #4]
 8041d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d16:	2280      	movs	r2, #128	; 0x80
 8041d18:	4013      	ands	r3, r2
 8041d1a:	d00b      	beq.n	8041d34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	681b      	ldr	r3, [r3, #0]
 8041d20:	685b      	ldr	r3, [r3, #4]
 8041d22:	4a0e      	ldr	r2, [pc, #56]	; (8041d5c <UART_AdvFeatureConfig+0x164>)
 8041d24:	4013      	ands	r3, r2
 8041d26:	0019      	movs	r1, r3
 8041d28:	687b      	ldr	r3, [r7, #4]
 8041d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8041d2c:	687b      	ldr	r3, [r7, #4]
 8041d2e:	681b      	ldr	r3, [r3, #0]
 8041d30:	430a      	orrs	r2, r1
 8041d32:	605a      	str	r2, [r3, #4]
  }
}
 8041d34:	46c0      	nop			; (mov r8, r8)
 8041d36:	46bd      	mov	sp, r7
 8041d38:	b002      	add	sp, #8
 8041d3a:	bd80      	pop	{r7, pc}
 8041d3c:	fffdffff 	.word	0xfffdffff
 8041d40:	fffeffff 	.word	0xfffeffff
 8041d44:	fffbffff 	.word	0xfffbffff
 8041d48:	ffff7fff 	.word	0xffff7fff
 8041d4c:	ffffefff 	.word	0xffffefff
 8041d50:	ffffdfff 	.word	0xffffdfff
 8041d54:	ffefffff 	.word	0xffefffff
 8041d58:	ff9fffff 	.word	0xff9fffff
 8041d5c:	fff7ffff 	.word	0xfff7ffff

08041d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8041d60:	b580      	push	{r7, lr}
 8041d62:	b086      	sub	sp, #24
 8041d64:	af02      	add	r7, sp, #8
 8041d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041d68:	687b      	ldr	r3, [r7, #4]
 8041d6a:	2280      	movs	r2, #128	; 0x80
 8041d6c:	2100      	movs	r1, #0
 8041d6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8041d70:	f7fe fd40 	bl	80407f4 <HAL_GetTick>
 8041d74:	0003      	movs	r3, r0
 8041d76:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8041d78:	687b      	ldr	r3, [r7, #4]
 8041d7a:	681b      	ldr	r3, [r3, #0]
 8041d7c:	681b      	ldr	r3, [r3, #0]
 8041d7e:	2208      	movs	r2, #8
 8041d80:	4013      	ands	r3, r2
 8041d82:	2b08      	cmp	r3, #8
 8041d84:	d10c      	bne.n	8041da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8041d86:	68fb      	ldr	r3, [r7, #12]
 8041d88:	2280      	movs	r2, #128	; 0x80
 8041d8a:	0391      	lsls	r1, r2, #14
 8041d8c:	6878      	ldr	r0, [r7, #4]
 8041d8e:	4a17      	ldr	r2, [pc, #92]	; (8041dec <UART_CheckIdleState+0x8c>)
 8041d90:	9200      	str	r2, [sp, #0]
 8041d92:	2200      	movs	r2, #0
 8041d94:	f000 f82c 	bl	8041df0 <UART_WaitOnFlagUntilTimeout>
 8041d98:	1e03      	subs	r3, r0, #0
 8041d9a:	d001      	beq.n	8041da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8041d9c:	2303      	movs	r3, #3
 8041d9e:	e021      	b.n	8041de4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8041da0:	687b      	ldr	r3, [r7, #4]
 8041da2:	681b      	ldr	r3, [r3, #0]
 8041da4:	681b      	ldr	r3, [r3, #0]
 8041da6:	2204      	movs	r2, #4
 8041da8:	4013      	ands	r3, r2
 8041daa:	2b04      	cmp	r3, #4
 8041dac:	d10c      	bne.n	8041dc8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8041dae:	68fb      	ldr	r3, [r7, #12]
 8041db0:	2280      	movs	r2, #128	; 0x80
 8041db2:	03d1      	lsls	r1, r2, #15
 8041db4:	6878      	ldr	r0, [r7, #4]
 8041db6:	4a0d      	ldr	r2, [pc, #52]	; (8041dec <UART_CheckIdleState+0x8c>)
 8041db8:	9200      	str	r2, [sp, #0]
 8041dba:	2200      	movs	r2, #0
 8041dbc:	f000 f818 	bl	8041df0 <UART_WaitOnFlagUntilTimeout>
 8041dc0:	1e03      	subs	r3, r0, #0
 8041dc2:	d001      	beq.n	8041dc8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8041dc4:	2303      	movs	r3, #3
 8041dc6:	e00d      	b.n	8041de4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8041dc8:	687b      	ldr	r3, [r7, #4]
 8041dca:	2220      	movs	r2, #32
 8041dcc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8041dce:	687b      	ldr	r3, [r7, #4]
 8041dd0:	2220      	movs	r2, #32
 8041dd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8041dd4:	687b      	ldr	r3, [r7, #4]
 8041dd6:	2200      	movs	r2, #0
 8041dd8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8041dda:	687b      	ldr	r3, [r7, #4]
 8041ddc:	2274      	movs	r2, #116	; 0x74
 8041dde:	2100      	movs	r1, #0
 8041de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8041de2:	2300      	movs	r3, #0
}
 8041de4:	0018      	movs	r0, r3
 8041de6:	46bd      	mov	sp, r7
 8041de8:	b004      	add	sp, #16
 8041dea:	bd80      	pop	{r7, pc}
 8041dec:	01ffffff 	.word	0x01ffffff

08041df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8041df0:	b580      	push	{r7, lr}
 8041df2:	b094      	sub	sp, #80	; 0x50
 8041df4:	af00      	add	r7, sp, #0
 8041df6:	60f8      	str	r0, [r7, #12]
 8041df8:	60b9      	str	r1, [r7, #8]
 8041dfa:	603b      	str	r3, [r7, #0]
 8041dfc:	1dfb      	adds	r3, r7, #7
 8041dfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041e00:	e0a3      	b.n	8041f4a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8041e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8041e04:	3301      	adds	r3, #1
 8041e06:	d100      	bne.n	8041e0a <UART_WaitOnFlagUntilTimeout+0x1a>
 8041e08:	e09f      	b.n	8041f4a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8041e0a:	f7fe fcf3 	bl	80407f4 <HAL_GetTick>
 8041e0e:	0002      	movs	r2, r0
 8041e10:	683b      	ldr	r3, [r7, #0]
 8041e12:	1ad3      	subs	r3, r2, r3
 8041e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8041e16:	429a      	cmp	r2, r3
 8041e18:	d302      	bcc.n	8041e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8041e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8041e1c:	2b00      	cmp	r3, #0
 8041e1e:	d13d      	bne.n	8041e9c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041e20:	f3ef 8310 	mrs	r3, PRIMASK
 8041e24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8041e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8041e28:	647b      	str	r3, [r7, #68]	; 0x44
 8041e2a:	2301      	movs	r3, #1
 8041e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041e30:	f383 8810 	msr	PRIMASK, r3
}
 8041e34:	46c0      	nop			; (mov r8, r8)
 8041e36:	68fb      	ldr	r3, [r7, #12]
 8041e38:	681b      	ldr	r3, [r3, #0]
 8041e3a:	681a      	ldr	r2, [r3, #0]
 8041e3c:	68fb      	ldr	r3, [r7, #12]
 8041e3e:	681b      	ldr	r3, [r3, #0]
 8041e40:	494c      	ldr	r1, [pc, #304]	; (8041f74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8041e42:	400a      	ands	r2, r1
 8041e44:	601a      	str	r2, [r3, #0]
 8041e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8041e48:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041e4c:	f383 8810 	msr	PRIMASK, r3
}
 8041e50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041e52:	f3ef 8310 	mrs	r3, PRIMASK
 8041e56:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8041e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8041e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8041e5c:	2301      	movs	r3, #1
 8041e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041e62:	f383 8810 	msr	PRIMASK, r3
}
 8041e66:	46c0      	nop			; (mov r8, r8)
 8041e68:	68fb      	ldr	r3, [r7, #12]
 8041e6a:	681b      	ldr	r3, [r3, #0]
 8041e6c:	689a      	ldr	r2, [r3, #8]
 8041e6e:	68fb      	ldr	r3, [r7, #12]
 8041e70:	681b      	ldr	r3, [r3, #0]
 8041e72:	2101      	movs	r1, #1
 8041e74:	438a      	bics	r2, r1
 8041e76:	609a      	str	r2, [r3, #8]
 8041e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8041e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8041e7e:	f383 8810 	msr	PRIMASK, r3
}
 8041e82:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8041e84:	68fb      	ldr	r3, [r7, #12]
 8041e86:	2220      	movs	r2, #32
 8041e88:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8041e8a:	68fb      	ldr	r3, [r7, #12]
 8041e8c:	2220      	movs	r2, #32
 8041e8e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8041e90:	68fb      	ldr	r3, [r7, #12]
 8041e92:	2274      	movs	r2, #116	; 0x74
 8041e94:	2100      	movs	r1, #0
 8041e96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8041e98:	2303      	movs	r3, #3
 8041e9a:	e067      	b.n	8041f6c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8041e9c:	68fb      	ldr	r3, [r7, #12]
 8041e9e:	681b      	ldr	r3, [r3, #0]
 8041ea0:	681b      	ldr	r3, [r3, #0]
 8041ea2:	2204      	movs	r2, #4
 8041ea4:	4013      	ands	r3, r2
 8041ea6:	d050      	beq.n	8041f4a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8041ea8:	68fb      	ldr	r3, [r7, #12]
 8041eaa:	681b      	ldr	r3, [r3, #0]
 8041eac:	69da      	ldr	r2, [r3, #28]
 8041eae:	2380      	movs	r3, #128	; 0x80
 8041eb0:	011b      	lsls	r3, r3, #4
 8041eb2:	401a      	ands	r2, r3
 8041eb4:	2380      	movs	r3, #128	; 0x80
 8041eb6:	011b      	lsls	r3, r3, #4
 8041eb8:	429a      	cmp	r2, r3
 8041eba:	d146      	bne.n	8041f4a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8041ebc:	68fb      	ldr	r3, [r7, #12]
 8041ebe:	681b      	ldr	r3, [r3, #0]
 8041ec0:	2280      	movs	r2, #128	; 0x80
 8041ec2:	0112      	lsls	r2, r2, #4
 8041ec4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8041eca:	613b      	str	r3, [r7, #16]
  return(result);
 8041ecc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8041ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041ed0:	2301      	movs	r3, #1
 8041ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041ed4:	697b      	ldr	r3, [r7, #20]
 8041ed6:	f383 8810 	msr	PRIMASK, r3
}
 8041eda:	46c0      	nop			; (mov r8, r8)
 8041edc:	68fb      	ldr	r3, [r7, #12]
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	681a      	ldr	r2, [r3, #0]
 8041ee2:	68fb      	ldr	r3, [r7, #12]
 8041ee4:	681b      	ldr	r3, [r3, #0]
 8041ee6:	4923      	ldr	r1, [pc, #140]	; (8041f74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8041ee8:	400a      	ands	r2, r1
 8041eea:	601a      	str	r2, [r3, #0]
 8041eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8041eee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041ef0:	69bb      	ldr	r3, [r7, #24]
 8041ef2:	f383 8810 	msr	PRIMASK, r3
}
 8041ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8041efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8041efe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8041f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8041f02:	2301      	movs	r3, #1
 8041f04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041f06:	6a3b      	ldr	r3, [r7, #32]
 8041f08:	f383 8810 	msr	PRIMASK, r3
}
 8041f0c:	46c0      	nop			; (mov r8, r8)
 8041f0e:	68fb      	ldr	r3, [r7, #12]
 8041f10:	681b      	ldr	r3, [r3, #0]
 8041f12:	689a      	ldr	r2, [r3, #8]
 8041f14:	68fb      	ldr	r3, [r7, #12]
 8041f16:	681b      	ldr	r3, [r3, #0]
 8041f18:	2101      	movs	r1, #1
 8041f1a:	438a      	bics	r2, r1
 8041f1c:	609a      	str	r2, [r3, #8]
 8041f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8041f20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041f24:	f383 8810 	msr	PRIMASK, r3
}
 8041f28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8041f2a:	68fb      	ldr	r3, [r7, #12]
 8041f2c:	2220      	movs	r2, #32
 8041f2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8041f30:	68fb      	ldr	r3, [r7, #12]
 8041f32:	2220      	movs	r2, #32
 8041f34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8041f36:	68fb      	ldr	r3, [r7, #12]
 8041f38:	2280      	movs	r2, #128	; 0x80
 8041f3a:	2120      	movs	r1, #32
 8041f3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8041f3e:	68fb      	ldr	r3, [r7, #12]
 8041f40:	2274      	movs	r2, #116	; 0x74
 8041f42:	2100      	movs	r1, #0
 8041f44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8041f46:	2303      	movs	r3, #3
 8041f48:	e010      	b.n	8041f6c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041f4a:	68fb      	ldr	r3, [r7, #12]
 8041f4c:	681b      	ldr	r3, [r3, #0]
 8041f4e:	69db      	ldr	r3, [r3, #28]
 8041f50:	68ba      	ldr	r2, [r7, #8]
 8041f52:	4013      	ands	r3, r2
 8041f54:	68ba      	ldr	r2, [r7, #8]
 8041f56:	1ad3      	subs	r3, r2, r3
 8041f58:	425a      	negs	r2, r3
 8041f5a:	4153      	adcs	r3, r2
 8041f5c:	b2db      	uxtb	r3, r3
 8041f5e:	001a      	movs	r2, r3
 8041f60:	1dfb      	adds	r3, r7, #7
 8041f62:	781b      	ldrb	r3, [r3, #0]
 8041f64:	429a      	cmp	r2, r3
 8041f66:	d100      	bne.n	8041f6a <UART_WaitOnFlagUntilTimeout+0x17a>
 8041f68:	e74b      	b.n	8041e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8041f6a:	2300      	movs	r3, #0
}
 8041f6c:	0018      	movs	r0, r3
 8041f6e:	46bd      	mov	sp, r7
 8041f70:	b014      	add	sp, #80	; 0x50
 8041f72:	bd80      	pop	{r7, pc}
 8041f74:	fffffe5f 	.word	0xfffffe5f

08041f78 <__errno>:
 8041f78:	4b01      	ldr	r3, [pc, #4]	; (8041f80 <__errno+0x8>)
 8041f7a:	6818      	ldr	r0, [r3, #0]
 8041f7c:	4770      	bx	lr
 8041f7e:	46c0      	nop			; (mov r8, r8)
 8041f80:	20000010 	.word	0x20000010

08041f84 <__libc_init_array>:
 8041f84:	b570      	push	{r4, r5, r6, lr}
 8041f86:	2600      	movs	r6, #0
 8041f88:	4d0c      	ldr	r5, [pc, #48]	; (8041fbc <__libc_init_array+0x38>)
 8041f8a:	4c0d      	ldr	r4, [pc, #52]	; (8041fc0 <__libc_init_array+0x3c>)
 8041f8c:	1b64      	subs	r4, r4, r5
 8041f8e:	10a4      	asrs	r4, r4, #2
 8041f90:	42a6      	cmp	r6, r4
 8041f92:	d109      	bne.n	8041fa8 <__libc_init_array+0x24>
 8041f94:	2600      	movs	r6, #0
 8041f96:	f000 ffbf 	bl	8042f18 <_init>
 8041f9a:	4d0a      	ldr	r5, [pc, #40]	; (8041fc4 <__libc_init_array+0x40>)
 8041f9c:	4c0a      	ldr	r4, [pc, #40]	; (8041fc8 <__libc_init_array+0x44>)
 8041f9e:	1b64      	subs	r4, r4, r5
 8041fa0:	10a4      	asrs	r4, r4, #2
 8041fa2:	42a6      	cmp	r6, r4
 8041fa4:	d105      	bne.n	8041fb2 <__libc_init_array+0x2e>
 8041fa6:	bd70      	pop	{r4, r5, r6, pc}
 8041fa8:	00b3      	lsls	r3, r6, #2
 8041faa:	58eb      	ldr	r3, [r5, r3]
 8041fac:	4798      	blx	r3
 8041fae:	3601      	adds	r6, #1
 8041fb0:	e7ee      	b.n	8041f90 <__libc_init_array+0xc>
 8041fb2:	00b3      	lsls	r3, r6, #2
 8041fb4:	58eb      	ldr	r3, [r5, r3]
 8041fb6:	4798      	blx	r3
 8041fb8:	3601      	adds	r6, #1
 8041fba:	e7f2      	b.n	8041fa2 <__libc_init_array+0x1e>
 8041fbc:	08043024 	.word	0x08043024
 8041fc0:	08043024 	.word	0x08043024
 8041fc4:	08043024 	.word	0x08043024
 8041fc8:	08043028 	.word	0x08043028

08041fcc <memset>:
 8041fcc:	0003      	movs	r3, r0
 8041fce:	1882      	adds	r2, r0, r2
 8041fd0:	4293      	cmp	r3, r2
 8041fd2:	d100      	bne.n	8041fd6 <memset+0xa>
 8041fd4:	4770      	bx	lr
 8041fd6:	7019      	strb	r1, [r3, #0]
 8041fd8:	3301      	adds	r3, #1
 8041fda:	e7f9      	b.n	8041fd0 <memset+0x4>

08041fdc <iprintf>:
 8041fdc:	b40f      	push	{r0, r1, r2, r3}
 8041fde:	4b0b      	ldr	r3, [pc, #44]	; (804200c <iprintf+0x30>)
 8041fe0:	b513      	push	{r0, r1, r4, lr}
 8041fe2:	681c      	ldr	r4, [r3, #0]
 8041fe4:	2c00      	cmp	r4, #0
 8041fe6:	d005      	beq.n	8041ff4 <iprintf+0x18>
 8041fe8:	69a3      	ldr	r3, [r4, #24]
 8041fea:	2b00      	cmp	r3, #0
 8041fec:	d102      	bne.n	8041ff4 <iprintf+0x18>
 8041fee:	0020      	movs	r0, r4
 8041ff0:	f000 f870 	bl	80420d4 <__sinit>
 8041ff4:	ab05      	add	r3, sp, #20
 8041ff6:	0020      	movs	r0, r4
 8041ff8:	9a04      	ldr	r2, [sp, #16]
 8041ffa:	68a1      	ldr	r1, [r4, #8]
 8041ffc:	9301      	str	r3, [sp, #4]
 8041ffe:	f000 f993 	bl	8042328 <_vfiprintf_r>
 8042002:	bc16      	pop	{r1, r2, r4}
 8042004:	bc08      	pop	{r3}
 8042006:	b004      	add	sp, #16
 8042008:	4718      	bx	r3
 804200a:	46c0      	nop			; (mov r8, r8)
 804200c:	20000010 	.word	0x20000010

08042010 <std>:
 8042010:	2300      	movs	r3, #0
 8042012:	b510      	push	{r4, lr}
 8042014:	0004      	movs	r4, r0
 8042016:	6003      	str	r3, [r0, #0]
 8042018:	6043      	str	r3, [r0, #4]
 804201a:	6083      	str	r3, [r0, #8]
 804201c:	8181      	strh	r1, [r0, #12]
 804201e:	6643      	str	r3, [r0, #100]	; 0x64
 8042020:	0019      	movs	r1, r3
 8042022:	81c2      	strh	r2, [r0, #14]
 8042024:	6103      	str	r3, [r0, #16]
 8042026:	6143      	str	r3, [r0, #20]
 8042028:	6183      	str	r3, [r0, #24]
 804202a:	2208      	movs	r2, #8
 804202c:	305c      	adds	r0, #92	; 0x5c
 804202e:	f7ff ffcd 	bl	8041fcc <memset>
 8042032:	4b05      	ldr	r3, [pc, #20]	; (8042048 <std+0x38>)
 8042034:	6263      	str	r3, [r4, #36]	; 0x24
 8042036:	4b05      	ldr	r3, [pc, #20]	; (804204c <std+0x3c>)
 8042038:	6224      	str	r4, [r4, #32]
 804203a:	62a3      	str	r3, [r4, #40]	; 0x28
 804203c:	4b04      	ldr	r3, [pc, #16]	; (8042050 <std+0x40>)
 804203e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8042040:	4b04      	ldr	r3, [pc, #16]	; (8042054 <std+0x44>)
 8042042:	6323      	str	r3, [r4, #48]	; 0x30
 8042044:	bd10      	pop	{r4, pc}
 8042046:	46c0      	nop			; (mov r8, r8)
 8042048:	080428c5 	.word	0x080428c5
 804204c:	080428ed 	.word	0x080428ed
 8042050:	08042925 	.word	0x08042925
 8042054:	08042951 	.word	0x08042951

08042058 <_cleanup_r>:
 8042058:	b510      	push	{r4, lr}
 804205a:	4902      	ldr	r1, [pc, #8]	; (8042064 <_cleanup_r+0xc>)
 804205c:	f000 f8ba 	bl	80421d4 <_fwalk_reent>
 8042060:	bd10      	pop	{r4, pc}
 8042062:	46c0      	nop			; (mov r8, r8)
 8042064:	08042c5d 	.word	0x08042c5d

08042068 <__sfmoreglue>:
 8042068:	b570      	push	{r4, r5, r6, lr}
 804206a:	2568      	movs	r5, #104	; 0x68
 804206c:	1e4a      	subs	r2, r1, #1
 804206e:	4355      	muls	r5, r2
 8042070:	000e      	movs	r6, r1
 8042072:	0029      	movs	r1, r5
 8042074:	3174      	adds	r1, #116	; 0x74
 8042076:	f000 f8d1 	bl	804221c <_malloc_r>
 804207a:	1e04      	subs	r4, r0, #0
 804207c:	d008      	beq.n	8042090 <__sfmoreglue+0x28>
 804207e:	2100      	movs	r1, #0
 8042080:	002a      	movs	r2, r5
 8042082:	6001      	str	r1, [r0, #0]
 8042084:	6046      	str	r6, [r0, #4]
 8042086:	300c      	adds	r0, #12
 8042088:	60a0      	str	r0, [r4, #8]
 804208a:	3268      	adds	r2, #104	; 0x68
 804208c:	f7ff ff9e 	bl	8041fcc <memset>
 8042090:	0020      	movs	r0, r4
 8042092:	bd70      	pop	{r4, r5, r6, pc}

08042094 <__sfp_lock_acquire>:
 8042094:	b510      	push	{r4, lr}
 8042096:	4802      	ldr	r0, [pc, #8]	; (80420a0 <__sfp_lock_acquire+0xc>)
 8042098:	f000 f8bd 	bl	8042216 <__retarget_lock_acquire_recursive>
 804209c:	bd10      	pop	{r4, pc}
 804209e:	46c0      	nop			; (mov r8, r8)
 80420a0:	2000012c 	.word	0x2000012c

080420a4 <__sfp_lock_release>:
 80420a4:	b510      	push	{r4, lr}
 80420a6:	4802      	ldr	r0, [pc, #8]	; (80420b0 <__sfp_lock_release+0xc>)
 80420a8:	f000 f8b6 	bl	8042218 <__retarget_lock_release_recursive>
 80420ac:	bd10      	pop	{r4, pc}
 80420ae:	46c0      	nop			; (mov r8, r8)
 80420b0:	2000012c 	.word	0x2000012c

080420b4 <__sinit_lock_acquire>:
 80420b4:	b510      	push	{r4, lr}
 80420b6:	4802      	ldr	r0, [pc, #8]	; (80420c0 <__sinit_lock_acquire+0xc>)
 80420b8:	f000 f8ad 	bl	8042216 <__retarget_lock_acquire_recursive>
 80420bc:	bd10      	pop	{r4, pc}
 80420be:	46c0      	nop			; (mov r8, r8)
 80420c0:	20000127 	.word	0x20000127

080420c4 <__sinit_lock_release>:
 80420c4:	b510      	push	{r4, lr}
 80420c6:	4802      	ldr	r0, [pc, #8]	; (80420d0 <__sinit_lock_release+0xc>)
 80420c8:	f000 f8a6 	bl	8042218 <__retarget_lock_release_recursive>
 80420cc:	bd10      	pop	{r4, pc}
 80420ce:	46c0      	nop			; (mov r8, r8)
 80420d0:	20000127 	.word	0x20000127

080420d4 <__sinit>:
 80420d4:	b513      	push	{r0, r1, r4, lr}
 80420d6:	0004      	movs	r4, r0
 80420d8:	f7ff ffec 	bl	80420b4 <__sinit_lock_acquire>
 80420dc:	69a3      	ldr	r3, [r4, #24]
 80420de:	2b00      	cmp	r3, #0
 80420e0:	d002      	beq.n	80420e8 <__sinit+0x14>
 80420e2:	f7ff ffef 	bl	80420c4 <__sinit_lock_release>
 80420e6:	bd13      	pop	{r0, r1, r4, pc}
 80420e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80420ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80420ec:	6523      	str	r3, [r4, #80]	; 0x50
 80420ee:	4b13      	ldr	r3, [pc, #76]	; (804213c <__sinit+0x68>)
 80420f0:	4a13      	ldr	r2, [pc, #76]	; (8042140 <__sinit+0x6c>)
 80420f2:	681b      	ldr	r3, [r3, #0]
 80420f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80420f6:	9301      	str	r3, [sp, #4]
 80420f8:	42a3      	cmp	r3, r4
 80420fa:	d101      	bne.n	8042100 <__sinit+0x2c>
 80420fc:	2301      	movs	r3, #1
 80420fe:	61a3      	str	r3, [r4, #24]
 8042100:	0020      	movs	r0, r4
 8042102:	f000 f81f 	bl	8042144 <__sfp>
 8042106:	6060      	str	r0, [r4, #4]
 8042108:	0020      	movs	r0, r4
 804210a:	f000 f81b 	bl	8042144 <__sfp>
 804210e:	60a0      	str	r0, [r4, #8]
 8042110:	0020      	movs	r0, r4
 8042112:	f000 f817 	bl	8042144 <__sfp>
 8042116:	2200      	movs	r2, #0
 8042118:	2104      	movs	r1, #4
 804211a:	60e0      	str	r0, [r4, #12]
 804211c:	6860      	ldr	r0, [r4, #4]
 804211e:	f7ff ff77 	bl	8042010 <std>
 8042122:	2201      	movs	r2, #1
 8042124:	2109      	movs	r1, #9
 8042126:	68a0      	ldr	r0, [r4, #8]
 8042128:	f7ff ff72 	bl	8042010 <std>
 804212c:	2202      	movs	r2, #2
 804212e:	2112      	movs	r1, #18
 8042130:	68e0      	ldr	r0, [r4, #12]
 8042132:	f7ff ff6d 	bl	8042010 <std>
 8042136:	2301      	movs	r3, #1
 8042138:	61a3      	str	r3, [r4, #24]
 804213a:	e7d2      	b.n	80420e2 <__sinit+0xe>
 804213c:	08042f8c 	.word	0x08042f8c
 8042140:	08042059 	.word	0x08042059

08042144 <__sfp>:
 8042144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042146:	0007      	movs	r7, r0
 8042148:	f7ff ffa4 	bl	8042094 <__sfp_lock_acquire>
 804214c:	4b1f      	ldr	r3, [pc, #124]	; (80421cc <__sfp+0x88>)
 804214e:	681e      	ldr	r6, [r3, #0]
 8042150:	69b3      	ldr	r3, [r6, #24]
 8042152:	2b00      	cmp	r3, #0
 8042154:	d102      	bne.n	804215c <__sfp+0x18>
 8042156:	0030      	movs	r0, r6
 8042158:	f7ff ffbc 	bl	80420d4 <__sinit>
 804215c:	3648      	adds	r6, #72	; 0x48
 804215e:	68b4      	ldr	r4, [r6, #8]
 8042160:	6873      	ldr	r3, [r6, #4]
 8042162:	3b01      	subs	r3, #1
 8042164:	d504      	bpl.n	8042170 <__sfp+0x2c>
 8042166:	6833      	ldr	r3, [r6, #0]
 8042168:	2b00      	cmp	r3, #0
 804216a:	d022      	beq.n	80421b2 <__sfp+0x6e>
 804216c:	6836      	ldr	r6, [r6, #0]
 804216e:	e7f6      	b.n	804215e <__sfp+0x1a>
 8042170:	220c      	movs	r2, #12
 8042172:	5ea5      	ldrsh	r5, [r4, r2]
 8042174:	2d00      	cmp	r5, #0
 8042176:	d11a      	bne.n	80421ae <__sfp+0x6a>
 8042178:	0020      	movs	r0, r4
 804217a:	4b15      	ldr	r3, [pc, #84]	; (80421d0 <__sfp+0x8c>)
 804217c:	3058      	adds	r0, #88	; 0x58
 804217e:	60e3      	str	r3, [r4, #12]
 8042180:	6665      	str	r5, [r4, #100]	; 0x64
 8042182:	f000 f847 	bl	8042214 <__retarget_lock_init_recursive>
 8042186:	f7ff ff8d 	bl	80420a4 <__sfp_lock_release>
 804218a:	0020      	movs	r0, r4
 804218c:	2208      	movs	r2, #8
 804218e:	0029      	movs	r1, r5
 8042190:	6025      	str	r5, [r4, #0]
 8042192:	60a5      	str	r5, [r4, #8]
 8042194:	6065      	str	r5, [r4, #4]
 8042196:	6125      	str	r5, [r4, #16]
 8042198:	6165      	str	r5, [r4, #20]
 804219a:	61a5      	str	r5, [r4, #24]
 804219c:	305c      	adds	r0, #92	; 0x5c
 804219e:	f7ff ff15 	bl	8041fcc <memset>
 80421a2:	6365      	str	r5, [r4, #52]	; 0x34
 80421a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80421a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80421a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80421aa:	0020      	movs	r0, r4
 80421ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80421ae:	3468      	adds	r4, #104	; 0x68
 80421b0:	e7d7      	b.n	8042162 <__sfp+0x1e>
 80421b2:	2104      	movs	r1, #4
 80421b4:	0038      	movs	r0, r7
 80421b6:	f7ff ff57 	bl	8042068 <__sfmoreglue>
 80421ba:	1e04      	subs	r4, r0, #0
 80421bc:	6030      	str	r0, [r6, #0]
 80421be:	d1d5      	bne.n	804216c <__sfp+0x28>
 80421c0:	f7ff ff70 	bl	80420a4 <__sfp_lock_release>
 80421c4:	230c      	movs	r3, #12
 80421c6:	603b      	str	r3, [r7, #0]
 80421c8:	e7ef      	b.n	80421aa <__sfp+0x66>
 80421ca:	46c0      	nop			; (mov r8, r8)
 80421cc:	08042f8c 	.word	0x08042f8c
 80421d0:	ffff0001 	.word	0xffff0001

080421d4 <_fwalk_reent>:
 80421d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80421d6:	0004      	movs	r4, r0
 80421d8:	0006      	movs	r6, r0
 80421da:	2700      	movs	r7, #0
 80421dc:	9101      	str	r1, [sp, #4]
 80421de:	3448      	adds	r4, #72	; 0x48
 80421e0:	6863      	ldr	r3, [r4, #4]
 80421e2:	68a5      	ldr	r5, [r4, #8]
 80421e4:	9300      	str	r3, [sp, #0]
 80421e6:	9b00      	ldr	r3, [sp, #0]
 80421e8:	3b01      	subs	r3, #1
 80421ea:	9300      	str	r3, [sp, #0]
 80421ec:	d504      	bpl.n	80421f8 <_fwalk_reent+0x24>
 80421ee:	6824      	ldr	r4, [r4, #0]
 80421f0:	2c00      	cmp	r4, #0
 80421f2:	d1f5      	bne.n	80421e0 <_fwalk_reent+0xc>
 80421f4:	0038      	movs	r0, r7
 80421f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80421f8:	89ab      	ldrh	r3, [r5, #12]
 80421fa:	2b01      	cmp	r3, #1
 80421fc:	d908      	bls.n	8042210 <_fwalk_reent+0x3c>
 80421fe:	220e      	movs	r2, #14
 8042200:	5eab      	ldrsh	r3, [r5, r2]
 8042202:	3301      	adds	r3, #1
 8042204:	d004      	beq.n	8042210 <_fwalk_reent+0x3c>
 8042206:	0029      	movs	r1, r5
 8042208:	0030      	movs	r0, r6
 804220a:	9b01      	ldr	r3, [sp, #4]
 804220c:	4798      	blx	r3
 804220e:	4307      	orrs	r7, r0
 8042210:	3568      	adds	r5, #104	; 0x68
 8042212:	e7e8      	b.n	80421e6 <_fwalk_reent+0x12>

08042214 <__retarget_lock_init_recursive>:
 8042214:	4770      	bx	lr

08042216 <__retarget_lock_acquire_recursive>:
 8042216:	4770      	bx	lr

08042218 <__retarget_lock_release_recursive>:
 8042218:	4770      	bx	lr
	...

0804221c <_malloc_r>:
 804221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804221e:	2303      	movs	r3, #3
 8042220:	1ccd      	adds	r5, r1, #3
 8042222:	439d      	bics	r5, r3
 8042224:	3508      	adds	r5, #8
 8042226:	0006      	movs	r6, r0
 8042228:	2d0c      	cmp	r5, #12
 804222a:	d21f      	bcs.n	804226c <_malloc_r+0x50>
 804222c:	250c      	movs	r5, #12
 804222e:	42a9      	cmp	r1, r5
 8042230:	d81e      	bhi.n	8042270 <_malloc_r+0x54>
 8042232:	0030      	movs	r0, r6
 8042234:	f000 fdde 	bl	8042df4 <__malloc_lock>
 8042238:	4925      	ldr	r1, [pc, #148]	; (80422d0 <_malloc_r+0xb4>)
 804223a:	680a      	ldr	r2, [r1, #0]
 804223c:	0014      	movs	r4, r2
 804223e:	2c00      	cmp	r4, #0
 8042240:	d11a      	bne.n	8042278 <_malloc_r+0x5c>
 8042242:	4f24      	ldr	r7, [pc, #144]	; (80422d4 <_malloc_r+0xb8>)
 8042244:	683b      	ldr	r3, [r7, #0]
 8042246:	2b00      	cmp	r3, #0
 8042248:	d104      	bne.n	8042254 <_malloc_r+0x38>
 804224a:	0021      	movs	r1, r4
 804224c:	0030      	movs	r0, r6
 804224e:	f000 fb27 	bl	80428a0 <_sbrk_r>
 8042252:	6038      	str	r0, [r7, #0]
 8042254:	0029      	movs	r1, r5
 8042256:	0030      	movs	r0, r6
 8042258:	f000 fb22 	bl	80428a0 <_sbrk_r>
 804225c:	1c43      	adds	r3, r0, #1
 804225e:	d12b      	bne.n	80422b8 <_malloc_r+0x9c>
 8042260:	230c      	movs	r3, #12
 8042262:	0030      	movs	r0, r6
 8042264:	6033      	str	r3, [r6, #0]
 8042266:	f000 fdcd 	bl	8042e04 <__malloc_unlock>
 804226a:	e003      	b.n	8042274 <_malloc_r+0x58>
 804226c:	2d00      	cmp	r5, #0
 804226e:	dade      	bge.n	804222e <_malloc_r+0x12>
 8042270:	230c      	movs	r3, #12
 8042272:	6033      	str	r3, [r6, #0]
 8042274:	2000      	movs	r0, #0
 8042276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042278:	6823      	ldr	r3, [r4, #0]
 804227a:	1b5b      	subs	r3, r3, r5
 804227c:	d419      	bmi.n	80422b2 <_malloc_r+0x96>
 804227e:	2b0b      	cmp	r3, #11
 8042280:	d903      	bls.n	804228a <_malloc_r+0x6e>
 8042282:	6023      	str	r3, [r4, #0]
 8042284:	18e4      	adds	r4, r4, r3
 8042286:	6025      	str	r5, [r4, #0]
 8042288:	e003      	b.n	8042292 <_malloc_r+0x76>
 804228a:	6863      	ldr	r3, [r4, #4]
 804228c:	42a2      	cmp	r2, r4
 804228e:	d10e      	bne.n	80422ae <_malloc_r+0x92>
 8042290:	600b      	str	r3, [r1, #0]
 8042292:	0030      	movs	r0, r6
 8042294:	f000 fdb6 	bl	8042e04 <__malloc_unlock>
 8042298:	0020      	movs	r0, r4
 804229a:	2207      	movs	r2, #7
 804229c:	300b      	adds	r0, #11
 804229e:	1d23      	adds	r3, r4, #4
 80422a0:	4390      	bics	r0, r2
 80422a2:	1ac2      	subs	r2, r0, r3
 80422a4:	4298      	cmp	r0, r3
 80422a6:	d0e6      	beq.n	8042276 <_malloc_r+0x5a>
 80422a8:	1a1b      	subs	r3, r3, r0
 80422aa:	50a3      	str	r3, [r4, r2]
 80422ac:	e7e3      	b.n	8042276 <_malloc_r+0x5a>
 80422ae:	6053      	str	r3, [r2, #4]
 80422b0:	e7ef      	b.n	8042292 <_malloc_r+0x76>
 80422b2:	0022      	movs	r2, r4
 80422b4:	6864      	ldr	r4, [r4, #4]
 80422b6:	e7c2      	b.n	804223e <_malloc_r+0x22>
 80422b8:	2303      	movs	r3, #3
 80422ba:	1cc4      	adds	r4, r0, #3
 80422bc:	439c      	bics	r4, r3
 80422be:	42a0      	cmp	r0, r4
 80422c0:	d0e1      	beq.n	8042286 <_malloc_r+0x6a>
 80422c2:	1a21      	subs	r1, r4, r0
 80422c4:	0030      	movs	r0, r6
 80422c6:	f000 faeb 	bl	80428a0 <_sbrk_r>
 80422ca:	1c43      	adds	r3, r0, #1
 80422cc:	d1db      	bne.n	8042286 <_malloc_r+0x6a>
 80422ce:	e7c7      	b.n	8042260 <_malloc_r+0x44>
 80422d0:	20000094 	.word	0x20000094
 80422d4:	20000098 	.word	0x20000098

080422d8 <__sfputc_r>:
 80422d8:	6893      	ldr	r3, [r2, #8]
 80422da:	b510      	push	{r4, lr}
 80422dc:	3b01      	subs	r3, #1
 80422de:	6093      	str	r3, [r2, #8]
 80422e0:	2b00      	cmp	r3, #0
 80422e2:	da04      	bge.n	80422ee <__sfputc_r+0x16>
 80422e4:	6994      	ldr	r4, [r2, #24]
 80422e6:	42a3      	cmp	r3, r4
 80422e8:	db07      	blt.n	80422fa <__sfputc_r+0x22>
 80422ea:	290a      	cmp	r1, #10
 80422ec:	d005      	beq.n	80422fa <__sfputc_r+0x22>
 80422ee:	6813      	ldr	r3, [r2, #0]
 80422f0:	1c58      	adds	r0, r3, #1
 80422f2:	6010      	str	r0, [r2, #0]
 80422f4:	7019      	strb	r1, [r3, #0]
 80422f6:	0008      	movs	r0, r1
 80422f8:	bd10      	pop	{r4, pc}
 80422fa:	f000 fb2f 	bl	804295c <__swbuf_r>
 80422fe:	0001      	movs	r1, r0
 8042300:	e7f9      	b.n	80422f6 <__sfputc_r+0x1e>

08042302 <__sfputs_r>:
 8042302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042304:	0006      	movs	r6, r0
 8042306:	000f      	movs	r7, r1
 8042308:	0014      	movs	r4, r2
 804230a:	18d5      	adds	r5, r2, r3
 804230c:	42ac      	cmp	r4, r5
 804230e:	d101      	bne.n	8042314 <__sfputs_r+0x12>
 8042310:	2000      	movs	r0, #0
 8042312:	e007      	b.n	8042324 <__sfputs_r+0x22>
 8042314:	7821      	ldrb	r1, [r4, #0]
 8042316:	003a      	movs	r2, r7
 8042318:	0030      	movs	r0, r6
 804231a:	f7ff ffdd 	bl	80422d8 <__sfputc_r>
 804231e:	3401      	adds	r4, #1
 8042320:	1c43      	adds	r3, r0, #1
 8042322:	d1f3      	bne.n	804230c <__sfputs_r+0xa>
 8042324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08042328 <_vfiprintf_r>:
 8042328:	b5f0      	push	{r4, r5, r6, r7, lr}
 804232a:	b0a1      	sub	sp, #132	; 0x84
 804232c:	0006      	movs	r6, r0
 804232e:	000c      	movs	r4, r1
 8042330:	001f      	movs	r7, r3
 8042332:	9203      	str	r2, [sp, #12]
 8042334:	2800      	cmp	r0, #0
 8042336:	d004      	beq.n	8042342 <_vfiprintf_r+0x1a>
 8042338:	6983      	ldr	r3, [r0, #24]
 804233a:	2b00      	cmp	r3, #0
 804233c:	d101      	bne.n	8042342 <_vfiprintf_r+0x1a>
 804233e:	f7ff fec9 	bl	80420d4 <__sinit>
 8042342:	4b8e      	ldr	r3, [pc, #568]	; (804257c <_vfiprintf_r+0x254>)
 8042344:	429c      	cmp	r4, r3
 8042346:	d11c      	bne.n	8042382 <_vfiprintf_r+0x5a>
 8042348:	6874      	ldr	r4, [r6, #4]
 804234a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804234c:	07db      	lsls	r3, r3, #31
 804234e:	d405      	bmi.n	804235c <_vfiprintf_r+0x34>
 8042350:	89a3      	ldrh	r3, [r4, #12]
 8042352:	059b      	lsls	r3, r3, #22
 8042354:	d402      	bmi.n	804235c <_vfiprintf_r+0x34>
 8042356:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042358:	f7ff ff5d 	bl	8042216 <__retarget_lock_acquire_recursive>
 804235c:	89a3      	ldrh	r3, [r4, #12]
 804235e:	071b      	lsls	r3, r3, #28
 8042360:	d502      	bpl.n	8042368 <_vfiprintf_r+0x40>
 8042362:	6923      	ldr	r3, [r4, #16]
 8042364:	2b00      	cmp	r3, #0
 8042366:	d11d      	bne.n	80423a4 <_vfiprintf_r+0x7c>
 8042368:	0021      	movs	r1, r4
 804236a:	0030      	movs	r0, r6
 804236c:	f000 fb60 	bl	8042a30 <__swsetup_r>
 8042370:	2800      	cmp	r0, #0
 8042372:	d017      	beq.n	80423a4 <_vfiprintf_r+0x7c>
 8042374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042376:	07db      	lsls	r3, r3, #31
 8042378:	d50d      	bpl.n	8042396 <_vfiprintf_r+0x6e>
 804237a:	2001      	movs	r0, #1
 804237c:	4240      	negs	r0, r0
 804237e:	b021      	add	sp, #132	; 0x84
 8042380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8042382:	4b7f      	ldr	r3, [pc, #508]	; (8042580 <_vfiprintf_r+0x258>)
 8042384:	429c      	cmp	r4, r3
 8042386:	d101      	bne.n	804238c <_vfiprintf_r+0x64>
 8042388:	68b4      	ldr	r4, [r6, #8]
 804238a:	e7de      	b.n	804234a <_vfiprintf_r+0x22>
 804238c:	4b7d      	ldr	r3, [pc, #500]	; (8042584 <_vfiprintf_r+0x25c>)
 804238e:	429c      	cmp	r4, r3
 8042390:	d1db      	bne.n	804234a <_vfiprintf_r+0x22>
 8042392:	68f4      	ldr	r4, [r6, #12]
 8042394:	e7d9      	b.n	804234a <_vfiprintf_r+0x22>
 8042396:	89a3      	ldrh	r3, [r4, #12]
 8042398:	059b      	lsls	r3, r3, #22
 804239a:	d4ee      	bmi.n	804237a <_vfiprintf_r+0x52>
 804239c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804239e:	f7ff ff3b 	bl	8042218 <__retarget_lock_release_recursive>
 80423a2:	e7ea      	b.n	804237a <_vfiprintf_r+0x52>
 80423a4:	2300      	movs	r3, #0
 80423a6:	ad08      	add	r5, sp, #32
 80423a8:	616b      	str	r3, [r5, #20]
 80423aa:	3320      	adds	r3, #32
 80423ac:	766b      	strb	r3, [r5, #25]
 80423ae:	3310      	adds	r3, #16
 80423b0:	76ab      	strb	r3, [r5, #26]
 80423b2:	9707      	str	r7, [sp, #28]
 80423b4:	9f03      	ldr	r7, [sp, #12]
 80423b6:	783b      	ldrb	r3, [r7, #0]
 80423b8:	2b00      	cmp	r3, #0
 80423ba:	d001      	beq.n	80423c0 <_vfiprintf_r+0x98>
 80423bc:	2b25      	cmp	r3, #37	; 0x25
 80423be:	d14e      	bne.n	804245e <_vfiprintf_r+0x136>
 80423c0:	9b03      	ldr	r3, [sp, #12]
 80423c2:	1afb      	subs	r3, r7, r3
 80423c4:	9305      	str	r3, [sp, #20]
 80423c6:	9b03      	ldr	r3, [sp, #12]
 80423c8:	429f      	cmp	r7, r3
 80423ca:	d00d      	beq.n	80423e8 <_vfiprintf_r+0xc0>
 80423cc:	9b05      	ldr	r3, [sp, #20]
 80423ce:	0021      	movs	r1, r4
 80423d0:	0030      	movs	r0, r6
 80423d2:	9a03      	ldr	r2, [sp, #12]
 80423d4:	f7ff ff95 	bl	8042302 <__sfputs_r>
 80423d8:	1c43      	adds	r3, r0, #1
 80423da:	d100      	bne.n	80423de <_vfiprintf_r+0xb6>
 80423dc:	e0b5      	b.n	804254a <_vfiprintf_r+0x222>
 80423de:	696a      	ldr	r2, [r5, #20]
 80423e0:	9b05      	ldr	r3, [sp, #20]
 80423e2:	4694      	mov	ip, r2
 80423e4:	4463      	add	r3, ip
 80423e6:	616b      	str	r3, [r5, #20]
 80423e8:	783b      	ldrb	r3, [r7, #0]
 80423ea:	2b00      	cmp	r3, #0
 80423ec:	d100      	bne.n	80423f0 <_vfiprintf_r+0xc8>
 80423ee:	e0ac      	b.n	804254a <_vfiprintf_r+0x222>
 80423f0:	2201      	movs	r2, #1
 80423f2:	1c7b      	adds	r3, r7, #1
 80423f4:	9303      	str	r3, [sp, #12]
 80423f6:	2300      	movs	r3, #0
 80423f8:	4252      	negs	r2, r2
 80423fa:	606a      	str	r2, [r5, #4]
 80423fc:	a904      	add	r1, sp, #16
 80423fe:	3254      	adds	r2, #84	; 0x54
 8042400:	1852      	adds	r2, r2, r1
 8042402:	602b      	str	r3, [r5, #0]
 8042404:	60eb      	str	r3, [r5, #12]
 8042406:	60ab      	str	r3, [r5, #8]
 8042408:	7013      	strb	r3, [r2, #0]
 804240a:	65ab      	str	r3, [r5, #88]	; 0x58
 804240c:	9b03      	ldr	r3, [sp, #12]
 804240e:	2205      	movs	r2, #5
 8042410:	7819      	ldrb	r1, [r3, #0]
 8042412:	485d      	ldr	r0, [pc, #372]	; (8042588 <_vfiprintf_r+0x260>)
 8042414:	f000 fce2 	bl	8042ddc <memchr>
 8042418:	9b03      	ldr	r3, [sp, #12]
 804241a:	1c5f      	adds	r7, r3, #1
 804241c:	2800      	cmp	r0, #0
 804241e:	d120      	bne.n	8042462 <_vfiprintf_r+0x13a>
 8042420:	682a      	ldr	r2, [r5, #0]
 8042422:	06d3      	lsls	r3, r2, #27
 8042424:	d504      	bpl.n	8042430 <_vfiprintf_r+0x108>
 8042426:	2353      	movs	r3, #83	; 0x53
 8042428:	a904      	add	r1, sp, #16
 804242a:	185b      	adds	r3, r3, r1
 804242c:	2120      	movs	r1, #32
 804242e:	7019      	strb	r1, [r3, #0]
 8042430:	0713      	lsls	r3, r2, #28
 8042432:	d504      	bpl.n	804243e <_vfiprintf_r+0x116>
 8042434:	2353      	movs	r3, #83	; 0x53
 8042436:	a904      	add	r1, sp, #16
 8042438:	185b      	adds	r3, r3, r1
 804243a:	212b      	movs	r1, #43	; 0x2b
 804243c:	7019      	strb	r1, [r3, #0]
 804243e:	9b03      	ldr	r3, [sp, #12]
 8042440:	781b      	ldrb	r3, [r3, #0]
 8042442:	2b2a      	cmp	r3, #42	; 0x2a
 8042444:	d016      	beq.n	8042474 <_vfiprintf_r+0x14c>
 8042446:	2100      	movs	r1, #0
 8042448:	68eb      	ldr	r3, [r5, #12]
 804244a:	9f03      	ldr	r7, [sp, #12]
 804244c:	783a      	ldrb	r2, [r7, #0]
 804244e:	1c78      	adds	r0, r7, #1
 8042450:	3a30      	subs	r2, #48	; 0x30
 8042452:	4684      	mov	ip, r0
 8042454:	2a09      	cmp	r2, #9
 8042456:	d94f      	bls.n	80424f8 <_vfiprintf_r+0x1d0>
 8042458:	2900      	cmp	r1, #0
 804245a:	d111      	bne.n	8042480 <_vfiprintf_r+0x158>
 804245c:	e017      	b.n	804248e <_vfiprintf_r+0x166>
 804245e:	3701      	adds	r7, #1
 8042460:	e7a9      	b.n	80423b6 <_vfiprintf_r+0x8e>
 8042462:	4b49      	ldr	r3, [pc, #292]	; (8042588 <_vfiprintf_r+0x260>)
 8042464:	682a      	ldr	r2, [r5, #0]
 8042466:	1ac0      	subs	r0, r0, r3
 8042468:	2301      	movs	r3, #1
 804246a:	4083      	lsls	r3, r0
 804246c:	4313      	orrs	r3, r2
 804246e:	602b      	str	r3, [r5, #0]
 8042470:	9703      	str	r7, [sp, #12]
 8042472:	e7cb      	b.n	804240c <_vfiprintf_r+0xe4>
 8042474:	9b07      	ldr	r3, [sp, #28]
 8042476:	1d19      	adds	r1, r3, #4
 8042478:	681b      	ldr	r3, [r3, #0]
 804247a:	9107      	str	r1, [sp, #28]
 804247c:	2b00      	cmp	r3, #0
 804247e:	db01      	blt.n	8042484 <_vfiprintf_r+0x15c>
 8042480:	930b      	str	r3, [sp, #44]	; 0x2c
 8042482:	e004      	b.n	804248e <_vfiprintf_r+0x166>
 8042484:	425b      	negs	r3, r3
 8042486:	60eb      	str	r3, [r5, #12]
 8042488:	2302      	movs	r3, #2
 804248a:	4313      	orrs	r3, r2
 804248c:	602b      	str	r3, [r5, #0]
 804248e:	783b      	ldrb	r3, [r7, #0]
 8042490:	2b2e      	cmp	r3, #46	; 0x2e
 8042492:	d10a      	bne.n	80424aa <_vfiprintf_r+0x182>
 8042494:	787b      	ldrb	r3, [r7, #1]
 8042496:	2b2a      	cmp	r3, #42	; 0x2a
 8042498:	d137      	bne.n	804250a <_vfiprintf_r+0x1e2>
 804249a:	9b07      	ldr	r3, [sp, #28]
 804249c:	3702      	adds	r7, #2
 804249e:	1d1a      	adds	r2, r3, #4
 80424a0:	681b      	ldr	r3, [r3, #0]
 80424a2:	9207      	str	r2, [sp, #28]
 80424a4:	2b00      	cmp	r3, #0
 80424a6:	db2d      	blt.n	8042504 <_vfiprintf_r+0x1dc>
 80424a8:	9309      	str	r3, [sp, #36]	; 0x24
 80424aa:	2203      	movs	r2, #3
 80424ac:	7839      	ldrb	r1, [r7, #0]
 80424ae:	4837      	ldr	r0, [pc, #220]	; (804258c <_vfiprintf_r+0x264>)
 80424b0:	f000 fc94 	bl	8042ddc <memchr>
 80424b4:	2800      	cmp	r0, #0
 80424b6:	d007      	beq.n	80424c8 <_vfiprintf_r+0x1a0>
 80424b8:	4b34      	ldr	r3, [pc, #208]	; (804258c <_vfiprintf_r+0x264>)
 80424ba:	682a      	ldr	r2, [r5, #0]
 80424bc:	1ac0      	subs	r0, r0, r3
 80424be:	2340      	movs	r3, #64	; 0x40
 80424c0:	4083      	lsls	r3, r0
 80424c2:	4313      	orrs	r3, r2
 80424c4:	3701      	adds	r7, #1
 80424c6:	602b      	str	r3, [r5, #0]
 80424c8:	7839      	ldrb	r1, [r7, #0]
 80424ca:	1c7b      	adds	r3, r7, #1
 80424cc:	2206      	movs	r2, #6
 80424ce:	4830      	ldr	r0, [pc, #192]	; (8042590 <_vfiprintf_r+0x268>)
 80424d0:	9303      	str	r3, [sp, #12]
 80424d2:	7629      	strb	r1, [r5, #24]
 80424d4:	f000 fc82 	bl	8042ddc <memchr>
 80424d8:	2800      	cmp	r0, #0
 80424da:	d045      	beq.n	8042568 <_vfiprintf_r+0x240>
 80424dc:	4b2d      	ldr	r3, [pc, #180]	; (8042594 <_vfiprintf_r+0x26c>)
 80424de:	2b00      	cmp	r3, #0
 80424e0:	d127      	bne.n	8042532 <_vfiprintf_r+0x20a>
 80424e2:	2207      	movs	r2, #7
 80424e4:	9b07      	ldr	r3, [sp, #28]
 80424e6:	3307      	adds	r3, #7
 80424e8:	4393      	bics	r3, r2
 80424ea:	3308      	adds	r3, #8
 80424ec:	9307      	str	r3, [sp, #28]
 80424ee:	696b      	ldr	r3, [r5, #20]
 80424f0:	9a04      	ldr	r2, [sp, #16]
 80424f2:	189b      	adds	r3, r3, r2
 80424f4:	616b      	str	r3, [r5, #20]
 80424f6:	e75d      	b.n	80423b4 <_vfiprintf_r+0x8c>
 80424f8:	210a      	movs	r1, #10
 80424fa:	434b      	muls	r3, r1
 80424fc:	4667      	mov	r7, ip
 80424fe:	189b      	adds	r3, r3, r2
 8042500:	3909      	subs	r1, #9
 8042502:	e7a3      	b.n	804244c <_vfiprintf_r+0x124>
 8042504:	2301      	movs	r3, #1
 8042506:	425b      	negs	r3, r3
 8042508:	e7ce      	b.n	80424a8 <_vfiprintf_r+0x180>
 804250a:	2300      	movs	r3, #0
 804250c:	001a      	movs	r2, r3
 804250e:	3701      	adds	r7, #1
 8042510:	606b      	str	r3, [r5, #4]
 8042512:	7839      	ldrb	r1, [r7, #0]
 8042514:	1c78      	adds	r0, r7, #1
 8042516:	3930      	subs	r1, #48	; 0x30
 8042518:	4684      	mov	ip, r0
 804251a:	2909      	cmp	r1, #9
 804251c:	d903      	bls.n	8042526 <_vfiprintf_r+0x1fe>
 804251e:	2b00      	cmp	r3, #0
 8042520:	d0c3      	beq.n	80424aa <_vfiprintf_r+0x182>
 8042522:	9209      	str	r2, [sp, #36]	; 0x24
 8042524:	e7c1      	b.n	80424aa <_vfiprintf_r+0x182>
 8042526:	230a      	movs	r3, #10
 8042528:	435a      	muls	r2, r3
 804252a:	4667      	mov	r7, ip
 804252c:	1852      	adds	r2, r2, r1
 804252e:	3b09      	subs	r3, #9
 8042530:	e7ef      	b.n	8042512 <_vfiprintf_r+0x1ea>
 8042532:	ab07      	add	r3, sp, #28
 8042534:	9300      	str	r3, [sp, #0]
 8042536:	0022      	movs	r2, r4
 8042538:	0029      	movs	r1, r5
 804253a:	0030      	movs	r0, r6
 804253c:	4b16      	ldr	r3, [pc, #88]	; (8042598 <_vfiprintf_r+0x270>)
 804253e:	e000      	b.n	8042542 <_vfiprintf_r+0x21a>
 8042540:	bf00      	nop
 8042542:	9004      	str	r0, [sp, #16]
 8042544:	9b04      	ldr	r3, [sp, #16]
 8042546:	3301      	adds	r3, #1
 8042548:	d1d1      	bne.n	80424ee <_vfiprintf_r+0x1c6>
 804254a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804254c:	07db      	lsls	r3, r3, #31
 804254e:	d405      	bmi.n	804255c <_vfiprintf_r+0x234>
 8042550:	89a3      	ldrh	r3, [r4, #12]
 8042552:	059b      	lsls	r3, r3, #22
 8042554:	d402      	bmi.n	804255c <_vfiprintf_r+0x234>
 8042556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042558:	f7ff fe5e 	bl	8042218 <__retarget_lock_release_recursive>
 804255c:	89a3      	ldrh	r3, [r4, #12]
 804255e:	065b      	lsls	r3, r3, #25
 8042560:	d500      	bpl.n	8042564 <_vfiprintf_r+0x23c>
 8042562:	e70a      	b.n	804237a <_vfiprintf_r+0x52>
 8042564:	980d      	ldr	r0, [sp, #52]	; 0x34
 8042566:	e70a      	b.n	804237e <_vfiprintf_r+0x56>
 8042568:	ab07      	add	r3, sp, #28
 804256a:	9300      	str	r3, [sp, #0]
 804256c:	0022      	movs	r2, r4
 804256e:	0029      	movs	r1, r5
 8042570:	0030      	movs	r0, r6
 8042572:	4b09      	ldr	r3, [pc, #36]	; (8042598 <_vfiprintf_r+0x270>)
 8042574:	f000 f882 	bl	804267c <_printf_i>
 8042578:	e7e3      	b.n	8042542 <_vfiprintf_r+0x21a>
 804257a:	46c0      	nop			; (mov r8, r8)
 804257c:	08042fb0 	.word	0x08042fb0
 8042580:	08042fd0 	.word	0x08042fd0
 8042584:	08042f90 	.word	0x08042f90
 8042588:	08042ff0 	.word	0x08042ff0
 804258c:	08042ff6 	.word	0x08042ff6
 8042590:	08042ffa 	.word	0x08042ffa
 8042594:	00000000 	.word	0x00000000
 8042598:	08042303 	.word	0x08042303

0804259c <_printf_common>:
 804259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804259e:	0015      	movs	r5, r2
 80425a0:	9301      	str	r3, [sp, #4]
 80425a2:	688a      	ldr	r2, [r1, #8]
 80425a4:	690b      	ldr	r3, [r1, #16]
 80425a6:	000c      	movs	r4, r1
 80425a8:	9000      	str	r0, [sp, #0]
 80425aa:	4293      	cmp	r3, r2
 80425ac:	da00      	bge.n	80425b0 <_printf_common+0x14>
 80425ae:	0013      	movs	r3, r2
 80425b0:	0022      	movs	r2, r4
 80425b2:	602b      	str	r3, [r5, #0]
 80425b4:	3243      	adds	r2, #67	; 0x43
 80425b6:	7812      	ldrb	r2, [r2, #0]
 80425b8:	2a00      	cmp	r2, #0
 80425ba:	d001      	beq.n	80425c0 <_printf_common+0x24>
 80425bc:	3301      	adds	r3, #1
 80425be:	602b      	str	r3, [r5, #0]
 80425c0:	6823      	ldr	r3, [r4, #0]
 80425c2:	069b      	lsls	r3, r3, #26
 80425c4:	d502      	bpl.n	80425cc <_printf_common+0x30>
 80425c6:	682b      	ldr	r3, [r5, #0]
 80425c8:	3302      	adds	r3, #2
 80425ca:	602b      	str	r3, [r5, #0]
 80425cc:	6822      	ldr	r2, [r4, #0]
 80425ce:	2306      	movs	r3, #6
 80425d0:	0017      	movs	r7, r2
 80425d2:	401f      	ands	r7, r3
 80425d4:	421a      	tst	r2, r3
 80425d6:	d027      	beq.n	8042628 <_printf_common+0x8c>
 80425d8:	0023      	movs	r3, r4
 80425da:	3343      	adds	r3, #67	; 0x43
 80425dc:	781b      	ldrb	r3, [r3, #0]
 80425de:	1e5a      	subs	r2, r3, #1
 80425e0:	4193      	sbcs	r3, r2
 80425e2:	6822      	ldr	r2, [r4, #0]
 80425e4:	0692      	lsls	r2, r2, #26
 80425e6:	d430      	bmi.n	804264a <_printf_common+0xae>
 80425e8:	0022      	movs	r2, r4
 80425ea:	9901      	ldr	r1, [sp, #4]
 80425ec:	9800      	ldr	r0, [sp, #0]
 80425ee:	9e08      	ldr	r6, [sp, #32]
 80425f0:	3243      	adds	r2, #67	; 0x43
 80425f2:	47b0      	blx	r6
 80425f4:	1c43      	adds	r3, r0, #1
 80425f6:	d025      	beq.n	8042644 <_printf_common+0xa8>
 80425f8:	2306      	movs	r3, #6
 80425fa:	6820      	ldr	r0, [r4, #0]
 80425fc:	682a      	ldr	r2, [r5, #0]
 80425fe:	68e1      	ldr	r1, [r4, #12]
 8042600:	2500      	movs	r5, #0
 8042602:	4003      	ands	r3, r0
 8042604:	2b04      	cmp	r3, #4
 8042606:	d103      	bne.n	8042610 <_printf_common+0x74>
 8042608:	1a8d      	subs	r5, r1, r2
 804260a:	43eb      	mvns	r3, r5
 804260c:	17db      	asrs	r3, r3, #31
 804260e:	401d      	ands	r5, r3
 8042610:	68a3      	ldr	r3, [r4, #8]
 8042612:	6922      	ldr	r2, [r4, #16]
 8042614:	4293      	cmp	r3, r2
 8042616:	dd01      	ble.n	804261c <_printf_common+0x80>
 8042618:	1a9b      	subs	r3, r3, r2
 804261a:	18ed      	adds	r5, r5, r3
 804261c:	2700      	movs	r7, #0
 804261e:	42bd      	cmp	r5, r7
 8042620:	d120      	bne.n	8042664 <_printf_common+0xc8>
 8042622:	2000      	movs	r0, #0
 8042624:	e010      	b.n	8042648 <_printf_common+0xac>
 8042626:	3701      	adds	r7, #1
 8042628:	68e3      	ldr	r3, [r4, #12]
 804262a:	682a      	ldr	r2, [r5, #0]
 804262c:	1a9b      	subs	r3, r3, r2
 804262e:	42bb      	cmp	r3, r7
 8042630:	ddd2      	ble.n	80425d8 <_printf_common+0x3c>
 8042632:	0022      	movs	r2, r4
 8042634:	2301      	movs	r3, #1
 8042636:	9901      	ldr	r1, [sp, #4]
 8042638:	9800      	ldr	r0, [sp, #0]
 804263a:	9e08      	ldr	r6, [sp, #32]
 804263c:	3219      	adds	r2, #25
 804263e:	47b0      	blx	r6
 8042640:	1c43      	adds	r3, r0, #1
 8042642:	d1f0      	bne.n	8042626 <_printf_common+0x8a>
 8042644:	2001      	movs	r0, #1
 8042646:	4240      	negs	r0, r0
 8042648:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 804264a:	2030      	movs	r0, #48	; 0x30
 804264c:	18e1      	adds	r1, r4, r3
 804264e:	3143      	adds	r1, #67	; 0x43
 8042650:	7008      	strb	r0, [r1, #0]
 8042652:	0021      	movs	r1, r4
 8042654:	1c5a      	adds	r2, r3, #1
 8042656:	3145      	adds	r1, #69	; 0x45
 8042658:	7809      	ldrb	r1, [r1, #0]
 804265a:	18a2      	adds	r2, r4, r2
 804265c:	3243      	adds	r2, #67	; 0x43
 804265e:	3302      	adds	r3, #2
 8042660:	7011      	strb	r1, [r2, #0]
 8042662:	e7c1      	b.n	80425e8 <_printf_common+0x4c>
 8042664:	0022      	movs	r2, r4
 8042666:	2301      	movs	r3, #1
 8042668:	9901      	ldr	r1, [sp, #4]
 804266a:	9800      	ldr	r0, [sp, #0]
 804266c:	9e08      	ldr	r6, [sp, #32]
 804266e:	321a      	adds	r2, #26
 8042670:	47b0      	blx	r6
 8042672:	1c43      	adds	r3, r0, #1
 8042674:	d0e6      	beq.n	8042644 <_printf_common+0xa8>
 8042676:	3701      	adds	r7, #1
 8042678:	e7d1      	b.n	804261e <_printf_common+0x82>
	...

0804267c <_printf_i>:
 804267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804267e:	b08b      	sub	sp, #44	; 0x2c
 8042680:	9206      	str	r2, [sp, #24]
 8042682:	000a      	movs	r2, r1
 8042684:	3243      	adds	r2, #67	; 0x43
 8042686:	9307      	str	r3, [sp, #28]
 8042688:	9005      	str	r0, [sp, #20]
 804268a:	9204      	str	r2, [sp, #16]
 804268c:	7e0a      	ldrb	r2, [r1, #24]
 804268e:	000c      	movs	r4, r1
 8042690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8042692:	2a78      	cmp	r2, #120	; 0x78
 8042694:	d806      	bhi.n	80426a4 <_printf_i+0x28>
 8042696:	2a62      	cmp	r2, #98	; 0x62
 8042698:	d808      	bhi.n	80426ac <_printf_i+0x30>
 804269a:	2a00      	cmp	r2, #0
 804269c:	d100      	bne.n	80426a0 <_printf_i+0x24>
 804269e:	e0c0      	b.n	8042822 <_printf_i+0x1a6>
 80426a0:	2a58      	cmp	r2, #88	; 0x58
 80426a2:	d052      	beq.n	804274a <_printf_i+0xce>
 80426a4:	0026      	movs	r6, r4
 80426a6:	3642      	adds	r6, #66	; 0x42
 80426a8:	7032      	strb	r2, [r6, #0]
 80426aa:	e022      	b.n	80426f2 <_printf_i+0x76>
 80426ac:	0010      	movs	r0, r2
 80426ae:	3863      	subs	r0, #99	; 0x63
 80426b0:	2815      	cmp	r0, #21
 80426b2:	d8f7      	bhi.n	80426a4 <_printf_i+0x28>
 80426b4:	f7fd fd28 	bl	8040108 <__gnu_thumb1_case_shi>
 80426b8:	001f0016 	.word	0x001f0016
 80426bc:	fff6fff6 	.word	0xfff6fff6
 80426c0:	fff6fff6 	.word	0xfff6fff6
 80426c4:	fff6001f 	.word	0xfff6001f
 80426c8:	fff6fff6 	.word	0xfff6fff6
 80426cc:	00a8fff6 	.word	0x00a8fff6
 80426d0:	009a0036 	.word	0x009a0036
 80426d4:	fff6fff6 	.word	0xfff6fff6
 80426d8:	fff600b9 	.word	0xfff600b9
 80426dc:	fff60036 	.word	0xfff60036
 80426e0:	009efff6 	.word	0x009efff6
 80426e4:	0026      	movs	r6, r4
 80426e6:	681a      	ldr	r2, [r3, #0]
 80426e8:	3642      	adds	r6, #66	; 0x42
 80426ea:	1d11      	adds	r1, r2, #4
 80426ec:	6019      	str	r1, [r3, #0]
 80426ee:	6813      	ldr	r3, [r2, #0]
 80426f0:	7033      	strb	r3, [r6, #0]
 80426f2:	2301      	movs	r3, #1
 80426f4:	e0a7      	b.n	8042846 <_printf_i+0x1ca>
 80426f6:	6808      	ldr	r0, [r1, #0]
 80426f8:	6819      	ldr	r1, [r3, #0]
 80426fa:	1d0a      	adds	r2, r1, #4
 80426fc:	0605      	lsls	r5, r0, #24
 80426fe:	d50b      	bpl.n	8042718 <_printf_i+0x9c>
 8042700:	680d      	ldr	r5, [r1, #0]
 8042702:	601a      	str	r2, [r3, #0]
 8042704:	2d00      	cmp	r5, #0
 8042706:	da03      	bge.n	8042710 <_printf_i+0x94>
 8042708:	232d      	movs	r3, #45	; 0x2d
 804270a:	9a04      	ldr	r2, [sp, #16]
 804270c:	426d      	negs	r5, r5
 804270e:	7013      	strb	r3, [r2, #0]
 8042710:	4b61      	ldr	r3, [pc, #388]	; (8042898 <_printf_i+0x21c>)
 8042712:	270a      	movs	r7, #10
 8042714:	9303      	str	r3, [sp, #12]
 8042716:	e032      	b.n	804277e <_printf_i+0x102>
 8042718:	680d      	ldr	r5, [r1, #0]
 804271a:	601a      	str	r2, [r3, #0]
 804271c:	0641      	lsls	r1, r0, #25
 804271e:	d5f1      	bpl.n	8042704 <_printf_i+0x88>
 8042720:	b22d      	sxth	r5, r5
 8042722:	e7ef      	b.n	8042704 <_printf_i+0x88>
 8042724:	680d      	ldr	r5, [r1, #0]
 8042726:	6819      	ldr	r1, [r3, #0]
 8042728:	1d08      	adds	r0, r1, #4
 804272a:	6018      	str	r0, [r3, #0]
 804272c:	062e      	lsls	r6, r5, #24
 804272e:	d501      	bpl.n	8042734 <_printf_i+0xb8>
 8042730:	680d      	ldr	r5, [r1, #0]
 8042732:	e003      	b.n	804273c <_printf_i+0xc0>
 8042734:	066d      	lsls	r5, r5, #25
 8042736:	d5fb      	bpl.n	8042730 <_printf_i+0xb4>
 8042738:	680d      	ldr	r5, [r1, #0]
 804273a:	b2ad      	uxth	r5, r5
 804273c:	4b56      	ldr	r3, [pc, #344]	; (8042898 <_printf_i+0x21c>)
 804273e:	270a      	movs	r7, #10
 8042740:	9303      	str	r3, [sp, #12]
 8042742:	2a6f      	cmp	r2, #111	; 0x6f
 8042744:	d117      	bne.n	8042776 <_printf_i+0xfa>
 8042746:	2708      	movs	r7, #8
 8042748:	e015      	b.n	8042776 <_printf_i+0xfa>
 804274a:	3145      	adds	r1, #69	; 0x45
 804274c:	700a      	strb	r2, [r1, #0]
 804274e:	4a52      	ldr	r2, [pc, #328]	; (8042898 <_printf_i+0x21c>)
 8042750:	9203      	str	r2, [sp, #12]
 8042752:	681a      	ldr	r2, [r3, #0]
 8042754:	6821      	ldr	r1, [r4, #0]
 8042756:	ca20      	ldmia	r2!, {r5}
 8042758:	601a      	str	r2, [r3, #0]
 804275a:	0608      	lsls	r0, r1, #24
 804275c:	d550      	bpl.n	8042800 <_printf_i+0x184>
 804275e:	07cb      	lsls	r3, r1, #31
 8042760:	d502      	bpl.n	8042768 <_printf_i+0xec>
 8042762:	2320      	movs	r3, #32
 8042764:	4319      	orrs	r1, r3
 8042766:	6021      	str	r1, [r4, #0]
 8042768:	2710      	movs	r7, #16
 804276a:	2d00      	cmp	r5, #0
 804276c:	d103      	bne.n	8042776 <_printf_i+0xfa>
 804276e:	2320      	movs	r3, #32
 8042770:	6822      	ldr	r2, [r4, #0]
 8042772:	439a      	bics	r2, r3
 8042774:	6022      	str	r2, [r4, #0]
 8042776:	0023      	movs	r3, r4
 8042778:	2200      	movs	r2, #0
 804277a:	3343      	adds	r3, #67	; 0x43
 804277c:	701a      	strb	r2, [r3, #0]
 804277e:	6863      	ldr	r3, [r4, #4]
 8042780:	60a3      	str	r3, [r4, #8]
 8042782:	2b00      	cmp	r3, #0
 8042784:	db03      	blt.n	804278e <_printf_i+0x112>
 8042786:	2204      	movs	r2, #4
 8042788:	6821      	ldr	r1, [r4, #0]
 804278a:	4391      	bics	r1, r2
 804278c:	6021      	str	r1, [r4, #0]
 804278e:	2d00      	cmp	r5, #0
 8042790:	d102      	bne.n	8042798 <_printf_i+0x11c>
 8042792:	9e04      	ldr	r6, [sp, #16]
 8042794:	2b00      	cmp	r3, #0
 8042796:	d00c      	beq.n	80427b2 <_printf_i+0x136>
 8042798:	9e04      	ldr	r6, [sp, #16]
 804279a:	0028      	movs	r0, r5
 804279c:	0039      	movs	r1, r7
 804279e:	f7fd fd43 	bl	8040228 <__aeabi_uidivmod>
 80427a2:	9b03      	ldr	r3, [sp, #12]
 80427a4:	3e01      	subs	r6, #1
 80427a6:	5c5b      	ldrb	r3, [r3, r1]
 80427a8:	7033      	strb	r3, [r6, #0]
 80427aa:	002b      	movs	r3, r5
 80427ac:	0005      	movs	r5, r0
 80427ae:	429f      	cmp	r7, r3
 80427b0:	d9f3      	bls.n	804279a <_printf_i+0x11e>
 80427b2:	2f08      	cmp	r7, #8
 80427b4:	d109      	bne.n	80427ca <_printf_i+0x14e>
 80427b6:	6823      	ldr	r3, [r4, #0]
 80427b8:	07db      	lsls	r3, r3, #31
 80427ba:	d506      	bpl.n	80427ca <_printf_i+0x14e>
 80427bc:	6863      	ldr	r3, [r4, #4]
 80427be:	6922      	ldr	r2, [r4, #16]
 80427c0:	4293      	cmp	r3, r2
 80427c2:	dc02      	bgt.n	80427ca <_printf_i+0x14e>
 80427c4:	2330      	movs	r3, #48	; 0x30
 80427c6:	3e01      	subs	r6, #1
 80427c8:	7033      	strb	r3, [r6, #0]
 80427ca:	9b04      	ldr	r3, [sp, #16]
 80427cc:	1b9b      	subs	r3, r3, r6
 80427ce:	6123      	str	r3, [r4, #16]
 80427d0:	9b07      	ldr	r3, [sp, #28]
 80427d2:	0021      	movs	r1, r4
 80427d4:	9300      	str	r3, [sp, #0]
 80427d6:	9805      	ldr	r0, [sp, #20]
 80427d8:	9b06      	ldr	r3, [sp, #24]
 80427da:	aa09      	add	r2, sp, #36	; 0x24
 80427dc:	f7ff fede 	bl	804259c <_printf_common>
 80427e0:	1c43      	adds	r3, r0, #1
 80427e2:	d135      	bne.n	8042850 <_printf_i+0x1d4>
 80427e4:	2001      	movs	r0, #1
 80427e6:	4240      	negs	r0, r0
 80427e8:	b00b      	add	sp, #44	; 0x2c
 80427ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80427ec:	2220      	movs	r2, #32
 80427ee:	6809      	ldr	r1, [r1, #0]
 80427f0:	430a      	orrs	r2, r1
 80427f2:	6022      	str	r2, [r4, #0]
 80427f4:	0022      	movs	r2, r4
 80427f6:	2178      	movs	r1, #120	; 0x78
 80427f8:	3245      	adds	r2, #69	; 0x45
 80427fa:	7011      	strb	r1, [r2, #0]
 80427fc:	4a27      	ldr	r2, [pc, #156]	; (804289c <_printf_i+0x220>)
 80427fe:	e7a7      	b.n	8042750 <_printf_i+0xd4>
 8042800:	0648      	lsls	r0, r1, #25
 8042802:	d5ac      	bpl.n	804275e <_printf_i+0xe2>
 8042804:	b2ad      	uxth	r5, r5
 8042806:	e7aa      	b.n	804275e <_printf_i+0xe2>
 8042808:	681a      	ldr	r2, [r3, #0]
 804280a:	680d      	ldr	r5, [r1, #0]
 804280c:	1d10      	adds	r0, r2, #4
 804280e:	6949      	ldr	r1, [r1, #20]
 8042810:	6018      	str	r0, [r3, #0]
 8042812:	6813      	ldr	r3, [r2, #0]
 8042814:	062e      	lsls	r6, r5, #24
 8042816:	d501      	bpl.n	804281c <_printf_i+0x1a0>
 8042818:	6019      	str	r1, [r3, #0]
 804281a:	e002      	b.n	8042822 <_printf_i+0x1a6>
 804281c:	066d      	lsls	r5, r5, #25
 804281e:	d5fb      	bpl.n	8042818 <_printf_i+0x19c>
 8042820:	8019      	strh	r1, [r3, #0]
 8042822:	2300      	movs	r3, #0
 8042824:	9e04      	ldr	r6, [sp, #16]
 8042826:	6123      	str	r3, [r4, #16]
 8042828:	e7d2      	b.n	80427d0 <_printf_i+0x154>
 804282a:	681a      	ldr	r2, [r3, #0]
 804282c:	1d11      	adds	r1, r2, #4
 804282e:	6019      	str	r1, [r3, #0]
 8042830:	6816      	ldr	r6, [r2, #0]
 8042832:	2100      	movs	r1, #0
 8042834:	0030      	movs	r0, r6
 8042836:	6862      	ldr	r2, [r4, #4]
 8042838:	f000 fad0 	bl	8042ddc <memchr>
 804283c:	2800      	cmp	r0, #0
 804283e:	d001      	beq.n	8042844 <_printf_i+0x1c8>
 8042840:	1b80      	subs	r0, r0, r6
 8042842:	6060      	str	r0, [r4, #4]
 8042844:	6863      	ldr	r3, [r4, #4]
 8042846:	6123      	str	r3, [r4, #16]
 8042848:	2300      	movs	r3, #0
 804284a:	9a04      	ldr	r2, [sp, #16]
 804284c:	7013      	strb	r3, [r2, #0]
 804284e:	e7bf      	b.n	80427d0 <_printf_i+0x154>
 8042850:	6923      	ldr	r3, [r4, #16]
 8042852:	0032      	movs	r2, r6
 8042854:	9906      	ldr	r1, [sp, #24]
 8042856:	9805      	ldr	r0, [sp, #20]
 8042858:	9d07      	ldr	r5, [sp, #28]
 804285a:	47a8      	blx	r5
 804285c:	1c43      	adds	r3, r0, #1
 804285e:	d0c1      	beq.n	80427e4 <_printf_i+0x168>
 8042860:	6823      	ldr	r3, [r4, #0]
 8042862:	079b      	lsls	r3, r3, #30
 8042864:	d415      	bmi.n	8042892 <_printf_i+0x216>
 8042866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042868:	68e0      	ldr	r0, [r4, #12]
 804286a:	4298      	cmp	r0, r3
 804286c:	dabc      	bge.n	80427e8 <_printf_i+0x16c>
 804286e:	0018      	movs	r0, r3
 8042870:	e7ba      	b.n	80427e8 <_printf_i+0x16c>
 8042872:	0022      	movs	r2, r4
 8042874:	2301      	movs	r3, #1
 8042876:	9906      	ldr	r1, [sp, #24]
 8042878:	9805      	ldr	r0, [sp, #20]
 804287a:	9e07      	ldr	r6, [sp, #28]
 804287c:	3219      	adds	r2, #25
 804287e:	47b0      	blx	r6
 8042880:	1c43      	adds	r3, r0, #1
 8042882:	d0af      	beq.n	80427e4 <_printf_i+0x168>
 8042884:	3501      	adds	r5, #1
 8042886:	68e3      	ldr	r3, [r4, #12]
 8042888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804288a:	1a9b      	subs	r3, r3, r2
 804288c:	42ab      	cmp	r3, r5
 804288e:	dcf0      	bgt.n	8042872 <_printf_i+0x1f6>
 8042890:	e7e9      	b.n	8042866 <_printf_i+0x1ea>
 8042892:	2500      	movs	r5, #0
 8042894:	e7f7      	b.n	8042886 <_printf_i+0x20a>
 8042896:	46c0      	nop			; (mov r8, r8)
 8042898:	08043001 	.word	0x08043001
 804289c:	08043012 	.word	0x08043012

080428a0 <_sbrk_r>:
 80428a0:	2300      	movs	r3, #0
 80428a2:	b570      	push	{r4, r5, r6, lr}
 80428a4:	4d06      	ldr	r5, [pc, #24]	; (80428c0 <_sbrk_r+0x20>)
 80428a6:	0004      	movs	r4, r0
 80428a8:	0008      	movs	r0, r1
 80428aa:	602b      	str	r3, [r5, #0]
 80428ac:	f7fd fee2 	bl	8040674 <_sbrk>
 80428b0:	1c43      	adds	r3, r0, #1
 80428b2:	d103      	bne.n	80428bc <_sbrk_r+0x1c>
 80428b4:	682b      	ldr	r3, [r5, #0]
 80428b6:	2b00      	cmp	r3, #0
 80428b8:	d000      	beq.n	80428bc <_sbrk_r+0x1c>
 80428ba:	6023      	str	r3, [r4, #0]
 80428bc:	bd70      	pop	{r4, r5, r6, pc}
 80428be:	46c0      	nop			; (mov r8, r8)
 80428c0:	20000130 	.word	0x20000130

080428c4 <__sread>:
 80428c4:	b570      	push	{r4, r5, r6, lr}
 80428c6:	000c      	movs	r4, r1
 80428c8:	250e      	movs	r5, #14
 80428ca:	5f49      	ldrsh	r1, [r1, r5]
 80428cc:	f000 faec 	bl	8042ea8 <_read_r>
 80428d0:	2800      	cmp	r0, #0
 80428d2:	db03      	blt.n	80428dc <__sread+0x18>
 80428d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80428d6:	181b      	adds	r3, r3, r0
 80428d8:	6563      	str	r3, [r4, #84]	; 0x54
 80428da:	bd70      	pop	{r4, r5, r6, pc}
 80428dc:	89a3      	ldrh	r3, [r4, #12]
 80428de:	4a02      	ldr	r2, [pc, #8]	; (80428e8 <__sread+0x24>)
 80428e0:	4013      	ands	r3, r2
 80428e2:	81a3      	strh	r3, [r4, #12]
 80428e4:	e7f9      	b.n	80428da <__sread+0x16>
 80428e6:	46c0      	nop			; (mov r8, r8)
 80428e8:	ffffefff 	.word	0xffffefff

080428ec <__swrite>:
 80428ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80428ee:	001f      	movs	r7, r3
 80428f0:	898b      	ldrh	r3, [r1, #12]
 80428f2:	0005      	movs	r5, r0
 80428f4:	000c      	movs	r4, r1
 80428f6:	0016      	movs	r6, r2
 80428f8:	05db      	lsls	r3, r3, #23
 80428fa:	d505      	bpl.n	8042908 <__swrite+0x1c>
 80428fc:	230e      	movs	r3, #14
 80428fe:	5ec9      	ldrsh	r1, [r1, r3]
 8042900:	2200      	movs	r2, #0
 8042902:	2302      	movs	r3, #2
 8042904:	f000 f9ea 	bl	8042cdc <_lseek_r>
 8042908:	89a3      	ldrh	r3, [r4, #12]
 804290a:	4a05      	ldr	r2, [pc, #20]	; (8042920 <__swrite+0x34>)
 804290c:	0028      	movs	r0, r5
 804290e:	4013      	ands	r3, r2
 8042910:	81a3      	strh	r3, [r4, #12]
 8042912:	0032      	movs	r2, r6
 8042914:	230e      	movs	r3, #14
 8042916:	5ee1      	ldrsh	r1, [r4, r3]
 8042918:	003b      	movs	r3, r7
 804291a:	f000 f875 	bl	8042a08 <_write_r>
 804291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042920:	ffffefff 	.word	0xffffefff

08042924 <__sseek>:
 8042924:	b570      	push	{r4, r5, r6, lr}
 8042926:	000c      	movs	r4, r1
 8042928:	250e      	movs	r5, #14
 804292a:	5f49      	ldrsh	r1, [r1, r5]
 804292c:	f000 f9d6 	bl	8042cdc <_lseek_r>
 8042930:	89a3      	ldrh	r3, [r4, #12]
 8042932:	1c42      	adds	r2, r0, #1
 8042934:	d103      	bne.n	804293e <__sseek+0x1a>
 8042936:	4a05      	ldr	r2, [pc, #20]	; (804294c <__sseek+0x28>)
 8042938:	4013      	ands	r3, r2
 804293a:	81a3      	strh	r3, [r4, #12]
 804293c:	bd70      	pop	{r4, r5, r6, pc}
 804293e:	2280      	movs	r2, #128	; 0x80
 8042940:	0152      	lsls	r2, r2, #5
 8042942:	4313      	orrs	r3, r2
 8042944:	81a3      	strh	r3, [r4, #12]
 8042946:	6560      	str	r0, [r4, #84]	; 0x54
 8042948:	e7f8      	b.n	804293c <__sseek+0x18>
 804294a:	46c0      	nop			; (mov r8, r8)
 804294c:	ffffefff 	.word	0xffffefff

08042950 <__sclose>:
 8042950:	b510      	push	{r4, lr}
 8042952:	230e      	movs	r3, #14
 8042954:	5ec9      	ldrsh	r1, [r1, r3]
 8042956:	f000 f8e3 	bl	8042b20 <_close_r>
 804295a:	bd10      	pop	{r4, pc}

0804295c <__swbuf_r>:
 804295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804295e:	0005      	movs	r5, r0
 8042960:	000e      	movs	r6, r1
 8042962:	0014      	movs	r4, r2
 8042964:	2800      	cmp	r0, #0
 8042966:	d004      	beq.n	8042972 <__swbuf_r+0x16>
 8042968:	6983      	ldr	r3, [r0, #24]
 804296a:	2b00      	cmp	r3, #0
 804296c:	d101      	bne.n	8042972 <__swbuf_r+0x16>
 804296e:	f7ff fbb1 	bl	80420d4 <__sinit>
 8042972:	4b22      	ldr	r3, [pc, #136]	; (80429fc <__swbuf_r+0xa0>)
 8042974:	429c      	cmp	r4, r3
 8042976:	d12e      	bne.n	80429d6 <__swbuf_r+0x7a>
 8042978:	686c      	ldr	r4, [r5, #4]
 804297a:	69a3      	ldr	r3, [r4, #24]
 804297c:	60a3      	str	r3, [r4, #8]
 804297e:	89a3      	ldrh	r3, [r4, #12]
 8042980:	071b      	lsls	r3, r3, #28
 8042982:	d532      	bpl.n	80429ea <__swbuf_r+0x8e>
 8042984:	6923      	ldr	r3, [r4, #16]
 8042986:	2b00      	cmp	r3, #0
 8042988:	d02f      	beq.n	80429ea <__swbuf_r+0x8e>
 804298a:	6823      	ldr	r3, [r4, #0]
 804298c:	6922      	ldr	r2, [r4, #16]
 804298e:	b2f7      	uxtb	r7, r6
 8042990:	1a98      	subs	r0, r3, r2
 8042992:	6963      	ldr	r3, [r4, #20]
 8042994:	b2f6      	uxtb	r6, r6
 8042996:	4283      	cmp	r3, r0
 8042998:	dc05      	bgt.n	80429a6 <__swbuf_r+0x4a>
 804299a:	0021      	movs	r1, r4
 804299c:	0028      	movs	r0, r5
 804299e:	f000 f95d 	bl	8042c5c <_fflush_r>
 80429a2:	2800      	cmp	r0, #0
 80429a4:	d127      	bne.n	80429f6 <__swbuf_r+0x9a>
 80429a6:	68a3      	ldr	r3, [r4, #8]
 80429a8:	3001      	adds	r0, #1
 80429aa:	3b01      	subs	r3, #1
 80429ac:	60a3      	str	r3, [r4, #8]
 80429ae:	6823      	ldr	r3, [r4, #0]
 80429b0:	1c5a      	adds	r2, r3, #1
 80429b2:	6022      	str	r2, [r4, #0]
 80429b4:	701f      	strb	r7, [r3, #0]
 80429b6:	6963      	ldr	r3, [r4, #20]
 80429b8:	4283      	cmp	r3, r0
 80429ba:	d004      	beq.n	80429c6 <__swbuf_r+0x6a>
 80429bc:	89a3      	ldrh	r3, [r4, #12]
 80429be:	07db      	lsls	r3, r3, #31
 80429c0:	d507      	bpl.n	80429d2 <__swbuf_r+0x76>
 80429c2:	2e0a      	cmp	r6, #10
 80429c4:	d105      	bne.n	80429d2 <__swbuf_r+0x76>
 80429c6:	0021      	movs	r1, r4
 80429c8:	0028      	movs	r0, r5
 80429ca:	f000 f947 	bl	8042c5c <_fflush_r>
 80429ce:	2800      	cmp	r0, #0
 80429d0:	d111      	bne.n	80429f6 <__swbuf_r+0x9a>
 80429d2:	0030      	movs	r0, r6
 80429d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80429d6:	4b0a      	ldr	r3, [pc, #40]	; (8042a00 <__swbuf_r+0xa4>)
 80429d8:	429c      	cmp	r4, r3
 80429da:	d101      	bne.n	80429e0 <__swbuf_r+0x84>
 80429dc:	68ac      	ldr	r4, [r5, #8]
 80429de:	e7cc      	b.n	804297a <__swbuf_r+0x1e>
 80429e0:	4b08      	ldr	r3, [pc, #32]	; (8042a04 <__swbuf_r+0xa8>)
 80429e2:	429c      	cmp	r4, r3
 80429e4:	d1c9      	bne.n	804297a <__swbuf_r+0x1e>
 80429e6:	68ec      	ldr	r4, [r5, #12]
 80429e8:	e7c7      	b.n	804297a <__swbuf_r+0x1e>
 80429ea:	0021      	movs	r1, r4
 80429ec:	0028      	movs	r0, r5
 80429ee:	f000 f81f 	bl	8042a30 <__swsetup_r>
 80429f2:	2800      	cmp	r0, #0
 80429f4:	d0c9      	beq.n	804298a <__swbuf_r+0x2e>
 80429f6:	2601      	movs	r6, #1
 80429f8:	4276      	negs	r6, r6
 80429fa:	e7ea      	b.n	80429d2 <__swbuf_r+0x76>
 80429fc:	08042fb0 	.word	0x08042fb0
 8042a00:	08042fd0 	.word	0x08042fd0
 8042a04:	08042f90 	.word	0x08042f90

08042a08 <_write_r>:
 8042a08:	b570      	push	{r4, r5, r6, lr}
 8042a0a:	0004      	movs	r4, r0
 8042a0c:	0008      	movs	r0, r1
 8042a0e:	0011      	movs	r1, r2
 8042a10:	001a      	movs	r2, r3
 8042a12:	2300      	movs	r3, #0
 8042a14:	4d05      	ldr	r5, [pc, #20]	; (8042a2c <_write_r+0x24>)
 8042a16:	602b      	str	r3, [r5, #0]
 8042a18:	f7fd fde4 	bl	80405e4 <_write>
 8042a1c:	1c43      	adds	r3, r0, #1
 8042a1e:	d103      	bne.n	8042a28 <_write_r+0x20>
 8042a20:	682b      	ldr	r3, [r5, #0]
 8042a22:	2b00      	cmp	r3, #0
 8042a24:	d000      	beq.n	8042a28 <_write_r+0x20>
 8042a26:	6023      	str	r3, [r4, #0]
 8042a28:	bd70      	pop	{r4, r5, r6, pc}
 8042a2a:	46c0      	nop			; (mov r8, r8)
 8042a2c:	20000130 	.word	0x20000130

08042a30 <__swsetup_r>:
 8042a30:	4b37      	ldr	r3, [pc, #220]	; (8042b10 <__swsetup_r+0xe0>)
 8042a32:	b570      	push	{r4, r5, r6, lr}
 8042a34:	681d      	ldr	r5, [r3, #0]
 8042a36:	0006      	movs	r6, r0
 8042a38:	000c      	movs	r4, r1
 8042a3a:	2d00      	cmp	r5, #0
 8042a3c:	d005      	beq.n	8042a4a <__swsetup_r+0x1a>
 8042a3e:	69ab      	ldr	r3, [r5, #24]
 8042a40:	2b00      	cmp	r3, #0
 8042a42:	d102      	bne.n	8042a4a <__swsetup_r+0x1a>
 8042a44:	0028      	movs	r0, r5
 8042a46:	f7ff fb45 	bl	80420d4 <__sinit>
 8042a4a:	4b32      	ldr	r3, [pc, #200]	; (8042b14 <__swsetup_r+0xe4>)
 8042a4c:	429c      	cmp	r4, r3
 8042a4e:	d10f      	bne.n	8042a70 <__swsetup_r+0x40>
 8042a50:	686c      	ldr	r4, [r5, #4]
 8042a52:	230c      	movs	r3, #12
 8042a54:	5ee2      	ldrsh	r2, [r4, r3]
 8042a56:	b293      	uxth	r3, r2
 8042a58:	0711      	lsls	r1, r2, #28
 8042a5a:	d42d      	bmi.n	8042ab8 <__swsetup_r+0x88>
 8042a5c:	06d9      	lsls	r1, r3, #27
 8042a5e:	d411      	bmi.n	8042a84 <__swsetup_r+0x54>
 8042a60:	2309      	movs	r3, #9
 8042a62:	2001      	movs	r0, #1
 8042a64:	6033      	str	r3, [r6, #0]
 8042a66:	3337      	adds	r3, #55	; 0x37
 8042a68:	4313      	orrs	r3, r2
 8042a6a:	81a3      	strh	r3, [r4, #12]
 8042a6c:	4240      	negs	r0, r0
 8042a6e:	bd70      	pop	{r4, r5, r6, pc}
 8042a70:	4b29      	ldr	r3, [pc, #164]	; (8042b18 <__swsetup_r+0xe8>)
 8042a72:	429c      	cmp	r4, r3
 8042a74:	d101      	bne.n	8042a7a <__swsetup_r+0x4a>
 8042a76:	68ac      	ldr	r4, [r5, #8]
 8042a78:	e7eb      	b.n	8042a52 <__swsetup_r+0x22>
 8042a7a:	4b28      	ldr	r3, [pc, #160]	; (8042b1c <__swsetup_r+0xec>)
 8042a7c:	429c      	cmp	r4, r3
 8042a7e:	d1e8      	bne.n	8042a52 <__swsetup_r+0x22>
 8042a80:	68ec      	ldr	r4, [r5, #12]
 8042a82:	e7e6      	b.n	8042a52 <__swsetup_r+0x22>
 8042a84:	075b      	lsls	r3, r3, #29
 8042a86:	d513      	bpl.n	8042ab0 <__swsetup_r+0x80>
 8042a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042a8a:	2900      	cmp	r1, #0
 8042a8c:	d008      	beq.n	8042aa0 <__swsetup_r+0x70>
 8042a8e:	0023      	movs	r3, r4
 8042a90:	3344      	adds	r3, #68	; 0x44
 8042a92:	4299      	cmp	r1, r3
 8042a94:	d002      	beq.n	8042a9c <__swsetup_r+0x6c>
 8042a96:	0030      	movs	r0, r6
 8042a98:	f000 f9bc 	bl	8042e14 <_free_r>
 8042a9c:	2300      	movs	r3, #0
 8042a9e:	6363      	str	r3, [r4, #52]	; 0x34
 8042aa0:	2224      	movs	r2, #36	; 0x24
 8042aa2:	89a3      	ldrh	r3, [r4, #12]
 8042aa4:	4393      	bics	r3, r2
 8042aa6:	81a3      	strh	r3, [r4, #12]
 8042aa8:	2300      	movs	r3, #0
 8042aaa:	6063      	str	r3, [r4, #4]
 8042aac:	6923      	ldr	r3, [r4, #16]
 8042aae:	6023      	str	r3, [r4, #0]
 8042ab0:	2308      	movs	r3, #8
 8042ab2:	89a2      	ldrh	r2, [r4, #12]
 8042ab4:	4313      	orrs	r3, r2
 8042ab6:	81a3      	strh	r3, [r4, #12]
 8042ab8:	6923      	ldr	r3, [r4, #16]
 8042aba:	2b00      	cmp	r3, #0
 8042abc:	d10b      	bne.n	8042ad6 <__swsetup_r+0xa6>
 8042abe:	21a0      	movs	r1, #160	; 0xa0
 8042ac0:	2280      	movs	r2, #128	; 0x80
 8042ac2:	89a3      	ldrh	r3, [r4, #12]
 8042ac4:	0089      	lsls	r1, r1, #2
 8042ac6:	0092      	lsls	r2, r2, #2
 8042ac8:	400b      	ands	r3, r1
 8042aca:	4293      	cmp	r3, r2
 8042acc:	d003      	beq.n	8042ad6 <__swsetup_r+0xa6>
 8042ace:	0021      	movs	r1, r4
 8042ad0:	0030      	movs	r0, r6
 8042ad2:	f000 f93f 	bl	8042d54 <__smakebuf_r>
 8042ad6:	220c      	movs	r2, #12
 8042ad8:	5ea3      	ldrsh	r3, [r4, r2]
 8042ada:	2001      	movs	r0, #1
 8042adc:	001a      	movs	r2, r3
 8042ade:	b299      	uxth	r1, r3
 8042ae0:	4002      	ands	r2, r0
 8042ae2:	4203      	tst	r3, r0
 8042ae4:	d00f      	beq.n	8042b06 <__swsetup_r+0xd6>
 8042ae6:	2200      	movs	r2, #0
 8042ae8:	60a2      	str	r2, [r4, #8]
 8042aea:	6962      	ldr	r2, [r4, #20]
 8042aec:	4252      	negs	r2, r2
 8042aee:	61a2      	str	r2, [r4, #24]
 8042af0:	2000      	movs	r0, #0
 8042af2:	6922      	ldr	r2, [r4, #16]
 8042af4:	4282      	cmp	r2, r0
 8042af6:	d1ba      	bne.n	8042a6e <__swsetup_r+0x3e>
 8042af8:	060a      	lsls	r2, r1, #24
 8042afa:	d5b8      	bpl.n	8042a6e <__swsetup_r+0x3e>
 8042afc:	2240      	movs	r2, #64	; 0x40
 8042afe:	4313      	orrs	r3, r2
 8042b00:	81a3      	strh	r3, [r4, #12]
 8042b02:	3801      	subs	r0, #1
 8042b04:	e7b3      	b.n	8042a6e <__swsetup_r+0x3e>
 8042b06:	0788      	lsls	r0, r1, #30
 8042b08:	d400      	bmi.n	8042b0c <__swsetup_r+0xdc>
 8042b0a:	6962      	ldr	r2, [r4, #20]
 8042b0c:	60a2      	str	r2, [r4, #8]
 8042b0e:	e7ef      	b.n	8042af0 <__swsetup_r+0xc0>
 8042b10:	20000010 	.word	0x20000010
 8042b14:	08042fb0 	.word	0x08042fb0
 8042b18:	08042fd0 	.word	0x08042fd0
 8042b1c:	08042f90 	.word	0x08042f90

08042b20 <_close_r>:
 8042b20:	2300      	movs	r3, #0
 8042b22:	b570      	push	{r4, r5, r6, lr}
 8042b24:	4d06      	ldr	r5, [pc, #24]	; (8042b40 <_close_r+0x20>)
 8042b26:	0004      	movs	r4, r0
 8042b28:	0008      	movs	r0, r1
 8042b2a:	602b      	str	r3, [r5, #0]
 8042b2c:	f7fd fd76 	bl	804061c <_close>
 8042b30:	1c43      	adds	r3, r0, #1
 8042b32:	d103      	bne.n	8042b3c <_close_r+0x1c>
 8042b34:	682b      	ldr	r3, [r5, #0]
 8042b36:	2b00      	cmp	r3, #0
 8042b38:	d000      	beq.n	8042b3c <_close_r+0x1c>
 8042b3a:	6023      	str	r3, [r4, #0]
 8042b3c:	bd70      	pop	{r4, r5, r6, pc}
 8042b3e:	46c0      	nop			; (mov r8, r8)
 8042b40:	20000130 	.word	0x20000130

08042b44 <__sflush_r>:
 8042b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042b46:	898b      	ldrh	r3, [r1, #12]
 8042b48:	0005      	movs	r5, r0
 8042b4a:	000c      	movs	r4, r1
 8042b4c:	071a      	lsls	r2, r3, #28
 8042b4e:	d45f      	bmi.n	8042c10 <__sflush_r+0xcc>
 8042b50:	684a      	ldr	r2, [r1, #4]
 8042b52:	2a00      	cmp	r2, #0
 8042b54:	dc04      	bgt.n	8042b60 <__sflush_r+0x1c>
 8042b56:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8042b58:	2a00      	cmp	r2, #0
 8042b5a:	dc01      	bgt.n	8042b60 <__sflush_r+0x1c>
 8042b5c:	2000      	movs	r0, #0
 8042b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8042b60:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8042b62:	2f00      	cmp	r7, #0
 8042b64:	d0fa      	beq.n	8042b5c <__sflush_r+0x18>
 8042b66:	2200      	movs	r2, #0
 8042b68:	2180      	movs	r1, #128	; 0x80
 8042b6a:	682e      	ldr	r6, [r5, #0]
 8042b6c:	602a      	str	r2, [r5, #0]
 8042b6e:	001a      	movs	r2, r3
 8042b70:	0149      	lsls	r1, r1, #5
 8042b72:	400a      	ands	r2, r1
 8042b74:	420b      	tst	r3, r1
 8042b76:	d034      	beq.n	8042be2 <__sflush_r+0x9e>
 8042b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8042b7a:	89a3      	ldrh	r3, [r4, #12]
 8042b7c:	075b      	lsls	r3, r3, #29
 8042b7e:	d506      	bpl.n	8042b8e <__sflush_r+0x4a>
 8042b80:	6863      	ldr	r3, [r4, #4]
 8042b82:	1ac0      	subs	r0, r0, r3
 8042b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8042b86:	2b00      	cmp	r3, #0
 8042b88:	d001      	beq.n	8042b8e <__sflush_r+0x4a>
 8042b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8042b8c:	1ac0      	subs	r0, r0, r3
 8042b8e:	0002      	movs	r2, r0
 8042b90:	6a21      	ldr	r1, [r4, #32]
 8042b92:	2300      	movs	r3, #0
 8042b94:	0028      	movs	r0, r5
 8042b96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8042b98:	47b8      	blx	r7
 8042b9a:	89a1      	ldrh	r1, [r4, #12]
 8042b9c:	1c43      	adds	r3, r0, #1
 8042b9e:	d106      	bne.n	8042bae <__sflush_r+0x6a>
 8042ba0:	682b      	ldr	r3, [r5, #0]
 8042ba2:	2b1d      	cmp	r3, #29
 8042ba4:	d831      	bhi.n	8042c0a <__sflush_r+0xc6>
 8042ba6:	4a2c      	ldr	r2, [pc, #176]	; (8042c58 <__sflush_r+0x114>)
 8042ba8:	40da      	lsrs	r2, r3
 8042baa:	07d3      	lsls	r3, r2, #31
 8042bac:	d52d      	bpl.n	8042c0a <__sflush_r+0xc6>
 8042bae:	2300      	movs	r3, #0
 8042bb0:	6063      	str	r3, [r4, #4]
 8042bb2:	6923      	ldr	r3, [r4, #16]
 8042bb4:	6023      	str	r3, [r4, #0]
 8042bb6:	04cb      	lsls	r3, r1, #19
 8042bb8:	d505      	bpl.n	8042bc6 <__sflush_r+0x82>
 8042bba:	1c43      	adds	r3, r0, #1
 8042bbc:	d102      	bne.n	8042bc4 <__sflush_r+0x80>
 8042bbe:	682b      	ldr	r3, [r5, #0]
 8042bc0:	2b00      	cmp	r3, #0
 8042bc2:	d100      	bne.n	8042bc6 <__sflush_r+0x82>
 8042bc4:	6560      	str	r0, [r4, #84]	; 0x54
 8042bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042bc8:	602e      	str	r6, [r5, #0]
 8042bca:	2900      	cmp	r1, #0
 8042bcc:	d0c6      	beq.n	8042b5c <__sflush_r+0x18>
 8042bce:	0023      	movs	r3, r4
 8042bd0:	3344      	adds	r3, #68	; 0x44
 8042bd2:	4299      	cmp	r1, r3
 8042bd4:	d002      	beq.n	8042bdc <__sflush_r+0x98>
 8042bd6:	0028      	movs	r0, r5
 8042bd8:	f000 f91c 	bl	8042e14 <_free_r>
 8042bdc:	2000      	movs	r0, #0
 8042bde:	6360      	str	r0, [r4, #52]	; 0x34
 8042be0:	e7bd      	b.n	8042b5e <__sflush_r+0x1a>
 8042be2:	2301      	movs	r3, #1
 8042be4:	0028      	movs	r0, r5
 8042be6:	6a21      	ldr	r1, [r4, #32]
 8042be8:	47b8      	blx	r7
 8042bea:	1c43      	adds	r3, r0, #1
 8042bec:	d1c5      	bne.n	8042b7a <__sflush_r+0x36>
 8042bee:	682b      	ldr	r3, [r5, #0]
 8042bf0:	2b00      	cmp	r3, #0
 8042bf2:	d0c2      	beq.n	8042b7a <__sflush_r+0x36>
 8042bf4:	2b1d      	cmp	r3, #29
 8042bf6:	d001      	beq.n	8042bfc <__sflush_r+0xb8>
 8042bf8:	2b16      	cmp	r3, #22
 8042bfa:	d101      	bne.n	8042c00 <__sflush_r+0xbc>
 8042bfc:	602e      	str	r6, [r5, #0]
 8042bfe:	e7ad      	b.n	8042b5c <__sflush_r+0x18>
 8042c00:	2340      	movs	r3, #64	; 0x40
 8042c02:	89a2      	ldrh	r2, [r4, #12]
 8042c04:	4313      	orrs	r3, r2
 8042c06:	81a3      	strh	r3, [r4, #12]
 8042c08:	e7a9      	b.n	8042b5e <__sflush_r+0x1a>
 8042c0a:	2340      	movs	r3, #64	; 0x40
 8042c0c:	430b      	orrs	r3, r1
 8042c0e:	e7fa      	b.n	8042c06 <__sflush_r+0xc2>
 8042c10:	690f      	ldr	r7, [r1, #16]
 8042c12:	2f00      	cmp	r7, #0
 8042c14:	d0a2      	beq.n	8042b5c <__sflush_r+0x18>
 8042c16:	680a      	ldr	r2, [r1, #0]
 8042c18:	600f      	str	r7, [r1, #0]
 8042c1a:	1bd2      	subs	r2, r2, r7
 8042c1c:	9201      	str	r2, [sp, #4]
 8042c1e:	2200      	movs	r2, #0
 8042c20:	079b      	lsls	r3, r3, #30
 8042c22:	d100      	bne.n	8042c26 <__sflush_r+0xe2>
 8042c24:	694a      	ldr	r2, [r1, #20]
 8042c26:	60a2      	str	r2, [r4, #8]
 8042c28:	9b01      	ldr	r3, [sp, #4]
 8042c2a:	2b00      	cmp	r3, #0
 8042c2c:	dc00      	bgt.n	8042c30 <__sflush_r+0xec>
 8042c2e:	e795      	b.n	8042b5c <__sflush_r+0x18>
 8042c30:	003a      	movs	r2, r7
 8042c32:	0028      	movs	r0, r5
 8042c34:	9b01      	ldr	r3, [sp, #4]
 8042c36:	6a21      	ldr	r1, [r4, #32]
 8042c38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8042c3a:	47b0      	blx	r6
 8042c3c:	2800      	cmp	r0, #0
 8042c3e:	dc06      	bgt.n	8042c4e <__sflush_r+0x10a>
 8042c40:	2340      	movs	r3, #64	; 0x40
 8042c42:	2001      	movs	r0, #1
 8042c44:	89a2      	ldrh	r2, [r4, #12]
 8042c46:	4240      	negs	r0, r0
 8042c48:	4313      	orrs	r3, r2
 8042c4a:	81a3      	strh	r3, [r4, #12]
 8042c4c:	e787      	b.n	8042b5e <__sflush_r+0x1a>
 8042c4e:	9b01      	ldr	r3, [sp, #4]
 8042c50:	183f      	adds	r7, r7, r0
 8042c52:	1a1b      	subs	r3, r3, r0
 8042c54:	9301      	str	r3, [sp, #4]
 8042c56:	e7e7      	b.n	8042c28 <__sflush_r+0xe4>
 8042c58:	20400001 	.word	0x20400001

08042c5c <_fflush_r>:
 8042c5c:	690b      	ldr	r3, [r1, #16]
 8042c5e:	b570      	push	{r4, r5, r6, lr}
 8042c60:	0005      	movs	r5, r0
 8042c62:	000c      	movs	r4, r1
 8042c64:	2b00      	cmp	r3, #0
 8042c66:	d102      	bne.n	8042c6e <_fflush_r+0x12>
 8042c68:	2500      	movs	r5, #0
 8042c6a:	0028      	movs	r0, r5
 8042c6c:	bd70      	pop	{r4, r5, r6, pc}
 8042c6e:	2800      	cmp	r0, #0
 8042c70:	d004      	beq.n	8042c7c <_fflush_r+0x20>
 8042c72:	6983      	ldr	r3, [r0, #24]
 8042c74:	2b00      	cmp	r3, #0
 8042c76:	d101      	bne.n	8042c7c <_fflush_r+0x20>
 8042c78:	f7ff fa2c 	bl	80420d4 <__sinit>
 8042c7c:	4b14      	ldr	r3, [pc, #80]	; (8042cd0 <_fflush_r+0x74>)
 8042c7e:	429c      	cmp	r4, r3
 8042c80:	d11b      	bne.n	8042cba <_fflush_r+0x5e>
 8042c82:	686c      	ldr	r4, [r5, #4]
 8042c84:	220c      	movs	r2, #12
 8042c86:	5ea3      	ldrsh	r3, [r4, r2]
 8042c88:	2b00      	cmp	r3, #0
 8042c8a:	d0ed      	beq.n	8042c68 <_fflush_r+0xc>
 8042c8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8042c8e:	07d2      	lsls	r2, r2, #31
 8042c90:	d404      	bmi.n	8042c9c <_fflush_r+0x40>
 8042c92:	059b      	lsls	r3, r3, #22
 8042c94:	d402      	bmi.n	8042c9c <_fflush_r+0x40>
 8042c96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042c98:	f7ff fabd 	bl	8042216 <__retarget_lock_acquire_recursive>
 8042c9c:	0028      	movs	r0, r5
 8042c9e:	0021      	movs	r1, r4
 8042ca0:	f7ff ff50 	bl	8042b44 <__sflush_r>
 8042ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042ca6:	0005      	movs	r5, r0
 8042ca8:	07db      	lsls	r3, r3, #31
 8042caa:	d4de      	bmi.n	8042c6a <_fflush_r+0xe>
 8042cac:	89a3      	ldrh	r3, [r4, #12]
 8042cae:	059b      	lsls	r3, r3, #22
 8042cb0:	d4db      	bmi.n	8042c6a <_fflush_r+0xe>
 8042cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042cb4:	f7ff fab0 	bl	8042218 <__retarget_lock_release_recursive>
 8042cb8:	e7d7      	b.n	8042c6a <_fflush_r+0xe>
 8042cba:	4b06      	ldr	r3, [pc, #24]	; (8042cd4 <_fflush_r+0x78>)
 8042cbc:	429c      	cmp	r4, r3
 8042cbe:	d101      	bne.n	8042cc4 <_fflush_r+0x68>
 8042cc0:	68ac      	ldr	r4, [r5, #8]
 8042cc2:	e7df      	b.n	8042c84 <_fflush_r+0x28>
 8042cc4:	4b04      	ldr	r3, [pc, #16]	; (8042cd8 <_fflush_r+0x7c>)
 8042cc6:	429c      	cmp	r4, r3
 8042cc8:	d1dc      	bne.n	8042c84 <_fflush_r+0x28>
 8042cca:	68ec      	ldr	r4, [r5, #12]
 8042ccc:	e7da      	b.n	8042c84 <_fflush_r+0x28>
 8042cce:	46c0      	nop			; (mov r8, r8)
 8042cd0:	08042fb0 	.word	0x08042fb0
 8042cd4:	08042fd0 	.word	0x08042fd0
 8042cd8:	08042f90 	.word	0x08042f90

08042cdc <_lseek_r>:
 8042cdc:	b570      	push	{r4, r5, r6, lr}
 8042cde:	0004      	movs	r4, r0
 8042ce0:	0008      	movs	r0, r1
 8042ce2:	0011      	movs	r1, r2
 8042ce4:	001a      	movs	r2, r3
 8042ce6:	2300      	movs	r3, #0
 8042ce8:	4d05      	ldr	r5, [pc, #20]	; (8042d00 <_lseek_r+0x24>)
 8042cea:	602b      	str	r3, [r5, #0]
 8042cec:	f7fd fcb7 	bl	804065e <_lseek>
 8042cf0:	1c43      	adds	r3, r0, #1
 8042cf2:	d103      	bne.n	8042cfc <_lseek_r+0x20>
 8042cf4:	682b      	ldr	r3, [r5, #0]
 8042cf6:	2b00      	cmp	r3, #0
 8042cf8:	d000      	beq.n	8042cfc <_lseek_r+0x20>
 8042cfa:	6023      	str	r3, [r4, #0]
 8042cfc:	bd70      	pop	{r4, r5, r6, pc}
 8042cfe:	46c0      	nop			; (mov r8, r8)
 8042d00:	20000130 	.word	0x20000130

08042d04 <__swhatbuf_r>:
 8042d04:	b570      	push	{r4, r5, r6, lr}
 8042d06:	000e      	movs	r6, r1
 8042d08:	001d      	movs	r5, r3
 8042d0a:	230e      	movs	r3, #14
 8042d0c:	5ec9      	ldrsh	r1, [r1, r3]
 8042d0e:	0014      	movs	r4, r2
 8042d10:	b096      	sub	sp, #88	; 0x58
 8042d12:	2900      	cmp	r1, #0
 8042d14:	da07      	bge.n	8042d26 <__swhatbuf_r+0x22>
 8042d16:	2300      	movs	r3, #0
 8042d18:	602b      	str	r3, [r5, #0]
 8042d1a:	89b3      	ldrh	r3, [r6, #12]
 8042d1c:	061b      	lsls	r3, r3, #24
 8042d1e:	d411      	bmi.n	8042d44 <__swhatbuf_r+0x40>
 8042d20:	2380      	movs	r3, #128	; 0x80
 8042d22:	00db      	lsls	r3, r3, #3
 8042d24:	e00f      	b.n	8042d46 <__swhatbuf_r+0x42>
 8042d26:	466a      	mov	r2, sp
 8042d28:	f000 f8d2 	bl	8042ed0 <_fstat_r>
 8042d2c:	2800      	cmp	r0, #0
 8042d2e:	dbf2      	blt.n	8042d16 <__swhatbuf_r+0x12>
 8042d30:	23f0      	movs	r3, #240	; 0xf0
 8042d32:	9901      	ldr	r1, [sp, #4]
 8042d34:	021b      	lsls	r3, r3, #8
 8042d36:	4019      	ands	r1, r3
 8042d38:	4b05      	ldr	r3, [pc, #20]	; (8042d50 <__swhatbuf_r+0x4c>)
 8042d3a:	18c9      	adds	r1, r1, r3
 8042d3c:	424b      	negs	r3, r1
 8042d3e:	4159      	adcs	r1, r3
 8042d40:	6029      	str	r1, [r5, #0]
 8042d42:	e7ed      	b.n	8042d20 <__swhatbuf_r+0x1c>
 8042d44:	2340      	movs	r3, #64	; 0x40
 8042d46:	2000      	movs	r0, #0
 8042d48:	6023      	str	r3, [r4, #0]
 8042d4a:	b016      	add	sp, #88	; 0x58
 8042d4c:	bd70      	pop	{r4, r5, r6, pc}
 8042d4e:	46c0      	nop			; (mov r8, r8)
 8042d50:	ffffe000 	.word	0xffffe000

08042d54 <__smakebuf_r>:
 8042d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042d56:	2602      	movs	r6, #2
 8042d58:	898b      	ldrh	r3, [r1, #12]
 8042d5a:	0005      	movs	r5, r0
 8042d5c:	000c      	movs	r4, r1
 8042d5e:	4233      	tst	r3, r6
 8042d60:	d006      	beq.n	8042d70 <__smakebuf_r+0x1c>
 8042d62:	0023      	movs	r3, r4
 8042d64:	3347      	adds	r3, #71	; 0x47
 8042d66:	6023      	str	r3, [r4, #0]
 8042d68:	6123      	str	r3, [r4, #16]
 8042d6a:	2301      	movs	r3, #1
 8042d6c:	6163      	str	r3, [r4, #20]
 8042d6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8042d70:	466a      	mov	r2, sp
 8042d72:	ab01      	add	r3, sp, #4
 8042d74:	f7ff ffc6 	bl	8042d04 <__swhatbuf_r>
 8042d78:	9900      	ldr	r1, [sp, #0]
 8042d7a:	0007      	movs	r7, r0
 8042d7c:	0028      	movs	r0, r5
 8042d7e:	f7ff fa4d 	bl	804221c <_malloc_r>
 8042d82:	2800      	cmp	r0, #0
 8042d84:	d108      	bne.n	8042d98 <__smakebuf_r+0x44>
 8042d86:	220c      	movs	r2, #12
 8042d88:	5ea3      	ldrsh	r3, [r4, r2]
 8042d8a:	059a      	lsls	r2, r3, #22
 8042d8c:	d4ef      	bmi.n	8042d6e <__smakebuf_r+0x1a>
 8042d8e:	2203      	movs	r2, #3
 8042d90:	4393      	bics	r3, r2
 8042d92:	431e      	orrs	r6, r3
 8042d94:	81a6      	strh	r6, [r4, #12]
 8042d96:	e7e4      	b.n	8042d62 <__smakebuf_r+0xe>
 8042d98:	4b0f      	ldr	r3, [pc, #60]	; (8042dd8 <__smakebuf_r+0x84>)
 8042d9a:	62ab      	str	r3, [r5, #40]	; 0x28
 8042d9c:	2380      	movs	r3, #128	; 0x80
 8042d9e:	89a2      	ldrh	r2, [r4, #12]
 8042da0:	6020      	str	r0, [r4, #0]
 8042da2:	4313      	orrs	r3, r2
 8042da4:	81a3      	strh	r3, [r4, #12]
 8042da6:	9b00      	ldr	r3, [sp, #0]
 8042da8:	6120      	str	r0, [r4, #16]
 8042daa:	6163      	str	r3, [r4, #20]
 8042dac:	9b01      	ldr	r3, [sp, #4]
 8042dae:	2b00      	cmp	r3, #0
 8042db0:	d00d      	beq.n	8042dce <__smakebuf_r+0x7a>
 8042db2:	0028      	movs	r0, r5
 8042db4:	230e      	movs	r3, #14
 8042db6:	5ee1      	ldrsh	r1, [r4, r3]
 8042db8:	f000 f89c 	bl	8042ef4 <_isatty_r>
 8042dbc:	2800      	cmp	r0, #0
 8042dbe:	d006      	beq.n	8042dce <__smakebuf_r+0x7a>
 8042dc0:	2203      	movs	r2, #3
 8042dc2:	89a3      	ldrh	r3, [r4, #12]
 8042dc4:	4393      	bics	r3, r2
 8042dc6:	001a      	movs	r2, r3
 8042dc8:	2301      	movs	r3, #1
 8042dca:	4313      	orrs	r3, r2
 8042dcc:	81a3      	strh	r3, [r4, #12]
 8042dce:	89a0      	ldrh	r0, [r4, #12]
 8042dd0:	4307      	orrs	r7, r0
 8042dd2:	81a7      	strh	r7, [r4, #12]
 8042dd4:	e7cb      	b.n	8042d6e <__smakebuf_r+0x1a>
 8042dd6:	46c0      	nop			; (mov r8, r8)
 8042dd8:	08042059 	.word	0x08042059

08042ddc <memchr>:
 8042ddc:	b2c9      	uxtb	r1, r1
 8042dde:	1882      	adds	r2, r0, r2
 8042de0:	4290      	cmp	r0, r2
 8042de2:	d101      	bne.n	8042de8 <memchr+0xc>
 8042de4:	2000      	movs	r0, #0
 8042de6:	4770      	bx	lr
 8042de8:	7803      	ldrb	r3, [r0, #0]
 8042dea:	428b      	cmp	r3, r1
 8042dec:	d0fb      	beq.n	8042de6 <memchr+0xa>
 8042dee:	3001      	adds	r0, #1
 8042df0:	e7f6      	b.n	8042de0 <memchr+0x4>
	...

08042df4 <__malloc_lock>:
 8042df4:	b510      	push	{r4, lr}
 8042df6:	4802      	ldr	r0, [pc, #8]	; (8042e00 <__malloc_lock+0xc>)
 8042df8:	f7ff fa0d 	bl	8042216 <__retarget_lock_acquire_recursive>
 8042dfc:	bd10      	pop	{r4, pc}
 8042dfe:	46c0      	nop			; (mov r8, r8)
 8042e00:	20000128 	.word	0x20000128

08042e04 <__malloc_unlock>:
 8042e04:	b510      	push	{r4, lr}
 8042e06:	4802      	ldr	r0, [pc, #8]	; (8042e10 <__malloc_unlock+0xc>)
 8042e08:	f7ff fa06 	bl	8042218 <__retarget_lock_release_recursive>
 8042e0c:	bd10      	pop	{r4, pc}
 8042e0e:	46c0      	nop			; (mov r8, r8)
 8042e10:	20000128 	.word	0x20000128

08042e14 <_free_r>:
 8042e14:	b570      	push	{r4, r5, r6, lr}
 8042e16:	0005      	movs	r5, r0
 8042e18:	2900      	cmp	r1, #0
 8042e1a:	d010      	beq.n	8042e3e <_free_r+0x2a>
 8042e1c:	1f0c      	subs	r4, r1, #4
 8042e1e:	6823      	ldr	r3, [r4, #0]
 8042e20:	2b00      	cmp	r3, #0
 8042e22:	da00      	bge.n	8042e26 <_free_r+0x12>
 8042e24:	18e4      	adds	r4, r4, r3
 8042e26:	0028      	movs	r0, r5
 8042e28:	f7ff ffe4 	bl	8042df4 <__malloc_lock>
 8042e2c:	4a1d      	ldr	r2, [pc, #116]	; (8042ea4 <_free_r+0x90>)
 8042e2e:	6813      	ldr	r3, [r2, #0]
 8042e30:	2b00      	cmp	r3, #0
 8042e32:	d105      	bne.n	8042e40 <_free_r+0x2c>
 8042e34:	6063      	str	r3, [r4, #4]
 8042e36:	6014      	str	r4, [r2, #0]
 8042e38:	0028      	movs	r0, r5
 8042e3a:	f7ff ffe3 	bl	8042e04 <__malloc_unlock>
 8042e3e:	bd70      	pop	{r4, r5, r6, pc}
 8042e40:	42a3      	cmp	r3, r4
 8042e42:	d908      	bls.n	8042e56 <_free_r+0x42>
 8042e44:	6821      	ldr	r1, [r4, #0]
 8042e46:	1860      	adds	r0, r4, r1
 8042e48:	4283      	cmp	r3, r0
 8042e4a:	d1f3      	bne.n	8042e34 <_free_r+0x20>
 8042e4c:	6818      	ldr	r0, [r3, #0]
 8042e4e:	685b      	ldr	r3, [r3, #4]
 8042e50:	1841      	adds	r1, r0, r1
 8042e52:	6021      	str	r1, [r4, #0]
 8042e54:	e7ee      	b.n	8042e34 <_free_r+0x20>
 8042e56:	001a      	movs	r2, r3
 8042e58:	685b      	ldr	r3, [r3, #4]
 8042e5a:	2b00      	cmp	r3, #0
 8042e5c:	d001      	beq.n	8042e62 <_free_r+0x4e>
 8042e5e:	42a3      	cmp	r3, r4
 8042e60:	d9f9      	bls.n	8042e56 <_free_r+0x42>
 8042e62:	6811      	ldr	r1, [r2, #0]
 8042e64:	1850      	adds	r0, r2, r1
 8042e66:	42a0      	cmp	r0, r4
 8042e68:	d10b      	bne.n	8042e82 <_free_r+0x6e>
 8042e6a:	6820      	ldr	r0, [r4, #0]
 8042e6c:	1809      	adds	r1, r1, r0
 8042e6e:	1850      	adds	r0, r2, r1
 8042e70:	6011      	str	r1, [r2, #0]
 8042e72:	4283      	cmp	r3, r0
 8042e74:	d1e0      	bne.n	8042e38 <_free_r+0x24>
 8042e76:	6818      	ldr	r0, [r3, #0]
 8042e78:	685b      	ldr	r3, [r3, #4]
 8042e7a:	1841      	adds	r1, r0, r1
 8042e7c:	6011      	str	r1, [r2, #0]
 8042e7e:	6053      	str	r3, [r2, #4]
 8042e80:	e7da      	b.n	8042e38 <_free_r+0x24>
 8042e82:	42a0      	cmp	r0, r4
 8042e84:	d902      	bls.n	8042e8c <_free_r+0x78>
 8042e86:	230c      	movs	r3, #12
 8042e88:	602b      	str	r3, [r5, #0]
 8042e8a:	e7d5      	b.n	8042e38 <_free_r+0x24>
 8042e8c:	6821      	ldr	r1, [r4, #0]
 8042e8e:	1860      	adds	r0, r4, r1
 8042e90:	4283      	cmp	r3, r0
 8042e92:	d103      	bne.n	8042e9c <_free_r+0x88>
 8042e94:	6818      	ldr	r0, [r3, #0]
 8042e96:	685b      	ldr	r3, [r3, #4]
 8042e98:	1841      	adds	r1, r0, r1
 8042e9a:	6021      	str	r1, [r4, #0]
 8042e9c:	6063      	str	r3, [r4, #4]
 8042e9e:	6054      	str	r4, [r2, #4]
 8042ea0:	e7ca      	b.n	8042e38 <_free_r+0x24>
 8042ea2:	46c0      	nop			; (mov r8, r8)
 8042ea4:	20000094 	.word	0x20000094

08042ea8 <_read_r>:
 8042ea8:	b570      	push	{r4, r5, r6, lr}
 8042eaa:	0004      	movs	r4, r0
 8042eac:	0008      	movs	r0, r1
 8042eae:	0011      	movs	r1, r2
 8042eb0:	001a      	movs	r2, r3
 8042eb2:	2300      	movs	r3, #0
 8042eb4:	4d05      	ldr	r5, [pc, #20]	; (8042ecc <_read_r+0x24>)
 8042eb6:	602b      	str	r3, [r5, #0]
 8042eb8:	f7fd fb77 	bl	80405aa <_read>
 8042ebc:	1c43      	adds	r3, r0, #1
 8042ebe:	d103      	bne.n	8042ec8 <_read_r+0x20>
 8042ec0:	682b      	ldr	r3, [r5, #0]
 8042ec2:	2b00      	cmp	r3, #0
 8042ec4:	d000      	beq.n	8042ec8 <_read_r+0x20>
 8042ec6:	6023      	str	r3, [r4, #0]
 8042ec8:	bd70      	pop	{r4, r5, r6, pc}
 8042eca:	46c0      	nop			; (mov r8, r8)
 8042ecc:	20000130 	.word	0x20000130

08042ed0 <_fstat_r>:
 8042ed0:	2300      	movs	r3, #0
 8042ed2:	b570      	push	{r4, r5, r6, lr}
 8042ed4:	4d06      	ldr	r5, [pc, #24]	; (8042ef0 <_fstat_r+0x20>)
 8042ed6:	0004      	movs	r4, r0
 8042ed8:	0008      	movs	r0, r1
 8042eda:	0011      	movs	r1, r2
 8042edc:	602b      	str	r3, [r5, #0]
 8042ede:	f7fd fba7 	bl	8040630 <_fstat>
 8042ee2:	1c43      	adds	r3, r0, #1
 8042ee4:	d103      	bne.n	8042eee <_fstat_r+0x1e>
 8042ee6:	682b      	ldr	r3, [r5, #0]
 8042ee8:	2b00      	cmp	r3, #0
 8042eea:	d000      	beq.n	8042eee <_fstat_r+0x1e>
 8042eec:	6023      	str	r3, [r4, #0]
 8042eee:	bd70      	pop	{r4, r5, r6, pc}
 8042ef0:	20000130 	.word	0x20000130

08042ef4 <_isatty_r>:
 8042ef4:	2300      	movs	r3, #0
 8042ef6:	b570      	push	{r4, r5, r6, lr}
 8042ef8:	4d06      	ldr	r5, [pc, #24]	; (8042f14 <_isatty_r+0x20>)
 8042efa:	0004      	movs	r4, r0
 8042efc:	0008      	movs	r0, r1
 8042efe:	602b      	str	r3, [r5, #0]
 8042f00:	f7fd fba4 	bl	804064c <_isatty>
 8042f04:	1c43      	adds	r3, r0, #1
 8042f06:	d103      	bne.n	8042f10 <_isatty_r+0x1c>
 8042f08:	682b      	ldr	r3, [r5, #0]
 8042f0a:	2b00      	cmp	r3, #0
 8042f0c:	d000      	beq.n	8042f10 <_isatty_r+0x1c>
 8042f0e:	6023      	str	r3, [r4, #0]
 8042f10:	bd70      	pop	{r4, r5, r6, pc}
 8042f12:	46c0      	nop			; (mov r8, r8)
 8042f14:	20000130 	.word	0x20000130

08042f18 <_init>:
 8042f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f1a:	46c0      	nop			; (mov r8, r8)
 8042f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042f1e:	bc08      	pop	{r3}
 8042f20:	469e      	mov	lr, r3
 8042f22:	4770      	bx	lr

08042f24 <_fini>:
 8042f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f26:	46c0      	nop			; (mov r8, r8)
 8042f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042f2a:	bc08      	pop	{r3}
 8042f2c:	469e      	mov	lr, r3
 8042f2e:	4770      	bx	lr
