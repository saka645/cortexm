
11_AddingSignedNumbers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000114  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001d4  080001d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001d4  080001d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080001d4  080001d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080001d4  080001d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001d4  080001d4  000101d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080001dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080001e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080001e8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000cc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000048  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000026  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00020170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000000c3  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00020280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  000202a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080001bc 	.word	0x080001bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080001bc 	.word	0x080001bc

08000108 <__main>:
.section .text
.global __main

__main:
    // Load data address in r0
    ldr r0, =SIGN_DATA
 8000108:	4804      	ldr	r0, [pc, #16]	; (800011c <stop+0x4>)
    movs r3, #9        // Counter for 9 bytes
 800010a:	2309      	movs	r3, #9
    movs r2, #0        // Initialize sum to 0
 800010c:	2200      	movs	r2, #0

0800010e <loop>:
loop:
    // Load a signed byte from address r0
    ldr r1, [r0]
 800010e:	6801      	ldr	r1, [r0, #0]
    adds r2, r2, r1    // Add the signed byte to sum
 8000110:	1852      	adds	r2, r2, r1
    adds r0, r0, #1    // Increment address by 1
 8000112:	3001      	adds	r0, #1
    subs r3, r3, #1    // Decrement counter
 8000114:	3b01      	subs	r3, #1

    // Branch to top if counter is not zero
    bne loop
 8000116:	d1fa      	bne.n	800010e <loop>

08000118 <stop>:

stop:
    b stop             // Infinite loop to stop the program
 8000118:	e7fe      	b.n	8000118 <stop>
 800011a:	46c0      	nop			; (mov r8, r8)
    ldr r0, =SIGN_DATA
 800011c:	20000000 	.word	0x20000000

08000120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000120:	480d      	ldr	r0, [pc, #52]	; (8000158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000122:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000124:	e000      	b.n	8000128 <Reset_Handler+0x8>
 8000126:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000128:	480c      	ldr	r0, [pc, #48]	; (800015c <LoopForever+0x6>)
  ldr r1, =_edata
 800012a:	490d      	ldr	r1, [pc, #52]	; (8000160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800012c:	4a0d      	ldr	r2, [pc, #52]	; (8000164 <LoopForever+0xe>)
  movs r3, #0
 800012e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000130:	e002      	b.n	8000138 <LoopCopyDataInit>

08000132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000136:	3304      	adds	r3, #4

08000138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800013a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800013c:	d3f9      	bcc.n	8000132 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800013e:	4a0a      	ldr	r2, [pc, #40]	; (8000168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000140:	4c0a      	ldr	r4, [pc, #40]	; (800016c <LoopForever+0x16>)
  movs r3, #0
 8000142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000144:	e001      	b.n	800014a <LoopFillZerobss>

08000146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000148:	3204      	adds	r2, #4

0800014a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800014a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800014c:	d3fb      	bcc.n	8000146 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800014e:	f000 f811 	bl	8000174 <__libc_init_array>
/* Call the application's entry point.*/
  bl __main
 8000152:	f7ff ffd9 	bl	8000108 <__main>

08000156 <LoopForever>:

LoopForever:
    b LoopForever
 8000156:	e7fe      	b.n	8000156 <LoopForever>
  ldr   r0, =_estack
 8000158:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800015c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000164:	080001dc 	.word	0x080001dc
  ldr r2, =_sbss
 8000168:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800016c:	20000028 	.word	0x20000028

08000170 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000170:	e7fe      	b.n	8000170 <ADC_IRQHandler>
	...

08000174 <__libc_init_array>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	2600      	movs	r6, #0
 8000178:	4d0c      	ldr	r5, [pc, #48]	; (80001ac <__libc_init_array+0x38>)
 800017a:	4c0d      	ldr	r4, [pc, #52]	; (80001b0 <__libc_init_array+0x3c>)
 800017c:	1b64      	subs	r4, r4, r5
 800017e:	10a4      	asrs	r4, r4, #2
 8000180:	42a6      	cmp	r6, r4
 8000182:	d109      	bne.n	8000198 <__libc_init_array+0x24>
 8000184:	2600      	movs	r6, #0
 8000186:	f000 f819 	bl	80001bc <_init>
 800018a:	4d0a      	ldr	r5, [pc, #40]	; (80001b4 <__libc_init_array+0x40>)
 800018c:	4c0a      	ldr	r4, [pc, #40]	; (80001b8 <__libc_init_array+0x44>)
 800018e:	1b64      	subs	r4, r4, r5
 8000190:	10a4      	asrs	r4, r4, #2
 8000192:	42a6      	cmp	r6, r4
 8000194:	d105      	bne.n	80001a2 <__libc_init_array+0x2e>
 8000196:	bd70      	pop	{r4, r5, r6, pc}
 8000198:	00b3      	lsls	r3, r6, #2
 800019a:	58eb      	ldr	r3, [r5, r3]
 800019c:	4798      	blx	r3
 800019e:	3601      	adds	r6, #1
 80001a0:	e7ee      	b.n	8000180 <__libc_init_array+0xc>
 80001a2:	00b3      	lsls	r3, r6, #2
 80001a4:	58eb      	ldr	r3, [r5, r3]
 80001a6:	4798      	blx	r3
 80001a8:	3601      	adds	r6, #1
 80001aa:	e7f2      	b.n	8000192 <__libc_init_array+0x1e>
 80001ac:	080001d4 	.word	0x080001d4
 80001b0:	080001d4 	.word	0x080001d4
 80001b4:	080001d4 	.word	0x080001d4
 80001b8:	080001d8 	.word	0x080001d8

080001bc <_init>:
 80001bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001be:	46c0      	nop			; (mov r8, r8)
 80001c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001c2:	bc08      	pop	{r3}
 80001c4:	469e      	mov	lr, r3
 80001c6:	4770      	bx	lr

080001c8 <_fini>:
 80001c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001ce:	bc08      	pop	{r3}
 80001d0:	469e      	mov	lr, r3
 80001d2:	4770      	bx	lr
