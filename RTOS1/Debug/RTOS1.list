
RTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a8  20000070  08003f60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  08003f60  00021118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001479b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbd  00000000  00000000  00034833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00038460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cbb  00000000  00000000  000393b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122aa  00000000  00000000  0004c073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e4fe  00000000  00000000  0005e31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ec  00000000  00000000  000cc870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003dd0 	.word	0x08003dd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003dd0 	.word	0x08003dd0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000008c 	.word	0x2000008c
 800024c:	200000e0 	.word	0x200000e0

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b08e      	sub	sp, #56	; 0x38
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fb01 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f837 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f8af 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f87d 	bl	8000360 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */
  printf ("starting....\n");
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x68>)
 8000268:	0018      	movs	r0, r3
 800026a:	f003 f913 	bl	8003494 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800026e:	211c      	movs	r1, #28
 8000270:	187b      	adds	r3, r7, r1
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <main+0x6c>)
 8000274:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000276:	c331      	stmia	r3!, {r0, r4, r5}
 8000278:	ca31      	ldmia	r2!, {r0, r4, r5}
 800027a:	c331      	stmia	r3!, {r0, r4, r5}
 800027c:	6812      	ldr	r2, [r2, #0]
 800027e:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2100      	movs	r1, #0
 8000284:	0018      	movs	r0, r3
 8000286:	f001 ffda 	bl	800223e <osThreadCreate>
 800028a:	0002      	movs	r2, r0
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <main+0x70>)
 800028e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityIdle, 0, 128);
 8000290:	003b      	movs	r3, r7
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <main+0x74>)
 8000294:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000296:	c313      	stmia	r3!, {r0, r1, r4}
 8000298:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029a:	c313      	stmia	r3!, {r0, r1, r4}
 800029c:	6812      	ldr	r2, [r2, #0]
 800029e:	601a      	str	r2, [r3, #0]
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80002a0:	003b      	movs	r3, r7
 80002a2:	2100      	movs	r1, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 ffca 	bl	800223e <osThreadCreate>
 80002aa:	0002      	movs	r2, r0
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x78>)
 80002ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b0:	f001 ffbd 	bl	800222e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0x64>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	08003dfc 	.word	0x08003dfc
 80002bc:	08003e0c 	.word	0x08003e0c
 80002c0:	20001034 	.word	0x20001034
 80002c4:	08003e28 	.word	0x08003e28
 80002c8:	20001030 	.word	0x20001030

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b091      	sub	sp, #68	; 0x44
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2410      	movs	r4, #16
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2330      	movs	r3, #48	; 0x30
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f003 f85f 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	003b      	movs	r3, r7
 80002e4:	0018      	movs	r0, r3
 80002e6:	2310      	movs	r3, #16
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f003 f858 	bl	80033a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	0392      	lsls	r2, r2, #14
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fd21 	bl	8000d68 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800032a:	f000 f8df 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	003b      	movs	r3, r7
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	003b      	movs	r3, r7
 8000336:	2202      	movs	r2, #2
 8000338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000346:	003b      	movs	r3, r7
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f826 	bl	800139c <HAL_RCC_ClockConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000354:	f000 f8ca 	bl	80004ec <Error_Handler>
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b011      	add	sp, #68	; 0x44
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_USART2_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800036c:	2296      	movs	r2, #150	; 0x96
 800036e:	0212      	lsls	r2, r2, #8
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_USART2_UART_Init+0x58>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fbd5 	bl	8001b54 <HAL_UART_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ae:	f000 f89d 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20001038 	.word	0x20001038
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	240c      	movs	r4, #12
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	2314      	movs	r3, #20
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f002 ffe5 	bl	80033a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b26      	ldr	r3, [pc, #152]	; (8000470 <MX_GPIO_Init+0xb0>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_GPIO_Init+0xb0>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0289      	lsls	r1, r1, #10
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_GPIO_Init+0xb0>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	029b      	lsls	r3, r3, #10
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_GPIO_Init+0xb0>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0xb0>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0309      	lsls	r1, r1, #12
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0xb0>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	031b      	lsls	r3, r3, #12
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800040e:	23c0      	movs	r3, #192	; 0xc0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4818      	ldr	r0, [pc, #96]	; (8000474 <MX_GPIO_Init+0xb4>)
 8000414:	2200      	movs	r2, #0
 8000416:	0019      	movs	r1, r3
 8000418:	f000 fc6e 	bl	8000cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2290      	movs	r2, #144	; 0x90
 8000426:	0352      	lsls	r2, r2, #13
 8000428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	193b      	adds	r3, r7, r4
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000430:	193a      	adds	r2, r7, r4
 8000432:	2390      	movs	r3, #144	; 0x90
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f000 faed 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800043e:	0021      	movs	r1, r4
 8000440:	187b      	adds	r3, r7, r1
 8000442:	22c0      	movs	r2, #192	; 0xc0
 8000444:	0092      	lsls	r2, r2, #2
 8000446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2201      	movs	r2, #1
 800044c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	187b      	adds	r3, r7, r1
 800045c:	4a05      	ldr	r2, [pc, #20]	; (8000474 <MX_GPIO_Init+0xb4>)
 800045e:	0019      	movs	r1, r3
 8000460:	0010      	movs	r0, r2
 8000462:	f000 fad9 	bl	8000a18 <HAL_GPIO_Init>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b009      	add	sp, #36	; 0x24
 800046c:	bd90      	pop	{r4, r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000
 8000474:	48000800 	.word	0x48000800

08000478 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD3_Pin);
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <StartDefaultTask+0x24>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f000 fc52 	bl	8000d32 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800048e:	23fa      	movs	r3, #250	; 0xfa
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 ff20 	bl	80022d8 <osDelay>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD3_Pin);
 8000498:	e7f2      	b.n	8000480 <StartDefaultTask+0x8>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	48000800 	.word	0x48000800

080004a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <StartTask02+0x24>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	0010      	movs	r0, r2
 80004b2:	f000 fc3e 	bl	8000d32 <HAL_GPIO_TogglePin>
    osDelay(2000);
 80004b6:	23fa      	movs	r3, #250	; 0xfa
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 ff0c 	bl	80022d8 <osDelay>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004c0:	e7f2      	b.n	80004a8 <StartTask02+0x8>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	48000800 	.word	0x48000800

080004c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d101      	bne.n	80004de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004da:	f000 f9d3 	bl	8000884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40012c00 	.word	0x40012c00

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x50>)
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_MspInit+0x50>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	619a      	str	r2, [r3, #24]
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x50>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x50>)
 8000518:	69da      	ldr	r2, [r3, #28]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_MspInit+0x50>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0549      	lsls	r1, r1, #21
 8000520:	430a      	orrs	r2, r1
 8000522:	61da      	str	r2, [r3, #28]
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_MspInit+0x50>)
 8000526:	69da      	ldr	r2, [r3, #28]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	055b      	lsls	r3, r3, #21
 800052c:	4013      	ands	r3, r2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000532:	2302      	movs	r3, #2
 8000534:	425b      	negs	r3, r3
 8000536:	2200      	movs	r2, #0
 8000538:	2103      	movs	r1, #3
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fa46 	bl	80009cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b08b      	sub	sp, #44	; 0x2c
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	2414      	movs	r4, #20
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	2314      	movs	r3, #20
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f002 ff1e 	bl	80033a0 <memset>
  if(huart->Instance==USART2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <HAL_UART_MspInit+0x90>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d132      	bne.n	80005d4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <HAL_UART_MspInit+0x94>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_UART_MspInit+0x94>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0289      	lsls	r1, r1, #10
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_UART_MspInit+0x94>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	029b      	lsls	r3, r3, #10
 8000584:	4013      	ands	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_UART_MspInit+0x94>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_UART_MspInit+0x94>)
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0289      	lsls	r1, r1, #10
 8000594:	430a      	orrs	r2, r1
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_UART_MspInit+0x94>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	029b      	lsls	r3, r3, #10
 80005a0:	4013      	ands	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2202      	movs	r2, #2
 80005b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2203      	movs	r2, #3
 80005be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2201      	movs	r2, #1
 80005c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	187a      	adds	r2, r7, r1
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fa22 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b00b      	add	sp, #44	; 0x2c
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	0019      	movs	r1, r3
 80005fa:	200d      	movs	r0, #13
 80005fc:	f000 f9e6 	bl	80009cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000600:	200d      	movs	r0, #13
 8000602:	f000 f9f8 	bl	80009f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_InitTick+0xa8>)
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <HAL_InitTick+0xa8>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0109      	lsls	r1, r1, #4
 8000610:	430a      	orrs	r2, r1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <HAL_InitTick+0xa8>)
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000622:	230c      	movs	r3, #12
 8000624:	18fa      	adds	r2, r7, r3
 8000626:	2310      	movs	r3, #16
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f001 f807 	bl	8001640 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000632:	f000 ffef 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 8000636:	0003      	movs	r3, r0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	4914      	ldr	r1, [pc, #80]	; (8000690 <HAL_InitTick+0xac>)
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	3b01      	subs	r3, #1
 8000648:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0xb0>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <HAL_InitTick+0xb4>)
 800064e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_InitTick+0xb0>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <HAL_InitTick+0xb8>)
 8000654:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_InitTick+0xb0>)
 8000658:	6a3a      	ldr	r2, [r7, #32]
 800065a:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_InitTick+0xb0>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_InitTick+0xb0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_InitTick+0xb0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f812 	bl	8001694 <HAL_TIM_Base_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d105      	bne.n	8000680 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_InitTick+0xb0>)
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f864 	bl	8001744 <HAL_TIM_Base_Start_IT>
 800067c:	0003      	movs	r3, r0
 800067e:	e000      	b.n	8000682 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000680:	2301      	movs	r3, #1
}
 8000682:	0018      	movs	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	b00a      	add	sp, #40	; 0x28
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000
 8000690:	000f4240 	.word	0x000f4240
 8000694:	200010bc 	.word	0x200010bc
 8000698:	40012c00 	.word	0x40012c00
 800069c:	000003e7 	.word	0x000003e7

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f892 	bl	80017dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200010bc 	.word	0x200010bc

080006c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00a      	b.n	80006ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006d6:	e000      	b.n	80006da <_read+0x16>
 80006d8:	bf00      	nop
 80006da:	0001      	movs	r1, r0
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf0      	blt.n	80006d6 <_read+0x12>
	}

return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b006      	add	sp, #24
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e009      	b.n	8000724 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	60ba      	str	r2, [r7, #8]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	0018      	movs	r0, r3
 800071a:	e000      	b.n	800071e <_write+0x20>
 800071c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	dbf1      	blt.n	8000710 <_write+0x12>
	}
	return len;
 800072c:	687b      	ldr	r3, [r7, #4]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b006      	add	sp, #24
 8000734:	bd80      	pop	{r7, pc}

08000736 <_close>:

int _close(int file)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	return -1;
 800073e:	2301      	movs	r3, #1
 8000740:	425b      	negs	r3, r3
}
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}

0800074a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0192      	lsls	r2, r2, #6
 800075a:	605a      	str	r2, [r3, #4]
	return 0;
 800075c:	2300      	movs	r3, #0
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}

08000766 <_isatty>:

int _isatty(int file)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f002 fdc4 	bl	800334c <__errno>
 80007c4:	0003      	movs	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	18d2      	adds	r2, r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b006      	add	sp, #24
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20002000 	.word	0x20002000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	200002e0 	.word	0x200002e0
 80007f8:	20001118 	.word	0x20001118

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000832:	f7ff ffe3 	bl	80007fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000836:	f002 fd8f 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fd09 	bl	8000250 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800084c:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 8000850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000854:	20001118 	.word	0x20001118

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_Init+0x24>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_Init+0x24>)
 8000866:	2110      	movs	r1, #16
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff feb9 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000872:	f7ff fe41 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20001104 	.word	0x20001104

080008a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20001104 	.word	0x20001104

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b7f      	cmp	r3, #127	; 0x7f
 80008ce:	d809      	bhi.n	80008e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	231f      	movs	r3, #31
 80008d8:	401a      	ands	r2, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_EnableIRQ+0x30>)
 80008dc:	2101      	movs	r1, #1
 80008de:	4091      	lsls	r1, r2
 80008e0:	000a      	movs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
  }
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b7f      	cmp	r3, #127	; 0x7f
 8000904:	d828      	bhi.n	8000958 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	589b      	ldr	r3, [r3, r2]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25b      	sxtb	r3, r3
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	33c0      	adds	r3, #192	; 0xc0
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000956:	e031      	b.n	80009bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0019      	movs	r1, r3
 8000960:	230f      	movs	r3, #15
 8000962:	400b      	ands	r3, r1
 8000964:	3b08      	subs	r3, #8
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3306      	adds	r3, #6
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	3304      	adds	r3, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0011      	movs	r1, r2
 8000978:	2203      	movs	r2, #3
 800097a:	400a      	ands	r2, r1
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	401a      	ands	r2, r3
 8000988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	401a      	ands	r2, r3
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	2303      	movs	r3, #3
 800099a:	4003      	ands	r3, r0
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	001c      	movs	r4, r3
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	3b08      	subs	r3, #8
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	3306      	adds	r3, #6
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	18c3      	adds	r3, r0, r3
 80009b8:	3304      	adds	r3, #4
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	210f      	movs	r1, #15
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ff81 	bl	80008f0 <__NVIC_SetPriority>
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	0002      	movs	r2, r0
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff57 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e14f      	b.n	8000cc8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <HAL_GPIO_Init+0x28>
 8000a3e:	e140      	b.n	8000cc2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2203      	movs	r2, #3
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d005      	beq.n	8000a58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d130      	bne.n	8000aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2203      	movs	r2, #3
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d017      	beq.n	8000af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2203      	movs	r2, #3
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d123      	bne.n	8000b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	08da      	lsrs	r2, r3, #3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	58d3      	ldr	r3, [r2, r3]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2207      	movs	r2, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2107      	movs	r1, #7
 8000b2e:	400b      	ands	r3, r1
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	08da      	lsrs	r2, r3, #3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3208      	adds	r2, #8
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	6939      	ldr	r1, [r7, #16]
 8000b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2203      	movs	r2, #3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	23c0      	movs	r3, #192	; 0xc0
 8000b84:	029b      	lsls	r3, r3, #10
 8000b86:	4013      	ands	r3, r2
 8000b88:	d100      	bne.n	8000b8c <HAL_GPIO_Init+0x174>
 8000b8a:	e09a      	b.n	8000cc2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	589b      	ldr	r3, [r3, r2]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	2390      	movs	r3, #144	; 0x90
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x1e2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x1de>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a43      	ldr	r2, [pc, #268]	; (8000cec <HAL_GPIO_Init+0x2d4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x1da>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <HAL_GPIO_Init+0x2d8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x1d6>
 8000bea:	2303      	movs	r3, #3
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	2103      	movs	r1, #3
 8000c00:	400a      	ands	r2, r1
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	4013      	ands	r3, r2
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	4013      	ands	r3, r2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	039b      	lsls	r3, r3, #14
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	40da      	lsrs	r2, r3
 8000cd0:	1e13      	subs	r3, r2, #0
 8000cd2:	d000      	beq.n	8000cd6 <HAL_GPIO_Init+0x2be>
 8000cd4:	e6a8      	b.n	8000a28 <HAL_GPIO_Init+0x10>
  } 
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	0008      	movs	r0, r1
 8000d02:	0011      	movs	r1, r2
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	1c7b      	adds	r3, r7, #1
 8000d0c:	1c0a      	adds	r2, r1, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d10:	1c7b      	adds	r3, r7, #1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	881a      	ldrh	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e003      	b.n	8000d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d46:	1cbb      	adds	r3, r7, #2
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	041a      	lsls	r2, r3, #16
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	1cb9      	adds	r1, r7, #2
 8000d56:	8809      	ldrh	r1, [r1, #0]
 8000d58:	400b      	ands	r3, r1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e301      	b.n	800137e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	d100      	bne.n	8000d86 <HAL_RCC_OscConfig+0x1e>
 8000d84:	e08d      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d86:	4bc3      	ldr	r3, [pc, #780]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d00e      	beq.n	8000db0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d92:	4bc0      	ldr	r3, [pc, #768]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	220c      	movs	r2, #12
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x64>
 8000d9e:	4bbd      	ldr	r3, [pc, #756]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	401a      	ands	r2, r3
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	025b      	lsls	r3, r3, #9
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10d      	bne.n	8000dcc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	4bb8      	ldr	r3, [pc, #736]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	d100      	bne.n	8000dbe <HAL_RCC_OscConfig+0x56>
 8000dbc:	e070      	b.n	8000ea0 <HAL_RCC_OscConfig+0x138>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d000      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x60>
 8000dc6:	e06b      	b.n	8000ea0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e2d8      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d107      	bne.n	8000de4 <HAL_RCC_OscConfig+0x7c>
 8000dd4:	4baf      	ldr	r3, [pc, #700]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4bae      	ldr	r3, [pc, #696]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0249      	lsls	r1, r1, #9
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e02f      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10c      	bne.n	8000e06 <HAL_RCC_OscConfig+0x9e>
 8000dec:	4ba9      	ldr	r3, [pc, #676]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000df2:	49a9      	ldr	r1, [pc, #676]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4ba5      	ldr	r3, [pc, #660]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	49a7      	ldr	r1, [pc, #668]	; (800109c <HAL_RCC_OscConfig+0x334>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e01e      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d10e      	bne.n	8000e2c <HAL_RCC_OscConfig+0xc4>
 8000e0e:	4ba1      	ldr	r3, [pc, #644]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	02c9      	lsls	r1, r1, #11
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4b9d      	ldr	r3, [pc, #628]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b9c      	ldr	r3, [pc, #624]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0xdc>
 8000e2c:	4b99      	ldr	r3, [pc, #612]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b98      	ldr	r3, [pc, #608]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	4999      	ldr	r1, [pc, #612]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	4b96      	ldr	r3, [pc, #600]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b95      	ldr	r3, [pc, #596]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	4997      	ldr	r1, [pc, #604]	; (800109c <HAL_RCC_OscConfig+0x334>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d014      	beq.n	8000e76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fd2c 	bl	80008a8 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e56:	f7ff fd27 	bl	80008a8 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	; 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e28a      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e68:	4b8a      	ldr	r3, [pc, #552]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	4013      	ands	r3, r2
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0xee>
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fd17 	bl	80008a8 <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fd12 	bl	80008a8 <HAL_GetTick>
 8000e84:	0002      	movs	r2, r0
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e275      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	4b80      	ldr	r3, [pc, #512]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x118>
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x146>
 8000eac:	e069      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eae:	4b79      	ldr	r3, [pc, #484]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb8:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d11c      	bne.n	8000efe <HAL_RCC_OscConfig+0x196>
 8000ec4:	4b73      	ldr	r3, [pc, #460]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d116      	bne.n	8000efe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	4b70      	ldr	r3, [pc, #448]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d005      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x17e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e24b      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	22f8      	movs	r2, #248	; 0xf8
 8000eec:	4393      	bics	r3, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	00da      	lsls	r2, r3, #3
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efc:	e041      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d024      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f06:	4b63      	ldr	r3, [pc, #396]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fcc9 	bl	80008a8 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fcc4 	bl	80008a8 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e227      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d0f1      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	4b56      	ldr	r3, [pc, #344]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	22f8      	movs	r2, #248	; 0xf8
 8000f3e:	4393      	bics	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	00da      	lsls	r2, r3, #3
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e018      	b.n	8000f82 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f50:	4b50      	ldr	r3, [pc, #320]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fca4 	bl	80008a8 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f66:	f7ff fc9f 	bl	80008a8 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e202      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d1f1      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2208      	movs	r2, #8
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d036      	beq.n	8000ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d019      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc82 	bl	80008a8 <HAL_GetTick>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff fc7d 	bl	80008a8 <HAL_GetTick>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e1e0      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0f1      	beq.n	8000faa <HAL_RCC_OscConfig+0x242>
 8000fc6:	e018      	b.n	8000ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fc68 	bl	80008a8 <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc63 	bl	80008a8 <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1c6      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d1f1      	bne.n	8000fde <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2204      	movs	r2, #4
 8001000:	4013      	ands	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x29e>
 8001004:	e0b4      	b.n	8001170 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001006:	201f      	movs	r0, #31
 8001008:	183b      	adds	r3, r7, r0
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	055b      	lsls	r3, r3, #21
 8001016:	4013      	ands	r3, r2
 8001018:	d110      	bne.n	800103c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800101c:	69da      	ldr	r2, [r3, #28]
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0549      	lsls	r1, r1, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001036:	183b      	adds	r3, r7, r0
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4013      	ands	r3, r2
 8001046:	d11a      	bne.n	800107e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0049      	lsls	r1, r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001056:	f7ff fc27 	bl	80008a8 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001060:	f7ff fc22 	bl	80008a8 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e185      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4013      	ands	r3, r2
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0x33c>
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_RCC_OscConfig+0x32c>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	e035      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 8001094:	40021000 	.word	0x40021000
 8001098:	fffeffff 	.word	0xfffeffff
 800109c:	fffbffff 	.word	0xfffbffff
 80010a0:	40007000 	.word	0x40007000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x35e>
 80010ac:	4bb6      	ldr	r3, [pc, #728]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	4bb5      	ldr	r3, [pc, #724]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	438a      	bics	r2, r1
 80010b6:	621a      	str	r2, [r3, #32]
 80010b8:	4bb3      	ldr	r3, [pc, #716]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	4bb2      	ldr	r3, [pc, #712]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010be:	2104      	movs	r1, #4
 80010c0:	438a      	bics	r2, r1
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x380>
 80010ce:	4bae      	ldr	r3, [pc, #696]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	4bad      	ldr	r3, [pc, #692]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010d4:	2104      	movs	r1, #4
 80010d6:	430a      	orrs	r2, r1
 80010d8:	621a      	str	r2, [r3, #32]
 80010da:	4bab      	ldr	r3, [pc, #684]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010dc:	6a1a      	ldr	r2, [r3, #32]
 80010de:	4baa      	ldr	r3, [pc, #680]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	621a      	str	r2, [r3, #32]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0x398>
 80010e8:	4ba7      	ldr	r3, [pc, #668]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4ba6      	ldr	r3, [pc, #664]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	4ba4      	ldr	r3, [pc, #656]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4ba3      	ldr	r3, [pc, #652]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	438a      	bics	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d014      	beq.n	8001132 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fbce 	bl	80008a8 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e009      	b.n	8001126 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fbc9 	bl	80008a8 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a9b      	ldr	r2, [pc, #620]	; (800138c <HAL_RCC_OscConfig+0x624>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e12b      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001126:	4b98      	ldr	r3, [pc, #608]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x3aa>
 8001130:	e013      	b.n	800115a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fbb9 	bl	80008a8 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113a:	e009      	b.n	8001150 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113c:	f7ff fbb4 	bl	80008a8 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a91      	ldr	r2, [pc, #580]	; (800138c <HAL_RCC_OscConfig+0x624>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e116      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	4b8d      	ldr	r3, [pc, #564]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	2202      	movs	r2, #2
 8001156:	4013      	ands	r3, r2
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800115a:	231f      	movs	r3, #31
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	4b87      	ldr	r3, [pc, #540]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800116a:	4989      	ldr	r1, [pc, #548]	; (8001390 <HAL_RCC_OscConfig+0x628>)
 800116c:	400a      	ands	r2, r1
 800116e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2210      	movs	r2, #16
 8001176:	4013      	ands	r3, r2
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d12a      	bne.n	80011d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001182:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001188:	2104      	movs	r1, #4
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800118e:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	4b7d      	ldr	r3, [pc, #500]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fb85 	bl	80008a8 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011a4:	f7ff fb80 	bl	80008a8 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0e3      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b6:	4b74      	ldr	r3, [pc, #464]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d0f1      	beq.n	80011a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c0:	4b71      	ldr	r3, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c4:	22f8      	movs	r2, #248	; 0xf8
 80011c6:	4393      	bics	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	00da      	lsls	r2, r3, #3
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	e034      	b.n	8001242 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	3305      	adds	r3, #5
 80011de:	d111      	bne.n	8001204 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011e0:	4b69      	ldr	r3, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	438a      	bics	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011ec:	4b66      	ldr	r3, [pc, #408]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	22f8      	movs	r2, #248	; 0xf8
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	00da      	lsls	r2, r3, #3
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	e01e      	b.n	8001242 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001204:	4b60      	ldr	r3, [pc, #384]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800120a:	2104      	movs	r1, #4
 800120c:	430a      	orrs	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001210:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121c:	f7ff fb44 	bl	80008a8 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001226:	f7ff fb3f 	bl	80008a8 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0a2      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	2202      	movs	r2, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d1f1      	bne.n	8001226 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <HAL_RCC_OscConfig+0x4e4>
 800124a:	e097      	b.n	800137c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	220c      	movs	r2, #12
 8001252:	4013      	ands	r3, r2
 8001254:	2b08      	cmp	r3, #8
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x4f2>
 8001258:	e06b      	b.n	8001332 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d14c      	bne.n	80012fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001268:	494a      	ldr	r1, [pc, #296]	; (8001394 <HAL_RCC_OscConfig+0x62c>)
 800126a:	400a      	ands	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb1b 	bl	80008a8 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001278:	f7ff fb16 	bl	80008a8 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e079      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	049b      	lsls	r3, r3, #18
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	220f      	movs	r2, #15
 800129c:	4393      	bics	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_RCC_OscConfig+0x630>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	431a      	orrs	r2, r3
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0449      	lsls	r1, r1, #17
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fae9 	bl	80008a8 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fae4 	bl	80008a8 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e047      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	049b      	lsls	r3, r3, #18
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x574>
 80012fa:	e03f      	b.n	800137c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001302:	4924      	ldr	r1, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x62c>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff face 	bl	80008a8 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fac9 	bl	80008a8 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e02c      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	049b      	lsls	r3, r3, #18
 800132c:	4013      	ands	r3, r2
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x5aa>
 8001330:	e024      	b.n	800137c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e01f      	b.n	800137e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_OscConfig+0x620>)
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	429a      	cmp	r2, r3
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	220f      	movs	r2, #15
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	429a      	cmp	r2, r3
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	23f0      	movs	r3, #240	; 0xf0
 800136c:	039b      	lsls	r3, r3, #14
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b008      	add	sp, #32
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	00001388 	.word	0x00001388
 8001390:	efffffff 	.word	0xefffffff
 8001394:	feffffff 	.word	0xfeffffff
 8001398:	ffc2ffff 	.word	0xffc2ffff

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b3      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d911      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b58      	ldr	r3, [pc, #352]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b55      	ldr	r3, [pc, #340]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e09a      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2204      	movs	r2, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	d006      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f6:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80013fc:	21e0      	movs	r1, #224	; 0xe0
 80013fe:	00c9      	lsls	r1, r1, #3
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	22f0      	movs	r2, #240	; 0xf0
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	d040      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	4013      	ands	r3, r2
 8001434:	d114      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06e      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	049b      	lsls	r3, r3, #18
 800144a:	4013      	ands	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e062      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e05b      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4393      	bics	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fa18 	bl	80008a8 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147c:	e009      	b.n	8001492 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff fa13 	bl	80008a8 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_RCC_ClockConfig+0x18c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e042      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	220c      	movs	r2, #12
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1ec      	bne.n	800147e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4013      	ands	r3, r2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d211      	bcs.n	80014d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4393      	bics	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_RCC_ClockConfig+0x184>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e020      	b.n	8001518 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	d009      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_RCC_ClockConfig+0x190>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014f4:	f000 f820 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014f8:	0001      	movs	r1, r0
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x188>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	220f      	movs	r2, #15
 8001502:	4013      	ands	r3, r2
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x194>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	000a      	movs	r2, r1
 800150a:	40da      	lsrs	r2, r3
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x198>)
 800150e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f867 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40022000 	.word	0x40022000
 8001524:	40021000 	.word	0x40021000
 8001528:	00001388 	.word	0x00001388
 800152c:	fffff8ff 	.word	0xfffff8ff
 8001530:	08003e6c 	.word	0x08003e6c
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b08f      	sub	sp, #60	; 0x3c
 800153c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800153e:	2314      	movs	r3, #20
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001544:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001546:	c313      	stmia	r3!, {r0, r1, r4}
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001552:	c313      	stmia	r3!, {r0, r1, r4}
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	220c      	movs	r2, #12
 8001576:	4013      	ands	r3, r2
 8001578:	2b04      	cmp	r3, #4
 800157a:	d002      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x4a>
 800157c:	2b08      	cmp	r3, #8
 800157e:	d003      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x50>
 8001580:	e02d      	b.n	80015de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001586:	e02d      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	0c9b      	lsrs	r3, r3, #18
 800158c:	220f      	movs	r2, #15
 800158e:	4013      	ands	r3, r2
 8001590:	2214      	movs	r2, #20
 8001592:	18ba      	adds	r2, r7, r2
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	220f      	movs	r2, #15
 800159e:	4013      	ands	r3, r2
 80015a0:	1d3a      	adds	r2, r7, #4
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	4013      	ands	r3, r2
 80015ae:	d009      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80015b4:	f7fe fda8 	bl	8000108 <__udivsi3>
 80015b8:	0003      	movs	r3, r0
 80015ba:	001a      	movs	r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	4353      	muls	r3, r2
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c6:	000a      	movs	r2, r1
 80015c8:	0152      	lsls	r2, r2, #5
 80015ca:	1a52      	subs	r2, r2, r1
 80015cc:	0193      	lsls	r3, r2, #6
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	185b      	adds	r3, r3, r1
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80015d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015dc:	e002      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b00f      	add	sp, #60	; 0x3c
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	08003e44 	.word	0x08003e44
 80015f4:	08003e54 	.word	0x08003e54
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200

08001600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_RCC_GetHCLKFreq+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001618:	f7ff fff2 	bl	8001600 <HAL_RCC_GetHCLKFreq>
 800161c:	0001      	movs	r1, r0
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	2207      	movs	r2, #7
 8001626:	4013      	ands	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_RCC_GetPCLK1Freq+0x28>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	40d9      	lsrs	r1, r3
 800162e:	000b      	movs	r3, r1
}    
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	08003e7c 	.word	0x08003e7c

08001640 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_GetClockConfig+0x4c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_GetClockConfig+0x4c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	22f0      	movs	r2, #240	; 0xf0
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_RCC_GetClockConfig+0x4c>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23e0      	movs	r3, #224	; 0xe0
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	401a      	ands	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_GetClockConfig+0x50>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2201      	movs	r2, #1
 800167c:	401a      	ands	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40021000 	.word	0x40021000
 8001690:	40022000 	.word	0x40022000

08001694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e042      	b.n	800172c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	223d      	movs	r2, #61	; 0x3d
 80016aa:	5c9b      	ldrb	r3, [r3, r2]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	223c      	movs	r2, #60	; 0x3c
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f839 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	223d      	movs	r2, #61	; 0x3d
 80016c6:	2102      	movs	r1, #2
 80016c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	0019      	movs	r1, r3
 80016d4:	0010      	movs	r0, r2
 80016d6:	f000 f9b7 	bl	8001a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2246      	movs	r2, #70	; 0x46
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	223e      	movs	r2, #62	; 0x3e
 80016e6:	2101      	movs	r1, #1
 80016e8:	5499      	strb	r1, [r3, r2]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2241      	movs	r2, #65	; 0x41
 80016fe:	2101      	movs	r1, #1
 8001700:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2242      	movs	r2, #66	; 0x42
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2243      	movs	r2, #67	; 0x43
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2244      	movs	r2, #68	; 0x44
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2245      	movs	r2, #69	; 0x45
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	223d      	movs	r2, #61	; 0x3d
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	223d      	movs	r2, #61	; 0x3d
 8001750:	5c9b      	ldrb	r3, [r3, r2]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e035      	b.n	80017c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	223d      	movs	r2, #61	; 0x3d
 8001760:	2102      	movs	r1, #2
 8001762:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_TIM_Base_Start_IT+0x8c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_TIM_Base_Start_IT+0x4e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_TIM_Base_Start_IT+0x90>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_TIM_Base_Start_IT+0x4e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_TIM_Base_Start_IT+0x94>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d111      	bne.n	80017b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2207      	movs	r2, #7
 800179a:	4013      	ands	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d010      	beq.n	80017c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b4:	e007      	b.n	80017c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d124      	bne.n	800183c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d11d      	bne.n	800183c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2203      	movs	r2, #3
 8001806:	4252      	negs	r2, r2
 8001808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2203      	movs	r2, #3
 8001818:	4013      	ands	r3, r2
 800181a:	d004      	beq.n	8001826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f8fa 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 8001824:	e007      	b.n	8001836 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 f8ed 	bl	8001a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f8f9 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2204      	movs	r2, #4
 8001844:	4013      	ands	r3, r2
 8001846:	2b04      	cmp	r3, #4
 8001848:	d125      	bne.n	8001896 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2204      	movs	r2, #4
 8001852:	4013      	ands	r3, r2
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11e      	bne.n	8001896 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2205      	movs	r2, #5
 800185e:	4252      	negs	r2, r2
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d004      	beq.n	8001880 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f8cd 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 800187e:	e007      	b.n	8001890 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f8c0 	bl	8001a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f8cc 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2208      	movs	r2, #8
 800189e:	4013      	ands	r3, r2
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d124      	bne.n	80018ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2208      	movs	r2, #8
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11d      	bne.n	80018ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2209      	movs	r2, #9
 80018b8:	4252      	negs	r2, r2
 80018ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 f8a1 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 80018d6:	e007      	b.n	80018e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f894 	bl	8001a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f8a0 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2210      	movs	r2, #16
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d125      	bne.n	8001948 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2210      	movs	r2, #16
 8001904:	4013      	ands	r3, r2
 8001906:	2b10      	cmp	r3, #16
 8001908:	d11e      	bne.n	8001948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2211      	movs	r2, #17
 8001910:	4252      	negs	r2, r2
 8001912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2208      	movs	r2, #8
 8001918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f874 	bl	8001a18 <HAL_TIM_IC_CaptureCallback>
 8001930:	e007      	b.n	8001942 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f000 f867 	bl	8001a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f000 f873 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10f      	bne.n	8001976 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4252      	negs	r2, r2
 800196c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fda9 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	4013      	ands	r3, r2
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d10f      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	4013      	ands	r3, r2
 800198e:	2b80      	cmp	r3, #128	; 0x80
 8001990:	d108      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2281      	movs	r2, #129	; 0x81
 8001998:	4252      	negs	r2, r2
 800199a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 f8d0 	bl	8001b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d10f      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b40      	cmp	r3, #64	; 0x40
 80019be:	d108      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2241      	movs	r2, #65	; 0x41
 80019c6:	4252      	negs	r2, r2
 80019c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f833 	bl	8001a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2220      	movs	r2, #32
 80019da:	4013      	ands	r3, r2
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d10f      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d108      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2221      	movs	r2, #33	; 0x21
 80019f4:	4252      	negs	r2, r2
 80019f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f89a 	bl	8001b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <TIM_Base_SetConfig+0xd0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d003      	beq.n	8001a68 <TIM_Base_SetConfig+0x20>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <TIM_Base_SetConfig+0xd4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d108      	bne.n	8001a7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2270      	movs	r2, #112	; 0x70
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <TIM_Base_SetConfig+0xd0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <TIM_Base_SetConfig+0x62>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <TIM_Base_SetConfig+0xd4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00f      	beq.n	8001aaa <TIM_Base_SetConfig+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <TIM_Base_SetConfig+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00b      	beq.n	8001aaa <TIM_Base_SetConfig+0x62>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <TIM_Base_SetConfig+0xdc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <TIM_Base_SetConfig+0x62>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <TIM_Base_SetConfig+0xe0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <TIM_Base_SetConfig+0x62>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <TIM_Base_SetConfig+0xe4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d108      	bne.n	8001abc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <TIM_Base_SetConfig+0xe8>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <TIM_Base_SetConfig+0xd0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00b      	beq.n	8001b02 <TIM_Base_SetConfig+0xba>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <TIM_Base_SetConfig+0xdc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <TIM_Base_SetConfig+0xba>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <TIM_Base_SetConfig+0xe0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d003      	beq.n	8001b02 <TIM_Base_SetConfig+0xba>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <TIM_Base_SetConfig+0xe4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d103      	bne.n	8001b0a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40002000 	.word	0x40002000
 8001b24:	40014000 	.word	0x40014000
 8001b28:	40014400 	.word	0x40014400
 8001b2c:	40014800 	.word	0x40014800
 8001b30:	fffffcff 	.word	0xfffffcff

08001b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e044      	b.n	8001bf0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2274      	movs	r2, #116	; 0x74
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe fce7 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2224      	movs	r2, #36	; 0x24
 8001b82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f830 	bl	8001bfc <UART_SetConfig>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e024      	b.n	8001bf0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f963 	bl	8001e7c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <HAL_UART_Init+0xa4>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f9fb 	bl	8001fe4 <UART_CheckIdleState>
 8001bee:	0003      	movs	r3, r0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	fffff7ff 	.word	0xfffff7ff

08001bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c04:	231e      	movs	r3, #30
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a8d      	ldr	r2, [pc, #564]	; (8001e60 <UART_SetConfig+0x264>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a88      	ldr	r2, [pc, #544]	; (8001e64 <UART_SetConfig+0x268>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <UART_SetConfig+0x26c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7b      	ldr	r2, [pc, #492]	; (8001e6c <UART_SetConfig+0x270>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d127      	bne.n	8001cd2 <UART_SetConfig+0xd6>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <UART_SetConfig+0x274>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	2203      	movs	r2, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d00d      	beq.n	8001caa <UART_SetConfig+0xae>
 8001c8e:	d81b      	bhi.n	8001cc8 <UART_SetConfig+0xcc>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d014      	beq.n	8001cbe <UART_SetConfig+0xc2>
 8001c94:	d818      	bhi.n	8001cc8 <UART_SetConfig+0xcc>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <UART_SetConfig+0xa4>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d00a      	beq.n	8001cb4 <UART_SetConfig+0xb8>
 8001c9e:	e013      	b.n	8001cc8 <UART_SetConfig+0xcc>
 8001ca0:	231f      	movs	r3, #31
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e021      	b.n	8001cee <UART_SetConfig+0xf2>
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e01c      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2204      	movs	r2, #4
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e017      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e012      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2210      	movs	r2, #16
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e00d      	b.n	8001cee <UART_SetConfig+0xf2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <UART_SetConfig+0x278>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d104      	bne.n	8001ce6 <UART_SetConfig+0xea>
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e003      	b.n	8001cee <UART_SetConfig+0xf2>
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2210      	movs	r2, #16
 8001cec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d15d      	bne.n	8001db6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d015      	beq.n	8001d30 <UART_SetConfig+0x134>
 8001d04:	dc18      	bgt.n	8001d38 <UART_SetConfig+0x13c>
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d00d      	beq.n	8001d26 <UART_SetConfig+0x12a>
 8001d0a:	dc15      	bgt.n	8001d38 <UART_SetConfig+0x13c>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <UART_SetConfig+0x11a>
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d005      	beq.n	8001d20 <UART_SetConfig+0x124>
 8001d14:	e010      	b.n	8001d38 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d16:	f7ff fc7d 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
        break;
 8001d1e:	e012      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <UART_SetConfig+0x27c>)
 8001d22:	61bb      	str	r3, [r7, #24]
        break;
 8001d24:	e00f      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d26:	f7ff fc07 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
        break;
 8001d2e:	e00a      	b.n	8001d46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	61bb      	str	r3, [r7, #24]
        break;
 8001d36:	e006      	b.n	8001d46 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d3c:	231e      	movs	r3, #30
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
        break;
 8001d44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d100      	bne.n	8001d4e <UART_SetConfig+0x152>
 8001d4c:	e07b      	b.n	8001e46 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	005a      	lsls	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	18d2      	adds	r2, r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f7fe f9d1 	bl	8000108 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	d91c      	bls.n	8001dac <UART_SetConfig+0x1b0>
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d217      	bcs.n	8001dac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	200e      	movs	r0, #14
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	210f      	movs	r1, #15
 8001d86:	438a      	bics	r2, r1
 8001d88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	b299      	uxth	r1, r3
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	183a      	adds	r2, r7, r0
 8001da6:	8812      	ldrh	r2, [r2, #0]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e04c      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001dac:	231e      	movs	r3, #30
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e047      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d015      	beq.n	8001dec <UART_SetConfig+0x1f0>
 8001dc0:	dc18      	bgt.n	8001df4 <UART_SetConfig+0x1f8>
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00d      	beq.n	8001de2 <UART_SetConfig+0x1e6>
 8001dc6:	dc15      	bgt.n	8001df4 <UART_SetConfig+0x1f8>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <UART_SetConfig+0x1d6>
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d005      	beq.n	8001ddc <UART_SetConfig+0x1e0>
 8001dd0:	e010      	b.n	8001df4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001dd2:	f7ff fc1f 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
        break;
 8001dda:	e012      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <UART_SetConfig+0x27c>)
 8001dde:	61bb      	str	r3, [r7, #24]
        break;
 8001de0:	e00f      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001de2:	f7ff fba9 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
        break;
 8001dea:	e00a      	b.n	8001e02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	61bb      	str	r3, [r7, #24]
        break;
 8001df2:	e006      	b.n	8001e02 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001df8:	231e      	movs	r3, #30
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
        break;
 8001e00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	085a      	lsrs	r2, r3, #1
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	18d2      	adds	r2, r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0019      	movs	r1, r3
 8001e18:	0010      	movs	r0, r2
 8001e1a:	f7fe f975 	bl	8000108 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	d909      	bls.n	8001e3e <UART_SetConfig+0x242>
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d204      	bcs.n	8001e3e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	e003      	b.n	8001e46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e3e:	231e      	movs	r3, #30
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001e52:	231e      	movs	r3, #30
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b008      	add	sp, #32
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffff69f3 	.word	0xffff69f3
 8001e64:	ffffcfff 	.word	0xffffcfff
 8001e68:	fffff4ff 	.word	0xfffff4ff
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40004400 	.word	0x40004400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <UART_AdvFeatureConfig+0x144>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <UART_AdvFeatureConfig+0x148>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <UART_AdvFeatureConfig+0x14c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2208      	movs	r2, #8
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d00b      	beq.n	8001f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <UART_AdvFeatureConfig+0x150>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d00b      	beq.n	8001f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <UART_AdvFeatureConfig+0x154>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <UART_AdvFeatureConfig+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	4013      	ands	r3, r2
 8001f58:	d01d      	beq.n	8001f96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <UART_AdvFeatureConfig+0x15c>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	035b      	lsls	r3, r3, #13
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10b      	bne.n	8001f96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <UART_AdvFeatureConfig+0x160>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d00b      	beq.n	8001fb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <UART_AdvFeatureConfig+0x164>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	fffdffff 	.word	0xfffdffff
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	fffbffff 	.word	0xfffbffff
 8001fcc:	ffff7fff 	.word	0xffff7fff
 8001fd0:	ffffefff 	.word	0xffffefff
 8001fd4:	ffffdfff 	.word	0xffffdfff
 8001fd8:	ffefffff 	.word	0xffefffff
 8001fdc:	ff9fffff 	.word	0xff9fffff
 8001fe0:	fff7ffff 	.word	0xfff7ffff

08001fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ff4:	f7fe fc58 	bl	80008a8 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	4013      	ands	r3, r2
 8002006:	2b08      	cmp	r3, #8
 8002008:	d10c      	bne.n	8002024 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	0391      	lsls	r1, r2, #14
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <UART_CheckIdleState+0x8c>)
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	f000 f82c 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e021      	b.n	8002068 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2204      	movs	r2, #4
 800202c:	4013      	ands	r3, r2
 800202e:	2b04      	cmp	r3, #4
 8002030:	d10c      	bne.n	800204c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	03d1      	lsls	r1, r2, #15
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <UART_CheckIdleState+0x8c>)
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	f000 f818 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e00d      	b.n	8002068 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2274      	movs	r2, #116	; 0x74
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	01ffffff 	.word	0x01ffffff

08002074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	; 0x50
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	1dfb      	adds	r3, r7, #7
 8002082:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002084:	e0a3      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002088:	3301      	adds	r3, #1
 800208a:	d100      	bne.n	800208e <UART_WaitOnFlagUntilTimeout+0x1a>
 800208c:	e09f      	b.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7fe fc0b 	bl	80008a8 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800209e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13d      	bne.n	8002120 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a4:	f3ef 8310 	mrs	r3, PRIMASK
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
 80020ae:	2301      	movs	r3, #1
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	f383 8810 	msr	PRIMASK, r3
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	494c      	ldr	r1, [pc, #304]	; (80021f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	f383 8810 	msr	PRIMASK, r3
}
 80020d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d6:	f3ef 8310 	mrs	r3, PRIMASK
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
 80020e0:	2301      	movs	r3, #1
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	f383 8810 	msr	PRIMASK, r3
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	f383 8810 	msr	PRIMASK, r3
}
 8002106:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2274      	movs	r2, #116	; 0x74
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e067      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d050      	beq.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	401a      	ands	r2, r3
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	429a      	cmp	r2, r3
 800213e:	d146      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8310 	mrs	r3, PRIMASK
 800214e:	613b      	str	r3, [r7, #16]
  return(result);
 8002150:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4923      	ldr	r1, [pc, #140]	; (80021f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800217c:	f3ef 8310 	mrs	r3, PRIMASK
 8002180:	61fb      	str	r3, [r7, #28]
  return(result);
 8002182:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002184:	64bb      	str	r3, [r7, #72]	; 0x48
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f383 8810 	msr	PRIMASK, r3
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f383 8810 	msr	PRIMASK, r3
}
 80021ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	2120      	movs	r1, #32
 80021c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2274      	movs	r2, #116	; 0x74
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e010      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	425a      	negs	r2, r3
 80021de:	4153      	adcs	r3, r2
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	001a      	movs	r2, r3
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d100      	bne.n	80021ee <UART_WaitOnFlagUntilTimeout+0x17a>
 80021ec:	e74b      	b.n	8002086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b014      	add	sp, #80	; 0x50
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fffffe5f 	.word	0xfffffe5f

080021fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	0002      	movs	r2, r0
 8002204:	1dbb      	adds	r3, r7, #6
 8002206:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	2200      	movs	r2, #0
 8002210:	5e9b      	ldrsh	r3, [r3, r2]
 8002212:	2b84      	cmp	r3, #132	; 0x84
 8002214:	d006      	beq.n	8002224 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	2200      	movs	r2, #0
 800221a:	5e9a      	ldrsh	r2, [r3, r2]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	18d3      	adds	r3, r2, r3
 8002220:	3303      	adds	r3, #3
 8002222:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002224:	68fb      	ldr	r3, [r7, #12]
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}

0800222e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002232:	f000 faa1 	bl	8002778 <vTaskStartScheduler>
  
  return osOK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800223e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002240:	b089      	sub	sp, #36	; 0x24
 8002242:	af04      	add	r7, sp, #16
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <osThreadCreate+0x54>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01c      	beq.n	8002292 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685c      	ldr	r4, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681d      	ldr	r5, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691e      	ldr	r6, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2208      	movs	r2, #8
 8002268:	5e9b      	ldrsh	r3, [r3, r2]
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff ffc6 	bl	80021fc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	9201      	str	r2, [sp, #4]
 800227e:	9000      	str	r0, [sp, #0]
 8002280:	000b      	movs	r3, r1
 8002282:	0032      	movs	r2, r6
 8002284:	0029      	movs	r1, r5
 8002286:	0020      	movs	r0, r4
 8002288:	f000 f8e3 	bl	8002452 <xTaskCreateStatic>
 800228c:	0003      	movs	r3, r0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e01d      	b.n	80022ce <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685c      	ldr	r4, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800229e:	b29e      	uxth	r6, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2208      	movs	r2, #8
 80022a4:	5e9b      	ldrsh	r3, [r3, r2]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7ff ffa8 	bl	80021fc <makeFreeRtosPriority>
 80022ac:	0001      	movs	r1, r0
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	230c      	movs	r3, #12
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	9100      	str	r1, [sp, #0]
 80022b8:	0013      	movs	r3, r2
 80022ba:	0032      	movs	r2, r6
 80022bc:	0029      	movs	r1, r5
 80022be:	0020      	movs	r0, r4
 80022c0:	f000 f90a 	bl	80024d8 <xTaskCreate>
 80022c4:	0003      	movs	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b005      	add	sp, #20
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <osDelay+0x16>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	e000      	b.n	80022f0 <osDelay+0x18>
 80022ee:	2301      	movs	r3, #1
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fa1b 	bl	800272c <vTaskDelay>
  
  return osOK;
 80022f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}

08002300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3308      	adds	r3, #8
 800230c:	001a      	movs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	4252      	negs	r2, r2
 8002318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3308      	adds	r3, #8
 800231e:	001a      	movs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3308      	adds	r3, #8
 8002328:	001a      	movs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}

08002352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}

08002396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	d103      	bne.n	80023b4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e00c      	b.n	80023ce <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3308      	adds	r3, #8
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e002      	b.n	80023c2 <vListInsert+0x2c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d2f6      	bcs.n	80023bc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}

08002402 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6852      	ldr	r2, [r2, #4]
 8002422:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d103      	bne.n	8002436 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}

08002452 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b08d      	sub	sp, #52	; 0x34
 8002456:	af04      	add	r7, sp, #16
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <xTaskCreateStatic+0x18>
 8002466:	b672      	cpsid	i
 8002468:	e7fe      	b.n	8002468 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <xTaskCreateStatic+0x22>
 8002470:	b672      	cpsid	i
 8002472:	e7fe      	b.n	8002472 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002474:	2354      	movs	r3, #84	; 0x54
 8002476:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b54      	cmp	r3, #84	; 0x54
 800247c:	d001      	beq.n	8002482 <xTaskCreateStatic+0x30>
 800247e:	b672      	cpsid	i
 8002480:	e7fe      	b.n	8002480 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <xTaskCreateStatic+0x78>
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002496:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2251      	movs	r2, #81	; 0x51
 800249c:	2102      	movs	r1, #2
 800249e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024a0:	683c      	ldr	r4, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9303      	str	r3, [sp, #12]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2318      	movs	r3, #24
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	0023      	movs	r3, r4
 80024bc:	f000 f858 	bl	8002570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 f8ce 	bl	8002664 <prvAddNewTaskToReadyList>
 80024c8:	e001      	b.n	80024ce <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024ce:	69bb      	ldr	r3, [r7, #24]
	}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b009      	add	sp, #36	; 0x24
 80024d6:	bd90      	pop	{r4, r7, pc}

080024d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b08d      	sub	sp, #52	; 0x34
 80024dc:	af04      	add	r7, sp, #16
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fd86 	bl	8003000 <pvPortMalloc>
 80024f4:	0003      	movs	r3, r0
 80024f6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80024fe:	2054      	movs	r0, #84	; 0x54
 8002500:	f000 fd7e 	bl	8003000 <pvPortMalloc>
 8002504:	0003      	movs	r3, r0
 8002506:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
 8002514:	e006      	b.n	8002524 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fe17 	bl	800314c <vPortFree>
 800251e:	e001      	b.n	8002524 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2251      	movs	r2, #81	; 0x51
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002532:	1dbb      	adds	r3, r7, #6
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	683c      	ldr	r4, [r7, #0]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	2300      	movs	r3, #0
 800253e:	9303      	str	r3, [sp, #12]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	0023      	movs	r3, r4
 800254e:	f000 f80f 	bl	8002570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f885 	bl	8002664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800255a:	2301      	movs	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	e002      	b.n	8002566 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002566:	69bb      	ldr	r3, [r7, #24]
	}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b009      	add	sp, #36	; 0x24
 800256e:	bd90      	pop	{r4, r7, pc}

08002570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4936      	ldr	r1, [pc, #216]	; (8002660 <prvInitialiseNewTask+0xf0>)
 8002586:	468c      	mov	ip, r1
 8002588:	4463      	add	r3, ip
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2207      	movs	r2, #7
 8002594:	4393      	bics	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2207      	movs	r2, #7
 800259c:	4013      	ands	r3, r2
 800259e:	d001      	beq.n	80025a4 <prvInitialiseNewTask+0x34>
 80025a0:	b672      	cpsid	i
 80025a2:	e7fe      	b.n	80025a2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e013      	b.n	80025d2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	18d3      	adds	r3, r2, r3
 80025b0:	7818      	ldrb	r0, [r3, #0]
 80025b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b4:	2134      	movs	r1, #52	; 0x34
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	185b      	adds	r3, r3, r1
 80025bc:	1c02      	adds	r2, r0, #0
 80025be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d9e8      	bls.n	80025aa <prvInitialiseNewTask+0x3a>
 80025d8:	e000      	b.n	80025dc <prvInitialiseNewTask+0x6c>
		{
			break;
 80025da:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	2243      	movs	r2, #67	; 0x43
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d901      	bls.n	80025ee <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025ea:	2306      	movs	r3, #6
 80025ec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	2200      	movs	r2, #0
 80025fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	3304      	adds	r3, #4
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fe99 	bl	800233c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3318      	adds	r3, #24
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff fe94 	bl	800233c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002618:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2207      	movs	r2, #7
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2200      	movs	r2, #0
 800262e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	2250      	movs	r2, #80	; 0x50
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 fba8 	bl	8002d94 <pxPortInitialiseStack>
 8002644:	0002      	movs	r2, r0
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b006      	add	sp, #24
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	3fffffff 	.word	0x3fffffff

08002664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800266c:	f000 fc30 	bl	8002ed0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <prvAddNewTaskToReadyList+0xb0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	4b27      	ldr	r3, [pc, #156]	; (8002714 <prvAddNewTaskToReadyList+0xb0>)
 8002678:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800267a:	4b27      	ldr	r3, [pc, #156]	; (8002718 <prvAddNewTaskToReadyList+0xb4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <prvAddNewTaskToReadyList+0xb4>)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <prvAddNewTaskToReadyList+0xb0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d110      	bne.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002690:	f000 fa6e 	bl	8002b70 <prvInitialiseTaskLists>
 8002694:	e00d      	b.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <prvAddNewTaskToReadyList+0xb8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <prvAddNewTaskToReadyList+0xb4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d802      	bhi.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <prvAddNewTaskToReadyList+0xb4>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <prvAddNewTaskToReadyList+0xbc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <prvAddNewTaskToReadyList+0xbc>)
 80026ba:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <prvAddNewTaskToReadyList+0xc0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d903      	bls.n	80026d0 <prvAddNewTaskToReadyList+0x6c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <prvAddNewTaskToReadyList+0xc0>)
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	0013      	movs	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	189b      	adds	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <prvAddNewTaskToReadyList+0xc4>)
 80026de:	189a      	adds	r2, r3, r2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	0019      	movs	r1, r3
 80026e6:	0010      	movs	r0, r2
 80026e8:	f7ff fe33 	bl	8002352 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026ec:	f000 fc02 	bl	8002ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <prvAddNewTaskToReadyList+0xb8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <prvAddNewTaskToReadyList+0xb4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	429a      	cmp	r2, r3
 8002704:	d201      	bcs.n	800270a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002706:	f000 fbd3 	bl	8002eb0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	200003e4 	.word	0x200003e4
 8002718:	200002e4 	.word	0x200002e4
 800271c:	200003f0 	.word	0x200003f0
 8002720:	20000400 	.word	0x20000400
 8002724:	200003ec 	.word	0x200003ec
 8002728:	200002e8 	.word	0x200002e8

0800272c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <vTaskDelay+0x48>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <vTaskDelay+0x1e>
 8002746:	b672      	cpsid	i
 8002748:	e7fe      	b.n	8002748 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800274a:	f000 f863 	bl	8002814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2100      	movs	r1, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f000 faca 	bl	8002cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002758:	f000 f868 	bl	800282c <xTaskResumeAll>
 800275c:	0003      	movs	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002766:	f000 fba3 	bl	8002eb0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	2000040c 	.word	0x2000040c

08002778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002786:	003a      	movs	r2, r7
 8002788:	1d39      	adds	r1, r7, #4
 800278a:	2308      	movs	r3, #8
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	0018      	movs	r0, r3
 8002790:	f7fd fd46 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002794:	683c      	ldr	r4, [r7, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	4918      	ldr	r1, [pc, #96]	; (80027fc <vTaskStartScheduler+0x84>)
 800279c:	4818      	ldr	r0, [pc, #96]	; (8002800 <vTaskStartScheduler+0x88>)
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	2300      	movs	r3, #0
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	0022      	movs	r2, r4
 80027aa:	f7ff fe52 	bl	8002452 <xTaskCreateStatic>
 80027ae:	0002      	movs	r2, r0
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <vTaskStartScheduler+0x8c>)
 80027b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <vTaskStartScheduler+0x8c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10d      	bne.n	80027e8 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80027cc:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <vTaskStartScheduler+0x90>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	4252      	negs	r2, r2
 80027d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <vTaskStartScheduler+0x94>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <vTaskStartScheduler+0x98>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027e2:	f000 fb41 	bl	8002e68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027e6:	e004      	b.n	80027f2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	d101      	bne.n	80027f2 <vTaskStartScheduler+0x7a>
 80027ee:	b672      	cpsid	i
 80027f0:	e7fe      	b.n	80027f0 <vTaskStartScheduler+0x78>
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b005      	add	sp, #20
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	08003e64 	.word	0x08003e64
 8002800:	08002b51 	.word	0x08002b51
 8002804:	20000408 	.word	0x20000408
 8002808:	20000404 	.word	0x20000404
 800280c:	200003f0 	.word	0x200003f0
 8002810:	200003e8 	.word	0x200003e8

08002814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <vTaskSuspendAll+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	4b02      	ldr	r3, [pc, #8]	; (8002828 <vTaskSuspendAll+0x14>)
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000040c 	.word	0x2000040c

0800282c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <xTaskResumeAll+0xf8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <xTaskResumeAll+0x1a>
 8002842:	b672      	cpsid	i
 8002844:	e7fe      	b.n	8002844 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002846:	f000 fb43 	bl	8002ed0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <xTaskResumeAll+0xf8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <xTaskResumeAll+0xf8>)
 8002852:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002854:	4b33      	ldr	r3, [pc, #204]	; (8002924 <xTaskResumeAll+0xf8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d15b      	bne.n	8002914 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <xTaskResumeAll+0xfc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d057      	beq.n	8002914 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002864:	e02f      	b.n	80028c6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <xTaskResumeAll+0x100>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3318      	adds	r3, #24
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fdc5 	bl	8002402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3304      	adds	r3, #4
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff fdc0 	bl	8002402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <xTaskResumeAll+0x104>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d903      	bls.n	8002896 <xTaskResumeAll+0x6a>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <xTaskResumeAll+0x104>)
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	0013      	movs	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <xTaskResumeAll+0x108>)
 80028a4:	189a      	adds	r2, r3, r2
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	0019      	movs	r1, r3
 80028ac:	0010      	movs	r0, r2
 80028ae:	f7ff fd50 	bl	8002352 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <xTaskResumeAll+0x10c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <xTaskResumeAll+0x110>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <xTaskResumeAll+0x100>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1cb      	bne.n	8002866 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80028d4:	f000 f9e6 	bl	8002ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <xTaskResumeAll+0x114>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00f      	beq.n	8002904 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028e4:	f000 f82e 	bl	8002944 <xTaskIncrementTick>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d002      	beq.n	80028f2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <xTaskResumeAll+0x110>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f2      	bne.n	80028e4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <xTaskResumeAll+0x114>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <xTaskResumeAll+0x110>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800290c:	2301      	movs	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002910:	f000 face 	bl	8002eb0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002914:	f000 faee 	bl	8002ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8002918:	68bb      	ldr	r3, [r7, #8]
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	2000040c 	.word	0x2000040c
 8002928:	200003e4 	.word	0x200003e4
 800292c:	200003a4 	.word	0x200003a4
 8002930:	200003ec 	.word	0x200003ec
 8002934:	200002e8 	.word	0x200002e8
 8002938:	200002e4 	.word	0x200002e4
 800293c:	200003f8 	.word	0x200003f8
 8002940:	200003f4 	.word	0x200003f4

08002944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <xTaskIncrementTick+0x13c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d000      	beq.n	8002958 <xTaskIncrementTick+0x14>
 8002956:	e083      	b.n	8002a60 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002958:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <xTaskIncrementTick+0x140>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002960:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <xTaskIncrementTick+0x140>)
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d117      	bne.n	800299c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800296c:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <xTaskIncrementTick+0x144>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <xTaskIncrementTick+0x36>
 8002976:	b672      	cpsid	i
 8002978:	e7fe      	b.n	8002978 <xTaskIncrementTick+0x34>
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <xTaskIncrementTick+0x144>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <xTaskIncrementTick+0x148>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <xTaskIncrementTick+0x144>)
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <xTaskIncrementTick+0x148>)
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <xTaskIncrementTick+0x14c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <xTaskIncrementTick+0x14c>)
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f000 f984 	bl	8002ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <xTaskIncrementTick+0x150>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d34e      	bcc.n	8002a44 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <xTaskIncrementTick+0x144>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <xTaskIncrementTick+0x70>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <xTaskIncrementTick+0x72>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <xTaskIncrementTick+0x150>)
 80029bc:	2201      	movs	r2, #1
 80029be:	4252      	negs	r2, r2
 80029c0:	601a      	str	r2, [r3, #0]
					break;
 80029c2:	e03f      	b.n	8002a44 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <xTaskIncrementTick+0x144>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d203      	bcs.n	80029e4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <xTaskIncrementTick+0x150>)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
						break;
 80029e2:	e02f      	b.n	8002a44 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3304      	adds	r3, #4
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fd0a 	bl	8002402 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3318      	adds	r3, #24
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff fd01 	bl	8002402 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <xTaskIncrementTick+0x154>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d903      	bls.n	8002a14 <xTaskIncrementTick+0xd0>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <xTaskIncrementTick+0x154>)
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	0013      	movs	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <xTaskIncrementTick+0x158>)
 8002a22:	189a      	adds	r2, r3, r2
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3304      	adds	r3, #4
 8002a28:	0019      	movs	r1, r3
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	f7ff fc91 	bl	8002352 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <xTaskIncrementTick+0x15c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3b3      	bcc.n	80029a6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a42:	e7b0      	b.n	80029a6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <xTaskIncrementTick+0x15c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	4914      	ldr	r1, [pc, #80]	; (8002a9c <xTaskIncrementTick+0x158>)
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	585b      	ldr	r3, [r3, r1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d907      	bls.n	8002a6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e004      	b.n	8002a6a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <xTaskIncrementTick+0x160>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <xTaskIncrementTick+0x160>)
 8002a68:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <xTaskIncrementTick+0x164>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a76:	697b      	ldr	r3, [r7, #20]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b006      	add	sp, #24
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	2000040c 	.word	0x2000040c
 8002a84:	200003e8 	.word	0x200003e8
 8002a88:	2000039c 	.word	0x2000039c
 8002a8c:	200003a0 	.word	0x200003a0
 8002a90:	200003fc 	.word	0x200003fc
 8002a94:	20000404 	.word	0x20000404
 8002a98:	200003ec 	.word	0x200003ec
 8002a9c:	200002e8 	.word	0x200002e8
 8002aa0:	200002e4 	.word	0x200002e4
 8002aa4:	200003f4 	.word	0x200003f4
 8002aa8:	200003f8 	.word	0x200003f8

08002aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <vTaskSwitchContext+0x90>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <vTaskSwitchContext+0x94>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ac0:	e037      	b.n	8002b32 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <vTaskSwitchContext+0x94>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <vTaskSwitchContext+0x98>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	e007      	b.n	8002ae0 <vTaskSwitchContext+0x34>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <vTaskSwitchContext+0x2e>
 8002ad6:	b672      	cpsid	i
 8002ad8:	e7fe      	b.n	8002ad8 <vTaskSwitchContext+0x2c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	4919      	ldr	r1, [pc, #100]	; (8002b48 <vTaskSwitchContext+0x9c>)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	585b      	ldr	r3, [r3, r1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <vTaskSwitchContext+0x24>
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	0013      	movs	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	189b      	adds	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <vTaskSwitchContext+0x9c>)
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3308      	adds	r3, #8
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d104      	bne.n	8002b22 <vTaskSwitchContext+0x76>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <vTaskSwitchContext+0xa0>)
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <vTaskSwitchContext+0x98>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	2000040c 	.word	0x2000040c
 8002b40:	200003f8 	.word	0x200003f8
 8002b44:	200003ec 	.word	0x200003ec
 8002b48:	200002e8 	.word	0x200002e8
 8002b4c:	200002e4 	.word	0x200002e4

08002b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b58:	f000 f84e 	bl	8002bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <prvIdleTask+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d9f9      	bls.n	8002b58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b64:	f000 f9a4 	bl	8002eb0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002b68:	e7f6      	b.n	8002b58 <prvIdleTask+0x8>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	200002e8 	.word	0x200002e8

08002b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	e00c      	b.n	8002b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	0013      	movs	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <prvInitialiseTaskLists+0x68>)
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff fbb8 	bl	8002300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d9ef      	bls.n	8002b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <prvInitialiseTaskLists+0x6c>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff fbae 	bl	8002300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <prvInitialiseTaskLists+0x70>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff fbaa 	bl	8002300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <prvInitialiseTaskLists+0x74>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff fba6 	bl	8002300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <prvInitialiseTaskLists+0x78>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff fba2 	bl	8002300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <prvInitialiseTaskLists+0x7c>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fb9e 	bl	8002300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <prvInitialiseTaskLists+0x80>)
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <prvInitialiseTaskLists+0x6c>)
 8002bc8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <prvInitialiseTaskLists+0x84>)
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <prvInitialiseTaskLists+0x70>)
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200002e8 	.word	0x200002e8
 8002bdc:	20000374 	.word	0x20000374
 8002be0:	20000388 	.word	0x20000388
 8002be4:	200003a4 	.word	0x200003a4
 8002be8:	200003b8 	.word	0x200003b8
 8002bec:	200003d0 	.word	0x200003d0
 8002bf0:	2000039c 	.word	0x2000039c
 8002bf4:	200003a0 	.word	0x200003a0

08002bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bfe:	e01a      	b.n	8002c36 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002c00:	f000 f966 	bl	8002ed0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <prvCheckTasksWaitingTermination+0x50>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fbf6 	bl	8002402 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c1e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c28:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002c2a:	f000 f963 	bl	8002ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 f80f 	bl	8002c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e0      	bne.n	8002c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200003b8 	.word	0x200003b8
 8002c4c:	200003e4 	.word	0x200003e4
 8002c50:	200003cc 	.word	0x200003cc

08002c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2251      	movs	r2, #81	; 0x51
 8002c60:	5c9b      	ldrb	r3, [r3, r2]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 fa6e 	bl	800314c <vPortFree>
				vPortFree( pxTCB );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fa6a 	bl	800314c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c78:	e010      	b.n	8002c9c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2251      	movs	r2, #81	; 0x51
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d104      	bne.n	8002c8e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fa60 	bl	800314c <vPortFree>
	}
 8002c8c:	e006      	b.n	8002c9c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2251      	movs	r2, #81	; 0x51
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d001      	beq.n	8002c9c <prvDeleteTCB+0x48>
 8002c98:	b672      	cpsid	i
 8002c9a:	e7fe      	b.n	8002c9a <prvDeleteTCB+0x46>
	}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <prvResetNextTaskUnblockTime+0x40>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <prvResetNextTaskUnblockTime+0x14>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <prvResetNextTaskUnblockTime+0x16>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <prvResetNextTaskUnblockTime+0x44>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cc6:	e008      	b.n	8002cda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <prvResetNextTaskUnblockTime+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <prvResetNextTaskUnblockTime+0x44>)
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	2000039c 	.word	0x2000039c
 8002ce8:	20000404 	.word	0x20000404

08002cec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff fb7d 	bl	8002402 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	d10b      	bne.n	8002d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff fb17 	bl	8002352 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d24:	e026      	b.n	8002d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	18d3      	adds	r3, r2, r3
 8002d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d209      	bcs.n	8002d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3304      	adds	r3, #4
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f7ff fb23 	bl	8002396 <vListInsert>
}
 8002d50:	e010      	b.n	8002d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f7ff fb19 	bl	8002396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d202      	bcs.n	8002d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200003e8 	.word	0x200003e8
 8002d80:	200002e4 	.word	0x200002e4
 8002d84:	200003d0 	.word	0x200003d0
 8002d88:	200003a0 	.word	0x200003a0
 8002d8c:	2000039c 	.word	0x2000039c
 8002d90:	20000404 	.word	0x20000404

08002d94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3b04      	subs	r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	0452      	lsls	r2, r2, #17
 8002dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3b04      	subs	r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b04      	subs	r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <pxPortInitialiseStack+0x50>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b14      	subs	r3, #20
 8002dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b20      	subs	r3, #32
 8002dd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	08002de9 	.word	0x08002de9

08002de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <prvTaskExitError+0x2c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	d001      	beq.n	8002dfe <prvTaskExitError+0x16>
 8002dfa:	b672      	cpsid	i
 8002dfc:	e7fe      	b.n	8002dfc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002dfe:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0fc      	beq.n	8002e02 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000008 	.word	0x20000008

08002e18 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <pxCurrentTCBConst2>)
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	3020      	adds	r0, #32
 8002e38:	f380 8809 	msr	PSP, r0
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	f380 8814 	msr	CONTROL, r0
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002e48:	46ae      	mov	lr, r5
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	bc04      	pop	{r2}
 8002e4e:	b662      	cpsie	i
 8002e50:	4718      	bx	r3
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46c0      	nop			; (mov r8, r8)

08002e60 <pxCurrentTCBConst2>:
 8002e60:	200002e4 	.word	0x200002e4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46c0      	nop			; (mov r8, r8)

08002e68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <xPortStartScheduler+0x40>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <xPortStartScheduler+0x40>)
 8002e72:	21ff      	movs	r1, #255	; 0xff
 8002e74:	0409      	lsls	r1, r1, #16
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <xPortStartScheduler+0x40>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <xPortStartScheduler+0x40>)
 8002e80:	21ff      	movs	r1, #255	; 0xff
 8002e82:	0609      	lsls	r1, r1, #24
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002e88:	f000 f898 	bl	8002fbc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <xPortStartScheduler+0x44>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002e92:	f7ff ffcd 	bl	8002e30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e96:	f7ff fe09 	bl	8002aac <vTaskSwitchContext>
	prvTaskExitError();
 8002e9a:	f7ff ffa5 	bl	8002de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	e000ed20 	.word	0xe000ed20
 8002eac:	20000008 	.word	0x20000008

08002eb0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <vPortYield+0x1c>)
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	0552      	lsls	r2, r2, #21
 8002eba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002ebc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002ec0:	f3bf 8f6f 	isb	sy
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002ed4:	b672      	cpsid	i
    uxCriticalNesting++;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <vPortEnterCritical+0x20>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <vPortEnterCritical+0x20>)
 8002ede:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002ee0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002ee4:	f3bf 8f6f 	isb	sy
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <vPortExitCritical+0x2c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <vPortExitCritical+0x10>
 8002f00:	b672      	cpsid	i
 8002f02:	e7fe      	b.n	8002f02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <vPortExitCritical+0x2c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <vPortExitCritical+0x2c>)
 8002f0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <vPortExitCritical+0x2c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d100      	bne.n	8002f18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002f16:	b662      	cpsie	i
    }
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000008 	.word	0x20000008

08002f24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002f24:	f3ef 8010 	mrs	r0, PRIMASK
 8002f28:	b672      	cpsid	i
 8002f2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	0018      	movs	r0, r3

08002f30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002f30:	f380 8810 	msr	PRIMASK, r0
 8002f34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8002f36:	46c0      	nop			; (mov r8, r8)
	...

08002f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f40:	f3ef 8009 	mrs	r0, PSP
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <pxCurrentTCBConst>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	3820      	subs	r0, #32
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f4e:	4644      	mov	r4, r8
 8002f50:	464d      	mov	r5, r9
 8002f52:	4656      	mov	r6, sl
 8002f54:	465f      	mov	r7, fp
 8002f56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f58:	b508      	push	{r3, lr}
 8002f5a:	b672      	cpsid	i
 8002f5c:	f7ff fda6 	bl	8002aac <vTaskSwitchContext>
 8002f60:	b662      	cpsie	i
 8002f62:	bc0c      	pop	{r2, r3}
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	6808      	ldr	r0, [r1, #0]
 8002f68:	3010      	adds	r0, #16
 8002f6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f6c:	46a0      	mov	r8, r4
 8002f6e:	46a9      	mov	r9, r5
 8002f70:	46b2      	mov	sl, r6
 8002f72:	46bb      	mov	fp, r7
 8002f74:	f380 8809 	msr	PSP, r0
 8002f78:	3820      	subs	r0, #32
 8002f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f7c:	4718      	bx	r3
 8002f7e:	46c0      	nop			; (mov r8, r8)

08002f80 <pxCurrentTCBConst>:
 8002f80:	200002e4 	.word	0x200002e4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46c0      	nop			; (mov r8, r8)

08002f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f8e:	f7ff ffc9 	bl	8002f24 <ulSetInterruptMaskFromISR>
 8002f92:	0003      	movs	r3, r0
 8002f94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f96:	f7ff fcd5 	bl	8002944 <xTaskIncrementTick>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d003      	beq.n	8002fa6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <SysTick_Handler+0x30>)
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0552      	lsls	r2, r2, #21
 8002fa4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff ffc1 	bl	8002f30 <vClearInterruptMaskFromISR>
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <prvSetupTimerInterrupt+0x34>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <prvSetupTimerInterrupt+0x38>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <prvSetupTimerInterrupt+0x3c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22fa      	movs	r2, #250	; 0xfa
 8002fd2:	0091      	lsls	r1, r2, #2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fd f897 	bl	8000108 <__udivsi3>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	001a      	movs	r2, r3
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <prvSetupTimerInterrupt+0x40>)
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <prvSetupTimerInterrupt+0x34>)
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	601a      	str	r2, [r3, #0]
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	e000e010 	.word	0xe000e010
 8002ff4:	e000e018 	.word	0xe000e018
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	e000e014 	.word	0xe000e014

08003000 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800300c:	f7ff fc02 	bl	8002814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003010:	4b49      	ldr	r3, [pc, #292]	; (8003138 <pvPortMalloc+0x138>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003018:	f000 f8e0 	bl	80031dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <pvPortMalloc+0x13c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4013      	ands	r3, r2
 8003024:	d000      	beq.n	8003028 <pvPortMalloc+0x28>
 8003026:	e079      	b.n	800311c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800302e:	2208      	movs	r2, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	189b      	adds	r3, r3, r2
 8003034:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2207      	movs	r2, #7
 800303a:	4013      	ands	r3, r2
 800303c:	d00a      	beq.n	8003054 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2207      	movs	r2, #7
 8003042:	4393      	bics	r3, r2
 8003044:	3308      	adds	r3, #8
 8003046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2207      	movs	r2, #7
 800304c:	4013      	ands	r3, r2
 800304e:	d001      	beq.n	8003054 <pvPortMalloc+0x54>
 8003050:	b672      	cpsid	i
 8003052:	e7fe      	b.n	8003052 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d060      	beq.n	800311c <pvPortMalloc+0x11c>
 800305a:	4b39      	ldr	r3, [pc, #228]	; (8003140 <pvPortMalloc+0x140>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d85b      	bhi.n	800311c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003064:	4b37      	ldr	r3, [pc, #220]	; (8003144 <pvPortMalloc+0x144>)
 8003066:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <pvPortMalloc+0x144>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800306e:	e004      	b.n	800307a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	d903      	bls.n	800308c <pvPortMalloc+0x8c>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f1      	bne.n	8003070 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <pvPortMalloc+0x138>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	429a      	cmp	r2, r3
 8003094:	d042      	beq.n	800311c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2208      	movs	r2, #8
 800309c:	189b      	adds	r3, r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	2308      	movs	r3, #8
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d916      	bls.n	80030e6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	18d3      	adds	r3, r2, r3
 80030be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2207      	movs	r2, #7
 80030c4:	4013      	ands	r3, r2
 80030c6:	d001      	beq.n	80030cc <pvPortMalloc+0xcc>
 80030c8:	b672      	cpsid	i
 80030ca:	e7fe      	b.n	80030ca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f000 f8db 	bl	800329c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <pvPortMalloc+0x140>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	1ad2      	subs	r2, r2, r3
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <pvPortMalloc+0x140>)
 80030f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <pvPortMalloc+0x140>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <pvPortMalloc+0x148>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d203      	bcs.n	8003108 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <pvPortMalloc+0x140>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <pvPortMalloc+0x148>)
 8003106:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <pvPortMalloc+0x13c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800311c:	f7ff fb86 	bl	800282c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2207      	movs	r2, #7
 8003124:	4013      	ands	r3, r2
 8003126:	d001      	beq.n	800312c <pvPortMalloc+0x12c>
 8003128:	b672      	cpsid	i
 800312a:	e7fe      	b.n	800312a <pvPortMalloc+0x12a>
	return pvReturn;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b006      	add	sp, #24
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20001018 	.word	0x20001018
 800313c:	20001024 	.word	0x20001024
 8003140:	2000101c 	.word	0x2000101c
 8003144:	20001010 	.word	0x20001010
 8003148:	20001020 	.word	0x20001020

0800314c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d035      	beq.n	80031ca <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800315e:	2308      	movs	r3, #8
 8003160:	425b      	negs	r3, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	18d3      	adds	r3, r2, r3
 8003166:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <vPortFree+0x88>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4013      	ands	r3, r2
 8003176:	d101      	bne.n	800317c <vPortFree+0x30>
 8003178:	b672      	cpsid	i
 800317a:	e7fe      	b.n	800317a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <vPortFree+0x3c>
 8003184:	b672      	cpsid	i
 8003186:	e7fe      	b.n	8003186 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <vPortFree+0x88>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4013      	ands	r3, r2
 8003192:	d01a      	beq.n	80031ca <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <vPortFree+0x88>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80031ac:	f7ff fb32 	bl	8002814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <vPortFree+0x8c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	18d2      	adds	r2, r2, r3
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <vPortFree+0x8c>)
 80031bc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f86b 	bl	800329c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80031c6:	f7ff fb31 	bl	800282c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20001024 	.word	0x20001024
 80031d8:	2000101c 	.word	0x2000101c

080031dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <prvHeapInit+0xa8>)
 80031ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2207      	movs	r2, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	d00c      	beq.n	800320e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3307      	adds	r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2207      	movs	r2, #7
 80031fe:	4393      	bics	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <prvHeapInit+0xa8>)
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <prvHeapInit+0xac>)
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <prvHeapInit+0xac>)
 800321a:	2200      	movs	r2, #0
 800321c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003226:	2208      	movs	r2, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2207      	movs	r2, #7
 8003232:	4393      	bics	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <prvHeapInit+0xb0>)
 800323a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <prvHeapInit+0xb0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <prvHeapInit+0xb0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <prvHeapInit+0xb0>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <prvHeapInit+0xb4>)
 8003268:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <prvHeapInit+0xb8>)
 8003270:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <prvHeapInit+0xbc>)
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	0612      	lsls	r2, r2, #24
 8003278:	601a      	str	r2, [r3, #0]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	20000410 	.word	0x20000410
 8003288:	20001010 	.word	0x20001010
 800328c:	20001018 	.word	0x20001018
 8003290:	20001020 	.word	0x20001020
 8003294:	2000101c 	.word	0x2000101c
 8003298:	20001024 	.word	0x20001024

0800329c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <prvInsertBlockIntoFreeList+0xa8>)
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e002      	b.n	80032b0 <prvInsertBlockIntoFreeList+0x14>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d8f7      	bhi.n	80032aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	18d3      	adds	r3, r2, r3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d108      	bne.n	80032de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	18d2      	adds	r2, r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	18d2      	adds	r2, r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d118      	bne.n	8003324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <prvInsertBlockIntoFreeList+0xac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d00d      	beq.n	800331a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	18d2      	adds	r2, r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	e008      	b.n	800332c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <prvInsertBlockIntoFreeList+0xac>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e003      	b.n	800332c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d002      	beq.n	800333a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20001010 	.word	0x20001010
 8003348:	20001018 	.word	0x20001018

0800334c <__errno>:
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <__errno+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	2000000c 	.word	0x2000000c

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	2600      	movs	r6, #0
 800335c:	4d0c      	ldr	r5, [pc, #48]	; (8003390 <__libc_init_array+0x38>)
 800335e:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 8003360:	1b64      	subs	r4, r4, r5
 8003362:	10a4      	asrs	r4, r4, #2
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	2600      	movs	r6, #0
 800336a:	f000 fd31 	bl	8003dd0 <_init>
 800336e:	4d0a      	ldr	r5, [pc, #40]	; (8003398 <__libc_init_array+0x40>)
 8003370:	4c0a      	ldr	r4, [pc, #40]	; (800339c <__libc_init_array+0x44>)
 8003372:	1b64      	subs	r4, r4, r5
 8003374:	10a4      	asrs	r4, r4, #2
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	00b3      	lsls	r3, r6, #2
 800337e:	58eb      	ldr	r3, [r5, r3]
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	00b3      	lsls	r3, r6, #2
 8003388:	58eb      	ldr	r3, [r5, r3]
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	08003ee8 	.word	0x08003ee8
 8003394:	08003ee8 	.word	0x08003ee8
 8003398:	08003ee8 	.word	0x08003ee8
 800339c:	08003eec 	.word	0x08003eec

080033a0 <memset>:
 80033a0:	0003      	movs	r3, r0
 80033a2:	1882      	adds	r2, r0, r2
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	7019      	strb	r1, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <_puts_r>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	0005      	movs	r5, r0
 80033b4:	000e      	movs	r6, r1
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d004      	beq.n	80033c4 <_puts_r+0x14>
 80033ba:	6983      	ldr	r3, [r0, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <_puts_r+0x14>
 80033c0:	f000 fa6e 	bl	80038a0 <__sinit>
 80033c4:	69ab      	ldr	r3, [r5, #24]
 80033c6:	68ac      	ldr	r4, [r5, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <_puts_r+0x22>
 80033cc:	0028      	movs	r0, r5
 80033ce:	f000 fa67 	bl	80038a0 <__sinit>
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <_puts_r+0xd8>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	d122      	bne.n	800341e <_puts_r+0x6e>
 80033d8:	686c      	ldr	r4, [r5, #4]
 80033da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033dc:	07db      	lsls	r3, r3, #31
 80033de:	d405      	bmi.n	80033ec <_puts_r+0x3c>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	059b      	lsls	r3, r3, #22
 80033e4:	d402      	bmi.n	80033ec <_puts_r+0x3c>
 80033e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e8:	f000 fafb 	bl	80039e2 <__retarget_lock_acquire_recursive>
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	071b      	lsls	r3, r3, #28
 80033f0:	d502      	bpl.n	80033f8 <_puts_r+0x48>
 80033f2:	6923      	ldr	r3, [r4, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d129      	bne.n	800344c <_puts_r+0x9c>
 80033f8:	0021      	movs	r1, r4
 80033fa:	0028      	movs	r0, r5
 80033fc:	f000 f8aa 	bl	8003554 <__swsetup_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	d023      	beq.n	800344c <_puts_r+0x9c>
 8003404:	2501      	movs	r5, #1
 8003406:	426d      	negs	r5, r5
 8003408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800340a:	07db      	lsls	r3, r3, #31
 800340c:	d405      	bmi.n	800341a <_puts_r+0x6a>
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	059b      	lsls	r3, r3, #22
 8003412:	d402      	bmi.n	800341a <_puts_r+0x6a>
 8003414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003416:	f000 fae5 	bl	80039e4 <__retarget_lock_release_recursive>
 800341a:	0028      	movs	r0, r5
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <_puts_r+0xdc>)
 8003420:	429c      	cmp	r4, r3
 8003422:	d101      	bne.n	8003428 <_puts_r+0x78>
 8003424:	68ac      	ldr	r4, [r5, #8]
 8003426:	e7d8      	b.n	80033da <_puts_r+0x2a>
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <_puts_r+0xe0>)
 800342a:	429c      	cmp	r4, r3
 800342c:	d1d5      	bne.n	80033da <_puts_r+0x2a>
 800342e:	68ec      	ldr	r4, [r5, #12]
 8003430:	e7d3      	b.n	80033da <_puts_r+0x2a>
 8003432:	3601      	adds	r6, #1
 8003434:	60a3      	str	r3, [r4, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da04      	bge.n	8003444 <_puts_r+0x94>
 800343a:	69a2      	ldr	r2, [r4, #24]
 800343c:	429a      	cmp	r2, r3
 800343e:	dc16      	bgt.n	800346e <_puts_r+0xbe>
 8003440:	290a      	cmp	r1, #10
 8003442:	d014      	beq.n	800346e <_puts_r+0xbe>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	6022      	str	r2, [r4, #0]
 800344a:	7019      	strb	r1, [r3, #0]
 800344c:	68a3      	ldr	r3, [r4, #8]
 800344e:	7831      	ldrb	r1, [r6, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	2900      	cmp	r1, #0
 8003454:	d1ed      	bne.n	8003432 <_puts_r+0x82>
 8003456:	60a3      	str	r3, [r4, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da0f      	bge.n	800347c <_puts_r+0xcc>
 800345c:	0028      	movs	r0, r5
 800345e:	0022      	movs	r2, r4
 8003460:	310a      	adds	r1, #10
 8003462:	f000 f821 	bl	80034a8 <__swbuf_r>
 8003466:	250a      	movs	r5, #10
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	d1cd      	bne.n	8003408 <_puts_r+0x58>
 800346c:	e7ca      	b.n	8003404 <_puts_r+0x54>
 800346e:	0022      	movs	r2, r4
 8003470:	0028      	movs	r0, r5
 8003472:	f000 f819 	bl	80034a8 <__swbuf_r>
 8003476:	1c43      	adds	r3, r0, #1
 8003478:	d1e8      	bne.n	800344c <_puts_r+0x9c>
 800347a:	e7c3      	b.n	8003404 <_puts_r+0x54>
 800347c:	250a      	movs	r5, #10
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	6022      	str	r2, [r4, #0]
 8003484:	701d      	strb	r5, [r3, #0]
 8003486:	e7bf      	b.n	8003408 <_puts_r+0x58>
 8003488:	08003ea8 	.word	0x08003ea8
 800348c:	08003ec8 	.word	0x08003ec8
 8003490:	08003e88 	.word	0x08003e88

08003494 <puts>:
 8003494:	b510      	push	{r4, lr}
 8003496:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <puts+0x10>)
 8003498:	0001      	movs	r1, r0
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	f7ff ff88 	bl	80033b0 <_puts_r>
 80034a0:	bd10      	pop	{r4, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <__swbuf_r>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	0005      	movs	r5, r0
 80034ac:	000e      	movs	r6, r1
 80034ae:	0014      	movs	r4, r2
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d004      	beq.n	80034be <__swbuf_r+0x16>
 80034b4:	6983      	ldr	r3, [r0, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <__swbuf_r+0x16>
 80034ba:	f000 f9f1 	bl	80038a0 <__sinit>
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <__swbuf_r+0xa0>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	d12e      	bne.n	8003522 <__swbuf_r+0x7a>
 80034c4:	686c      	ldr	r4, [r5, #4]
 80034c6:	69a3      	ldr	r3, [r4, #24]
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	d532      	bpl.n	8003536 <__swbuf_r+0x8e>
 80034d0:	6923      	ldr	r3, [r4, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02f      	beq.n	8003536 <__swbuf_r+0x8e>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	6922      	ldr	r2, [r4, #16]
 80034da:	b2f7      	uxtb	r7, r6
 80034dc:	1a98      	subs	r0, r3, r2
 80034de:	6963      	ldr	r3, [r4, #20]
 80034e0:	b2f6      	uxtb	r6, r6
 80034e2:	4283      	cmp	r3, r0
 80034e4:	dc05      	bgt.n	80034f2 <__swbuf_r+0x4a>
 80034e6:	0021      	movs	r1, r4
 80034e8:	0028      	movs	r0, r5
 80034ea:	f000 f937 	bl	800375c <_fflush_r>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d127      	bne.n	8003542 <__swbuf_r+0x9a>
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	3001      	adds	r0, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	6022      	str	r2, [r4, #0]
 8003500:	701f      	strb	r7, [r3, #0]
 8003502:	6963      	ldr	r3, [r4, #20]
 8003504:	4283      	cmp	r3, r0
 8003506:	d004      	beq.n	8003512 <__swbuf_r+0x6a>
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	07db      	lsls	r3, r3, #31
 800350c:	d507      	bpl.n	800351e <__swbuf_r+0x76>
 800350e:	2e0a      	cmp	r6, #10
 8003510:	d105      	bne.n	800351e <__swbuf_r+0x76>
 8003512:	0021      	movs	r1, r4
 8003514:	0028      	movs	r0, r5
 8003516:	f000 f921 	bl	800375c <_fflush_r>
 800351a:	2800      	cmp	r0, #0
 800351c:	d111      	bne.n	8003542 <__swbuf_r+0x9a>
 800351e:	0030      	movs	r0, r6
 8003520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <__swbuf_r+0xa4>)
 8003524:	429c      	cmp	r4, r3
 8003526:	d101      	bne.n	800352c <__swbuf_r+0x84>
 8003528:	68ac      	ldr	r4, [r5, #8]
 800352a:	e7cc      	b.n	80034c6 <__swbuf_r+0x1e>
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <__swbuf_r+0xa8>)
 800352e:	429c      	cmp	r4, r3
 8003530:	d1c9      	bne.n	80034c6 <__swbuf_r+0x1e>
 8003532:	68ec      	ldr	r4, [r5, #12]
 8003534:	e7c7      	b.n	80034c6 <__swbuf_r+0x1e>
 8003536:	0021      	movs	r1, r4
 8003538:	0028      	movs	r0, r5
 800353a:	f000 f80b 	bl	8003554 <__swsetup_r>
 800353e:	2800      	cmp	r0, #0
 8003540:	d0c9      	beq.n	80034d6 <__swbuf_r+0x2e>
 8003542:	2601      	movs	r6, #1
 8003544:	4276      	negs	r6, r6
 8003546:	e7ea      	b.n	800351e <__swbuf_r+0x76>
 8003548:	08003ea8 	.word	0x08003ea8
 800354c:	08003ec8 	.word	0x08003ec8
 8003550:	08003e88 	.word	0x08003e88

08003554 <__swsetup_r>:
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <__swsetup_r+0xe0>)
 8003556:	b570      	push	{r4, r5, r6, lr}
 8003558:	681d      	ldr	r5, [r3, #0]
 800355a:	0006      	movs	r6, r0
 800355c:	000c      	movs	r4, r1
 800355e:	2d00      	cmp	r5, #0
 8003560:	d005      	beq.n	800356e <__swsetup_r+0x1a>
 8003562:	69ab      	ldr	r3, [r5, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <__swsetup_r+0x1a>
 8003568:	0028      	movs	r0, r5
 800356a:	f000 f999 	bl	80038a0 <__sinit>
 800356e:	4b32      	ldr	r3, [pc, #200]	; (8003638 <__swsetup_r+0xe4>)
 8003570:	429c      	cmp	r4, r3
 8003572:	d10f      	bne.n	8003594 <__swsetup_r+0x40>
 8003574:	686c      	ldr	r4, [r5, #4]
 8003576:	230c      	movs	r3, #12
 8003578:	5ee2      	ldrsh	r2, [r4, r3]
 800357a:	b293      	uxth	r3, r2
 800357c:	0711      	lsls	r1, r2, #28
 800357e:	d42d      	bmi.n	80035dc <__swsetup_r+0x88>
 8003580:	06d9      	lsls	r1, r3, #27
 8003582:	d411      	bmi.n	80035a8 <__swsetup_r+0x54>
 8003584:	2309      	movs	r3, #9
 8003586:	2001      	movs	r0, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	3337      	adds	r3, #55	; 0x37
 800358c:	4313      	orrs	r3, r2
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	4240      	negs	r0, r0
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <__swsetup_r+0xe8>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d101      	bne.n	800359e <__swsetup_r+0x4a>
 800359a:	68ac      	ldr	r4, [r5, #8]
 800359c:	e7eb      	b.n	8003576 <__swsetup_r+0x22>
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <__swsetup_r+0xec>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d1e8      	bne.n	8003576 <__swsetup_r+0x22>
 80035a4:	68ec      	ldr	r4, [r5, #12]
 80035a6:	e7e6      	b.n	8003576 <__swsetup_r+0x22>
 80035a8:	075b      	lsls	r3, r3, #29
 80035aa:	d513      	bpl.n	80035d4 <__swsetup_r+0x80>
 80035ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ae:	2900      	cmp	r1, #0
 80035b0:	d008      	beq.n	80035c4 <__swsetup_r+0x70>
 80035b2:	0023      	movs	r3, r4
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	4299      	cmp	r1, r3
 80035b8:	d002      	beq.n	80035c0 <__swsetup_r+0x6c>
 80035ba:	0030      	movs	r0, r6
 80035bc:	f000 fa80 	bl	8003ac0 <_free_r>
 80035c0:	2300      	movs	r3, #0
 80035c2:	6363      	str	r3, [r4, #52]	; 0x34
 80035c4:	2224      	movs	r2, #36	; 0x24
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	4393      	bics	r3, r2
 80035ca:	81a3      	strh	r3, [r4, #12]
 80035cc:	2300      	movs	r3, #0
 80035ce:	6063      	str	r3, [r4, #4]
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	2308      	movs	r3, #8
 80035d6:	89a2      	ldrh	r2, [r4, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	81a3      	strh	r3, [r4, #12]
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <__swsetup_r+0xa6>
 80035e2:	21a0      	movs	r1, #160	; 0xa0
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	0089      	lsls	r1, r1, #2
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	400b      	ands	r3, r1
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <__swsetup_r+0xa6>
 80035f2:	0021      	movs	r1, r4
 80035f4:	0030      	movs	r0, r6
 80035f6:	f000 fa1f 	bl	8003a38 <__smakebuf_r>
 80035fa:	220c      	movs	r2, #12
 80035fc:	5ea3      	ldrsh	r3, [r4, r2]
 80035fe:	2001      	movs	r0, #1
 8003600:	001a      	movs	r2, r3
 8003602:	b299      	uxth	r1, r3
 8003604:	4002      	ands	r2, r0
 8003606:	4203      	tst	r3, r0
 8003608:	d00f      	beq.n	800362a <__swsetup_r+0xd6>
 800360a:	2200      	movs	r2, #0
 800360c:	60a2      	str	r2, [r4, #8]
 800360e:	6962      	ldr	r2, [r4, #20]
 8003610:	4252      	negs	r2, r2
 8003612:	61a2      	str	r2, [r4, #24]
 8003614:	2000      	movs	r0, #0
 8003616:	6922      	ldr	r2, [r4, #16]
 8003618:	4282      	cmp	r2, r0
 800361a:	d1ba      	bne.n	8003592 <__swsetup_r+0x3e>
 800361c:	060a      	lsls	r2, r1, #24
 800361e:	d5b8      	bpl.n	8003592 <__swsetup_r+0x3e>
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	4313      	orrs	r3, r2
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	3801      	subs	r0, #1
 8003628:	e7b3      	b.n	8003592 <__swsetup_r+0x3e>
 800362a:	0788      	lsls	r0, r1, #30
 800362c:	d400      	bmi.n	8003630 <__swsetup_r+0xdc>
 800362e:	6962      	ldr	r2, [r4, #20]
 8003630:	60a2      	str	r2, [r4, #8]
 8003632:	e7ef      	b.n	8003614 <__swsetup_r+0xc0>
 8003634:	2000000c 	.word	0x2000000c
 8003638:	08003ea8 	.word	0x08003ea8
 800363c:	08003ec8 	.word	0x08003ec8
 8003640:	08003e88 	.word	0x08003e88

08003644 <__sflush_r>:
 8003644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003646:	898b      	ldrh	r3, [r1, #12]
 8003648:	0005      	movs	r5, r0
 800364a:	000c      	movs	r4, r1
 800364c:	071a      	lsls	r2, r3, #28
 800364e:	d45f      	bmi.n	8003710 <__sflush_r+0xcc>
 8003650:	684a      	ldr	r2, [r1, #4]
 8003652:	2a00      	cmp	r2, #0
 8003654:	dc04      	bgt.n	8003660 <__sflush_r+0x1c>
 8003656:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003658:	2a00      	cmp	r2, #0
 800365a:	dc01      	bgt.n	8003660 <__sflush_r+0x1c>
 800365c:	2000      	movs	r0, #0
 800365e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003660:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003662:	2f00      	cmp	r7, #0
 8003664:	d0fa      	beq.n	800365c <__sflush_r+0x18>
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	682e      	ldr	r6, [r5, #0]
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	001a      	movs	r2, r3
 8003670:	0149      	lsls	r1, r1, #5
 8003672:	400a      	ands	r2, r1
 8003674:	420b      	tst	r3, r1
 8003676:	d034      	beq.n	80036e2 <__sflush_r+0x9e>
 8003678:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	075b      	lsls	r3, r3, #29
 800367e:	d506      	bpl.n	800368e <__sflush_r+0x4a>
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	1ac0      	subs	r0, r0, r3
 8003684:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <__sflush_r+0x4a>
 800368a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368c:	1ac0      	subs	r0, r0, r3
 800368e:	0002      	movs	r2, r0
 8003690:	6a21      	ldr	r1, [r4, #32]
 8003692:	2300      	movs	r3, #0
 8003694:	0028      	movs	r0, r5
 8003696:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003698:	47b8      	blx	r7
 800369a:	89a1      	ldrh	r1, [r4, #12]
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d106      	bne.n	80036ae <__sflush_r+0x6a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b1d      	cmp	r3, #29
 80036a4:	d831      	bhi.n	800370a <__sflush_r+0xc6>
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <__sflush_r+0x114>)
 80036a8:	40da      	lsrs	r2, r3
 80036aa:	07d3      	lsls	r3, r2, #31
 80036ac:	d52d      	bpl.n	800370a <__sflush_r+0xc6>
 80036ae:	2300      	movs	r3, #0
 80036b0:	6063      	str	r3, [r4, #4]
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	04cb      	lsls	r3, r1, #19
 80036b8:	d505      	bpl.n	80036c6 <__sflush_r+0x82>
 80036ba:	1c43      	adds	r3, r0, #1
 80036bc:	d102      	bne.n	80036c4 <__sflush_r+0x80>
 80036be:	682b      	ldr	r3, [r5, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <__sflush_r+0x82>
 80036c4:	6560      	str	r0, [r4, #84]	; 0x54
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	602e      	str	r6, [r5, #0]
 80036ca:	2900      	cmp	r1, #0
 80036cc:	d0c6      	beq.n	800365c <__sflush_r+0x18>
 80036ce:	0023      	movs	r3, r4
 80036d0:	3344      	adds	r3, #68	; 0x44
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d002      	beq.n	80036dc <__sflush_r+0x98>
 80036d6:	0028      	movs	r0, r5
 80036d8:	f000 f9f2 	bl	8003ac0 <_free_r>
 80036dc:	2000      	movs	r0, #0
 80036de:	6360      	str	r0, [r4, #52]	; 0x34
 80036e0:	e7bd      	b.n	800365e <__sflush_r+0x1a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	0028      	movs	r0, r5
 80036e6:	6a21      	ldr	r1, [r4, #32]
 80036e8:	47b8      	blx	r7
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	d1c5      	bne.n	800367a <__sflush_r+0x36>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0c2      	beq.n	800367a <__sflush_r+0x36>
 80036f4:	2b1d      	cmp	r3, #29
 80036f6:	d001      	beq.n	80036fc <__sflush_r+0xb8>
 80036f8:	2b16      	cmp	r3, #22
 80036fa:	d101      	bne.n	8003700 <__sflush_r+0xbc>
 80036fc:	602e      	str	r6, [r5, #0]
 80036fe:	e7ad      	b.n	800365c <__sflush_r+0x18>
 8003700:	2340      	movs	r3, #64	; 0x40
 8003702:	89a2      	ldrh	r2, [r4, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	e7a9      	b.n	800365e <__sflush_r+0x1a>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	430b      	orrs	r3, r1
 800370e:	e7fa      	b.n	8003706 <__sflush_r+0xc2>
 8003710:	690f      	ldr	r7, [r1, #16]
 8003712:	2f00      	cmp	r7, #0
 8003714:	d0a2      	beq.n	800365c <__sflush_r+0x18>
 8003716:	680a      	ldr	r2, [r1, #0]
 8003718:	600f      	str	r7, [r1, #0]
 800371a:	1bd2      	subs	r2, r2, r7
 800371c:	9201      	str	r2, [sp, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d100      	bne.n	8003726 <__sflush_r+0xe2>
 8003724:	694a      	ldr	r2, [r1, #20]
 8003726:	60a2      	str	r2, [r4, #8]
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc00      	bgt.n	8003730 <__sflush_r+0xec>
 800372e:	e795      	b.n	800365c <__sflush_r+0x18>
 8003730:	003a      	movs	r2, r7
 8003732:	0028      	movs	r0, r5
 8003734:	9b01      	ldr	r3, [sp, #4]
 8003736:	6a21      	ldr	r1, [r4, #32]
 8003738:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800373a:	47b0      	blx	r6
 800373c:	2800      	cmp	r0, #0
 800373e:	dc06      	bgt.n	800374e <__sflush_r+0x10a>
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	2001      	movs	r0, #1
 8003744:	89a2      	ldrh	r2, [r4, #12]
 8003746:	4240      	negs	r0, r0
 8003748:	4313      	orrs	r3, r2
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	e787      	b.n	800365e <__sflush_r+0x1a>
 800374e:	9b01      	ldr	r3, [sp, #4]
 8003750:	183f      	adds	r7, r7, r0
 8003752:	1a1b      	subs	r3, r3, r0
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	e7e7      	b.n	8003728 <__sflush_r+0xe4>
 8003758:	20400001 	.word	0x20400001

0800375c <_fflush_r>:
 800375c:	690b      	ldr	r3, [r1, #16]
 800375e:	b570      	push	{r4, r5, r6, lr}
 8003760:	0005      	movs	r5, r0
 8003762:	000c      	movs	r4, r1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <_fflush_r+0x12>
 8003768:	2500      	movs	r5, #0
 800376a:	0028      	movs	r0, r5
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	2800      	cmp	r0, #0
 8003770:	d004      	beq.n	800377c <_fflush_r+0x20>
 8003772:	6983      	ldr	r3, [r0, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <_fflush_r+0x20>
 8003778:	f000 f892 	bl	80038a0 <__sinit>
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <_fflush_r+0x74>)
 800377e:	429c      	cmp	r4, r3
 8003780:	d11b      	bne.n	80037ba <_fflush_r+0x5e>
 8003782:	686c      	ldr	r4, [r5, #4]
 8003784:	220c      	movs	r2, #12
 8003786:	5ea3      	ldrsh	r3, [r4, r2]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ed      	beq.n	8003768 <_fflush_r+0xc>
 800378c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800378e:	07d2      	lsls	r2, r2, #31
 8003790:	d404      	bmi.n	800379c <_fflush_r+0x40>
 8003792:	059b      	lsls	r3, r3, #22
 8003794:	d402      	bmi.n	800379c <_fflush_r+0x40>
 8003796:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003798:	f000 f923 	bl	80039e2 <__retarget_lock_acquire_recursive>
 800379c:	0028      	movs	r0, r5
 800379e:	0021      	movs	r1, r4
 80037a0:	f7ff ff50 	bl	8003644 <__sflush_r>
 80037a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a6:	0005      	movs	r5, r0
 80037a8:	07db      	lsls	r3, r3, #31
 80037aa:	d4de      	bmi.n	800376a <_fflush_r+0xe>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	059b      	lsls	r3, r3, #22
 80037b0:	d4db      	bmi.n	800376a <_fflush_r+0xe>
 80037b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037b4:	f000 f916 	bl	80039e4 <__retarget_lock_release_recursive>
 80037b8:	e7d7      	b.n	800376a <_fflush_r+0xe>
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <_fflush_r+0x78>)
 80037bc:	429c      	cmp	r4, r3
 80037be:	d101      	bne.n	80037c4 <_fflush_r+0x68>
 80037c0:	68ac      	ldr	r4, [r5, #8]
 80037c2:	e7df      	b.n	8003784 <_fflush_r+0x28>
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <_fflush_r+0x7c>)
 80037c6:	429c      	cmp	r4, r3
 80037c8:	d1dc      	bne.n	8003784 <_fflush_r+0x28>
 80037ca:	68ec      	ldr	r4, [r5, #12]
 80037cc:	e7da      	b.n	8003784 <_fflush_r+0x28>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	08003ea8 	.word	0x08003ea8
 80037d4:	08003ec8 	.word	0x08003ec8
 80037d8:	08003e88 	.word	0x08003e88

080037dc <std>:
 80037dc:	2300      	movs	r3, #0
 80037de:	b510      	push	{r4, lr}
 80037e0:	0004      	movs	r4, r0
 80037e2:	6003      	str	r3, [r0, #0]
 80037e4:	6043      	str	r3, [r0, #4]
 80037e6:	6083      	str	r3, [r0, #8]
 80037e8:	8181      	strh	r1, [r0, #12]
 80037ea:	6643      	str	r3, [r0, #100]	; 0x64
 80037ec:	0019      	movs	r1, r3
 80037ee:	81c2      	strh	r2, [r0, #14]
 80037f0:	6103      	str	r3, [r0, #16]
 80037f2:	6143      	str	r3, [r0, #20]
 80037f4:	6183      	str	r3, [r0, #24]
 80037f6:	2208      	movs	r2, #8
 80037f8:	305c      	adds	r0, #92	; 0x5c
 80037fa:	f7ff fdd1 	bl	80033a0 <memset>
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <std+0x38>)
 8003800:	6263      	str	r3, [r4, #36]	; 0x24
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x3c>)
 8003804:	6224      	str	r4, [r4, #32]
 8003806:	62a3      	str	r3, [r4, #40]	; 0x28
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <std+0x40>)
 800380a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <std+0x44>)
 800380e:	6323      	str	r3, [r4, #48]	; 0x30
 8003810:	bd10      	pop	{r4, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	08003c35 	.word	0x08003c35
 8003818:	08003c5d 	.word	0x08003c5d
 800381c:	08003c95 	.word	0x08003c95
 8003820:	08003cc1 	.word	0x08003cc1

08003824 <_cleanup_r>:
 8003824:	b510      	push	{r4, lr}
 8003826:	4902      	ldr	r1, [pc, #8]	; (8003830 <_cleanup_r+0xc>)
 8003828:	f000 f8ba 	bl	80039a0 <_fwalk_reent>
 800382c:	bd10      	pop	{r4, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	0800375d 	.word	0x0800375d

08003834 <__sfmoreglue>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	2568      	movs	r5, #104	; 0x68
 8003838:	1e4a      	subs	r2, r1, #1
 800383a:	4355      	muls	r5, r2
 800383c:	000e      	movs	r6, r1
 800383e:	0029      	movs	r1, r5
 8003840:	3174      	adds	r1, #116	; 0x74
 8003842:	f000 f987 	bl	8003b54 <_malloc_r>
 8003846:	1e04      	subs	r4, r0, #0
 8003848:	d008      	beq.n	800385c <__sfmoreglue+0x28>
 800384a:	2100      	movs	r1, #0
 800384c:	002a      	movs	r2, r5
 800384e:	6001      	str	r1, [r0, #0]
 8003850:	6046      	str	r6, [r0, #4]
 8003852:	300c      	adds	r0, #12
 8003854:	60a0      	str	r0, [r4, #8]
 8003856:	3268      	adds	r2, #104	; 0x68
 8003858:	f7ff fda2 	bl	80033a0 <memset>
 800385c:	0020      	movs	r0, r4
 800385e:	bd70      	pop	{r4, r5, r6, pc}

08003860 <__sfp_lock_acquire>:
 8003860:	b510      	push	{r4, lr}
 8003862:	4802      	ldr	r0, [pc, #8]	; (800386c <__sfp_lock_acquire+0xc>)
 8003864:	f000 f8bd 	bl	80039e2 <__retarget_lock_acquire_recursive>
 8003868:	bd10      	pop	{r4, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	20001110 	.word	0x20001110

08003870 <__sfp_lock_release>:
 8003870:	b510      	push	{r4, lr}
 8003872:	4802      	ldr	r0, [pc, #8]	; (800387c <__sfp_lock_release+0xc>)
 8003874:	f000 f8b6 	bl	80039e4 <__retarget_lock_release_recursive>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20001110 	.word	0x20001110

08003880 <__sinit_lock_acquire>:
 8003880:	b510      	push	{r4, lr}
 8003882:	4802      	ldr	r0, [pc, #8]	; (800388c <__sinit_lock_acquire+0xc>)
 8003884:	f000 f8ad 	bl	80039e2 <__retarget_lock_acquire_recursive>
 8003888:	bd10      	pop	{r4, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	2000110b 	.word	0x2000110b

08003890 <__sinit_lock_release>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4802      	ldr	r0, [pc, #8]	; (800389c <__sinit_lock_release+0xc>)
 8003894:	f000 f8a6 	bl	80039e4 <__retarget_lock_release_recursive>
 8003898:	bd10      	pop	{r4, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	2000110b 	.word	0x2000110b

080038a0 <__sinit>:
 80038a0:	b513      	push	{r0, r1, r4, lr}
 80038a2:	0004      	movs	r4, r0
 80038a4:	f7ff ffec 	bl	8003880 <__sinit_lock_acquire>
 80038a8:	69a3      	ldr	r3, [r4, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <__sinit+0x14>
 80038ae:	f7ff ffef 	bl	8003890 <__sinit_lock_release>
 80038b2:	bd13      	pop	{r0, r1, r4, pc}
 80038b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80038b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80038b8:	6523      	str	r3, [r4, #80]	; 0x50
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <__sinit+0x68>)
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <__sinit+0x6c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	d101      	bne.n	80038cc <__sinit+0x2c>
 80038c8:	2301      	movs	r3, #1
 80038ca:	61a3      	str	r3, [r4, #24]
 80038cc:	0020      	movs	r0, r4
 80038ce:	f000 f81f 	bl	8003910 <__sfp>
 80038d2:	6060      	str	r0, [r4, #4]
 80038d4:	0020      	movs	r0, r4
 80038d6:	f000 f81b 	bl	8003910 <__sfp>
 80038da:	60a0      	str	r0, [r4, #8]
 80038dc:	0020      	movs	r0, r4
 80038de:	f000 f817 	bl	8003910 <__sfp>
 80038e2:	2200      	movs	r2, #0
 80038e4:	2104      	movs	r1, #4
 80038e6:	60e0      	str	r0, [r4, #12]
 80038e8:	6860      	ldr	r0, [r4, #4]
 80038ea:	f7ff ff77 	bl	80037dc <std>
 80038ee:	2201      	movs	r2, #1
 80038f0:	2109      	movs	r1, #9
 80038f2:	68a0      	ldr	r0, [r4, #8]
 80038f4:	f7ff ff72 	bl	80037dc <std>
 80038f8:	2202      	movs	r2, #2
 80038fa:	2112      	movs	r1, #18
 80038fc:	68e0      	ldr	r0, [r4, #12]
 80038fe:	f7ff ff6d 	bl	80037dc <std>
 8003902:	2301      	movs	r3, #1
 8003904:	61a3      	str	r3, [r4, #24]
 8003906:	e7d2      	b.n	80038ae <__sinit+0xe>
 8003908:	08003e84 	.word	0x08003e84
 800390c:	08003825 	.word	0x08003825

08003910 <__sfp>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	0007      	movs	r7, r0
 8003914:	f7ff ffa4 	bl	8003860 <__sfp_lock_acquire>
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <__sfp+0x88>)
 800391a:	681e      	ldr	r6, [r3, #0]
 800391c:	69b3      	ldr	r3, [r6, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <__sfp+0x18>
 8003922:	0030      	movs	r0, r6
 8003924:	f7ff ffbc 	bl	80038a0 <__sinit>
 8003928:	3648      	adds	r6, #72	; 0x48
 800392a:	68b4      	ldr	r4, [r6, #8]
 800392c:	6873      	ldr	r3, [r6, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	d504      	bpl.n	800393c <__sfp+0x2c>
 8003932:	6833      	ldr	r3, [r6, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <__sfp+0x6e>
 8003938:	6836      	ldr	r6, [r6, #0]
 800393a:	e7f6      	b.n	800392a <__sfp+0x1a>
 800393c:	220c      	movs	r2, #12
 800393e:	5ea5      	ldrsh	r5, [r4, r2]
 8003940:	2d00      	cmp	r5, #0
 8003942:	d11a      	bne.n	800397a <__sfp+0x6a>
 8003944:	0020      	movs	r0, r4
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <__sfp+0x8c>)
 8003948:	3058      	adds	r0, #88	; 0x58
 800394a:	60e3      	str	r3, [r4, #12]
 800394c:	6665      	str	r5, [r4, #100]	; 0x64
 800394e:	f000 f847 	bl	80039e0 <__retarget_lock_init_recursive>
 8003952:	f7ff ff8d 	bl	8003870 <__sfp_lock_release>
 8003956:	0020      	movs	r0, r4
 8003958:	2208      	movs	r2, #8
 800395a:	0029      	movs	r1, r5
 800395c:	6025      	str	r5, [r4, #0]
 800395e:	60a5      	str	r5, [r4, #8]
 8003960:	6065      	str	r5, [r4, #4]
 8003962:	6125      	str	r5, [r4, #16]
 8003964:	6165      	str	r5, [r4, #20]
 8003966:	61a5      	str	r5, [r4, #24]
 8003968:	305c      	adds	r0, #92	; 0x5c
 800396a:	f7ff fd19 	bl	80033a0 <memset>
 800396e:	6365      	str	r5, [r4, #52]	; 0x34
 8003970:	63a5      	str	r5, [r4, #56]	; 0x38
 8003972:	64a5      	str	r5, [r4, #72]	; 0x48
 8003974:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003976:	0020      	movs	r0, r4
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397a:	3468      	adds	r4, #104	; 0x68
 800397c:	e7d7      	b.n	800392e <__sfp+0x1e>
 800397e:	2104      	movs	r1, #4
 8003980:	0038      	movs	r0, r7
 8003982:	f7ff ff57 	bl	8003834 <__sfmoreglue>
 8003986:	1e04      	subs	r4, r0, #0
 8003988:	6030      	str	r0, [r6, #0]
 800398a:	d1d5      	bne.n	8003938 <__sfp+0x28>
 800398c:	f7ff ff70 	bl	8003870 <__sfp_lock_release>
 8003990:	230c      	movs	r3, #12
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	e7ef      	b.n	8003976 <__sfp+0x66>
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	08003e84 	.word	0x08003e84
 800399c:	ffff0001 	.word	0xffff0001

080039a0 <_fwalk_reent>:
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	0004      	movs	r4, r0
 80039a4:	0006      	movs	r6, r0
 80039a6:	2700      	movs	r7, #0
 80039a8:	9101      	str	r1, [sp, #4]
 80039aa:	3448      	adds	r4, #72	; 0x48
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	68a5      	ldr	r5, [r4, #8]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	9b00      	ldr	r3, [sp, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	d504      	bpl.n	80039c4 <_fwalk_reent+0x24>
 80039ba:	6824      	ldr	r4, [r4, #0]
 80039bc:	2c00      	cmp	r4, #0
 80039be:	d1f5      	bne.n	80039ac <_fwalk_reent+0xc>
 80039c0:	0038      	movs	r0, r7
 80039c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039c4:	89ab      	ldrh	r3, [r5, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d908      	bls.n	80039dc <_fwalk_reent+0x3c>
 80039ca:	220e      	movs	r2, #14
 80039cc:	5eab      	ldrsh	r3, [r5, r2]
 80039ce:	3301      	adds	r3, #1
 80039d0:	d004      	beq.n	80039dc <_fwalk_reent+0x3c>
 80039d2:	0029      	movs	r1, r5
 80039d4:	0030      	movs	r0, r6
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	4798      	blx	r3
 80039da:	4307      	orrs	r7, r0
 80039dc:	3568      	adds	r5, #104	; 0x68
 80039de:	e7e8      	b.n	80039b2 <_fwalk_reent+0x12>

080039e0 <__retarget_lock_init_recursive>:
 80039e0:	4770      	bx	lr

080039e2 <__retarget_lock_acquire_recursive>:
 80039e2:	4770      	bx	lr

080039e4 <__retarget_lock_release_recursive>:
 80039e4:	4770      	bx	lr
	...

080039e8 <__swhatbuf_r>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	000e      	movs	r6, r1
 80039ec:	001d      	movs	r5, r3
 80039ee:	230e      	movs	r3, #14
 80039f0:	5ec9      	ldrsh	r1, [r1, r3]
 80039f2:	0014      	movs	r4, r2
 80039f4:	b096      	sub	sp, #88	; 0x58
 80039f6:	2900      	cmp	r1, #0
 80039f8:	da07      	bge.n	8003a0a <__swhatbuf_r+0x22>
 80039fa:	2300      	movs	r3, #0
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	89b3      	ldrh	r3, [r6, #12]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	d411      	bmi.n	8003a28 <__swhatbuf_r+0x40>
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	e00f      	b.n	8003a2a <__swhatbuf_r+0x42>
 8003a0a:	466a      	mov	r2, sp
 8003a0c:	f000 f984 	bl	8003d18 <_fstat_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	dbf2      	blt.n	80039fa <__swhatbuf_r+0x12>
 8003a14:	23f0      	movs	r3, #240	; 0xf0
 8003a16:	9901      	ldr	r1, [sp, #4]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	4019      	ands	r1, r3
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <__swhatbuf_r+0x4c>)
 8003a1e:	18c9      	adds	r1, r1, r3
 8003a20:	424b      	negs	r3, r1
 8003a22:	4159      	adcs	r1, r3
 8003a24:	6029      	str	r1, [r5, #0]
 8003a26:	e7ed      	b.n	8003a04 <__swhatbuf_r+0x1c>
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	b016      	add	sp, #88	; 0x58
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	ffffe000 	.word	0xffffe000

08003a38 <__smakebuf_r>:
 8003a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a3a:	2602      	movs	r6, #2
 8003a3c:	898b      	ldrh	r3, [r1, #12]
 8003a3e:	0005      	movs	r5, r0
 8003a40:	000c      	movs	r4, r1
 8003a42:	4233      	tst	r3, r6
 8003a44:	d006      	beq.n	8003a54 <__smakebuf_r+0x1c>
 8003a46:	0023      	movs	r3, r4
 8003a48:	3347      	adds	r3, #71	; 0x47
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	6163      	str	r3, [r4, #20]
 8003a52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003a54:	466a      	mov	r2, sp
 8003a56:	ab01      	add	r3, sp, #4
 8003a58:	f7ff ffc6 	bl	80039e8 <__swhatbuf_r>
 8003a5c:	9900      	ldr	r1, [sp, #0]
 8003a5e:	0007      	movs	r7, r0
 8003a60:	0028      	movs	r0, r5
 8003a62:	f000 f877 	bl	8003b54 <_malloc_r>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d108      	bne.n	8003a7c <__smakebuf_r+0x44>
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	5ea3      	ldrsh	r3, [r4, r2]
 8003a6e:	059a      	lsls	r2, r3, #22
 8003a70:	d4ef      	bmi.n	8003a52 <__smakebuf_r+0x1a>
 8003a72:	2203      	movs	r2, #3
 8003a74:	4393      	bics	r3, r2
 8003a76:	431e      	orrs	r6, r3
 8003a78:	81a6      	strh	r6, [r4, #12]
 8003a7a:	e7e4      	b.n	8003a46 <__smakebuf_r+0xe>
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <__smakebuf_r+0x84>)
 8003a7e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	89a2      	ldrh	r2, [r4, #12]
 8003a84:	6020      	str	r0, [r4, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	9b00      	ldr	r3, [sp, #0]
 8003a8c:	6120      	str	r0, [r4, #16]
 8003a8e:	6163      	str	r3, [r4, #20]
 8003a90:	9b01      	ldr	r3, [sp, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <__smakebuf_r+0x7a>
 8003a96:	0028      	movs	r0, r5
 8003a98:	230e      	movs	r3, #14
 8003a9a:	5ee1      	ldrsh	r1, [r4, r3]
 8003a9c:	f000 f94e 	bl	8003d3c <_isatty_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d006      	beq.n	8003ab2 <__smakebuf_r+0x7a>
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	2301      	movs	r3, #1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	81a3      	strh	r3, [r4, #12]
 8003ab2:	89a0      	ldrh	r0, [r4, #12]
 8003ab4:	4307      	orrs	r7, r0
 8003ab6:	81a7      	strh	r7, [r4, #12]
 8003ab8:	e7cb      	b.n	8003a52 <__smakebuf_r+0x1a>
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	08003825 	.word	0x08003825

08003ac0 <_free_r>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	0005      	movs	r5, r0
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d010      	beq.n	8003aea <_free_r+0x2a>
 8003ac8:	1f0c      	subs	r4, r1, #4
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da00      	bge.n	8003ad2 <_free_r+0x12>
 8003ad0:	18e4      	adds	r4, r4, r3
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	f000 f958 	bl	8003d88 <__malloc_lock>
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <_free_r+0x90>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <_free_r+0x2c>
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6014      	str	r4, [r2, #0]
 8003ae4:	0028      	movs	r0, r5
 8003ae6:	f000 f957 	bl	8003d98 <__malloc_unlock>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	d908      	bls.n	8003b02 <_free_r+0x42>
 8003af0:	6821      	ldr	r1, [r4, #0]
 8003af2:	1860      	adds	r0, r4, r1
 8003af4:	4283      	cmp	r3, r0
 8003af6:	d1f3      	bne.n	8003ae0 <_free_r+0x20>
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	1841      	adds	r1, r0, r1
 8003afe:	6021      	str	r1, [r4, #0]
 8003b00:	e7ee      	b.n	8003ae0 <_free_r+0x20>
 8003b02:	001a      	movs	r2, r3
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <_free_r+0x4e>
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	d9f9      	bls.n	8003b02 <_free_r+0x42>
 8003b0e:	6811      	ldr	r1, [r2, #0]
 8003b10:	1850      	adds	r0, r2, r1
 8003b12:	42a0      	cmp	r0, r4
 8003b14:	d10b      	bne.n	8003b2e <_free_r+0x6e>
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1809      	adds	r1, r1, r0
 8003b1a:	1850      	adds	r0, r2, r1
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	d1e0      	bne.n	8003ae4 <_free_r+0x24>
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	1841      	adds	r1, r0, r1
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	6053      	str	r3, [r2, #4]
 8003b2c:	e7da      	b.n	8003ae4 <_free_r+0x24>
 8003b2e:	42a0      	cmp	r0, r4
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x78>
 8003b32:	230c      	movs	r3, #12
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	e7d5      	b.n	8003ae4 <_free_r+0x24>
 8003b38:	6821      	ldr	r1, [r4, #0]
 8003b3a:	1860      	adds	r0, r4, r1
 8003b3c:	4283      	cmp	r3, r0
 8003b3e:	d103      	bne.n	8003b48 <_free_r+0x88>
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	1841      	adds	r1, r0, r1
 8003b46:	6021      	str	r1, [r4, #0]
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	6054      	str	r4, [r2, #4]
 8003b4c:	e7ca      	b.n	8003ae4 <_free_r+0x24>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	20001028 	.word	0x20001028

08003b54 <_malloc_r>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	2303      	movs	r3, #3
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	439d      	bics	r5, r3
 8003b5c:	3508      	adds	r5, #8
 8003b5e:	0006      	movs	r6, r0
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	d21f      	bcs.n	8003ba4 <_malloc_r+0x50>
 8003b64:	250c      	movs	r5, #12
 8003b66:	42a9      	cmp	r1, r5
 8003b68:	d81e      	bhi.n	8003ba8 <_malloc_r+0x54>
 8003b6a:	0030      	movs	r0, r6
 8003b6c:	f000 f90c 	bl	8003d88 <__malloc_lock>
 8003b70:	4925      	ldr	r1, [pc, #148]	; (8003c08 <_malloc_r+0xb4>)
 8003b72:	680a      	ldr	r2, [r1, #0]
 8003b74:	0014      	movs	r4, r2
 8003b76:	2c00      	cmp	r4, #0
 8003b78:	d11a      	bne.n	8003bb0 <_malloc_r+0x5c>
 8003b7a:	4f24      	ldr	r7, [pc, #144]	; (8003c0c <_malloc_r+0xb8>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <_malloc_r+0x38>
 8003b82:	0021      	movs	r1, r4
 8003b84:	0030      	movs	r0, r6
 8003b86:	f000 f843 	bl	8003c10 <_sbrk_r>
 8003b8a:	6038      	str	r0, [r7, #0]
 8003b8c:	0029      	movs	r1, r5
 8003b8e:	0030      	movs	r0, r6
 8003b90:	f000 f83e 	bl	8003c10 <_sbrk_r>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d12b      	bne.n	8003bf0 <_malloc_r+0x9c>
 8003b98:	230c      	movs	r3, #12
 8003b9a:	0030      	movs	r0, r6
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	f000 f8fb 	bl	8003d98 <__malloc_unlock>
 8003ba2:	e003      	b.n	8003bac <_malloc_r+0x58>
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	dade      	bge.n	8003b66 <_malloc_r+0x12>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	2000      	movs	r0, #0
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	1b5b      	subs	r3, r3, r5
 8003bb4:	d419      	bmi.n	8003bea <_malloc_r+0x96>
 8003bb6:	2b0b      	cmp	r3, #11
 8003bb8:	d903      	bls.n	8003bc2 <_malloc_r+0x6e>
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	18e4      	adds	r4, r4, r3
 8003bbe:	6025      	str	r5, [r4, #0]
 8003bc0:	e003      	b.n	8003bca <_malloc_r+0x76>
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	42a2      	cmp	r2, r4
 8003bc6:	d10e      	bne.n	8003be6 <_malloc_r+0x92>
 8003bc8:	600b      	str	r3, [r1, #0]
 8003bca:	0030      	movs	r0, r6
 8003bcc:	f000 f8e4 	bl	8003d98 <__malloc_unlock>
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	300b      	adds	r0, #11
 8003bd6:	1d23      	adds	r3, r4, #4
 8003bd8:	4390      	bics	r0, r2
 8003bda:	1ac2      	subs	r2, r0, r3
 8003bdc:	4298      	cmp	r0, r3
 8003bde:	d0e6      	beq.n	8003bae <_malloc_r+0x5a>
 8003be0:	1a1b      	subs	r3, r3, r0
 8003be2:	50a3      	str	r3, [r4, r2]
 8003be4:	e7e3      	b.n	8003bae <_malloc_r+0x5a>
 8003be6:	6053      	str	r3, [r2, #4]
 8003be8:	e7ef      	b.n	8003bca <_malloc_r+0x76>
 8003bea:	0022      	movs	r2, r4
 8003bec:	6864      	ldr	r4, [r4, #4]
 8003bee:	e7c2      	b.n	8003b76 <_malloc_r+0x22>
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	1cc4      	adds	r4, r0, #3
 8003bf4:	439c      	bics	r4, r3
 8003bf6:	42a0      	cmp	r0, r4
 8003bf8:	d0e1      	beq.n	8003bbe <_malloc_r+0x6a>
 8003bfa:	1a21      	subs	r1, r4, r0
 8003bfc:	0030      	movs	r0, r6
 8003bfe:	f000 f807 	bl	8003c10 <_sbrk_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d1db      	bne.n	8003bbe <_malloc_r+0x6a>
 8003c06:	e7c7      	b.n	8003b98 <_malloc_r+0x44>
 8003c08:	20001028 	.word	0x20001028
 8003c0c:	2000102c 	.word	0x2000102c

08003c10 <_sbrk_r>:
 8003c10:	2300      	movs	r3, #0
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	4d06      	ldr	r5, [pc, #24]	; (8003c30 <_sbrk_r+0x20>)
 8003c16:	0004      	movs	r4, r0
 8003c18:	0008      	movs	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fc fdb8 	bl	8000790 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d103      	bne.n	8003c2c <_sbrk_r+0x1c>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d000      	beq.n	8003c2c <_sbrk_r+0x1c>
 8003c2a:	6023      	str	r3, [r4, #0]
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20001114 	.word	0x20001114

08003c34 <__sread>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	000c      	movs	r4, r1
 8003c38:	250e      	movs	r5, #14
 8003c3a:	5f49      	ldrsh	r1, [r1, r5]
 8003c3c:	f000 f8b4 	bl	8003da8 <_read_r>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	db03      	blt.n	8003c4c <__sread+0x18>
 8003c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c46:	181b      	adds	r3, r3, r0
 8003c48:	6563      	str	r3, [r4, #84]	; 0x54
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	4a02      	ldr	r2, [pc, #8]	; (8003c58 <__sread+0x24>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	e7f9      	b.n	8003c4a <__sread+0x16>
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	ffffefff 	.word	0xffffefff

08003c5c <__swrite>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	001f      	movs	r7, r3
 8003c60:	898b      	ldrh	r3, [r1, #12]
 8003c62:	0005      	movs	r5, r0
 8003c64:	000c      	movs	r4, r1
 8003c66:	0016      	movs	r6, r2
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	d505      	bpl.n	8003c78 <__swrite+0x1c>
 8003c6c:	230e      	movs	r3, #14
 8003c6e:	5ec9      	ldrsh	r1, [r1, r3]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2302      	movs	r3, #2
 8003c74:	f000 f874 	bl	8003d60 <_lseek_r>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <__swrite+0x34>)
 8003c7c:	0028      	movs	r0, r5
 8003c7e:	4013      	ands	r3, r2
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	0032      	movs	r2, r6
 8003c84:	230e      	movs	r3, #14
 8003c86:	5ee1      	ldrsh	r1, [r4, r3]
 8003c88:	003b      	movs	r3, r7
 8003c8a:	f000 f81f 	bl	8003ccc <_write_r>
 8003c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c90:	ffffefff 	.word	0xffffefff

08003c94 <__sseek>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	000c      	movs	r4, r1
 8003c98:	250e      	movs	r5, #14
 8003c9a:	5f49      	ldrsh	r1, [r1, r5]
 8003c9c:	f000 f860 	bl	8003d60 <_lseek_r>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	1c42      	adds	r2, r0, #1
 8003ca4:	d103      	bne.n	8003cae <__sseek+0x1a>
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <__sseek+0x28>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	0152      	lsls	r2, r2, #5
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8003cb8:	e7f8      	b.n	8003cac <__sseek+0x18>
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	ffffefff 	.word	0xffffefff

08003cc0 <__sclose>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	5ec9      	ldrsh	r1, [r1, r3]
 8003cc6:	f000 f815 	bl	8003cf4 <_close_r>
 8003cca:	bd10      	pop	{r4, pc}

08003ccc <_write_r>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	0004      	movs	r4, r0
 8003cd0:	0008      	movs	r0, r1
 8003cd2:	0011      	movs	r1, r2
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	4d05      	ldr	r5, [pc, #20]	; (8003cf0 <_write_r+0x24>)
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	f7fc fd0f 	bl	80006fe <_write>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d103      	bne.n	8003cec <_write_r+0x20>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d000      	beq.n	8003cec <_write_r+0x20>
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	20001114 	.word	0x20001114

08003cf4 <_close_r>:
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	4d06      	ldr	r5, [pc, #24]	; (8003d14 <_close_r+0x20>)
 8003cfa:	0004      	movs	r4, r0
 8003cfc:	0008      	movs	r0, r1
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	f7fc fd19 	bl	8000736 <_close>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d103      	bne.n	8003d10 <_close_r+0x1c>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d000      	beq.n	8003d10 <_close_r+0x1c>
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20001114 	.word	0x20001114

08003d18 <_fstat_r>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b570      	push	{r4, r5, r6, lr}
 8003d1c:	4d06      	ldr	r5, [pc, #24]	; (8003d38 <_fstat_r+0x20>)
 8003d1e:	0004      	movs	r4, r0
 8003d20:	0008      	movs	r0, r1
 8003d22:	0011      	movs	r1, r2
 8003d24:	602b      	str	r3, [r5, #0]
 8003d26:	f7fc fd10 	bl	800074a <_fstat>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d103      	bne.n	8003d36 <_fstat_r+0x1e>
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d000      	beq.n	8003d36 <_fstat_r+0x1e>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	20001114 	.word	0x20001114

08003d3c <_isatty_r>:
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	b570      	push	{r4, r5, r6, lr}
 8003d40:	4d06      	ldr	r5, [pc, #24]	; (8003d5c <_isatty_r+0x20>)
 8003d42:	0004      	movs	r4, r0
 8003d44:	0008      	movs	r0, r1
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	f7fc fd0d 	bl	8000766 <_isatty>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_isatty_r+0x1c>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d000      	beq.n	8003d58 <_isatty_r+0x1c>
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20001114 	.word	0x20001114

08003d60 <_lseek_r>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	0004      	movs	r4, r0
 8003d64:	0008      	movs	r0, r1
 8003d66:	0011      	movs	r1, r2
 8003d68:	001a      	movs	r2, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4d05      	ldr	r5, [pc, #20]	; (8003d84 <_lseek_r+0x24>)
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7fc fd02 	bl	8000778 <_lseek>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d103      	bne.n	8003d80 <_lseek_r+0x20>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d000      	beq.n	8003d80 <_lseek_r+0x20>
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20001114 	.word	0x20001114

08003d88 <__malloc_lock>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4802      	ldr	r0, [pc, #8]	; (8003d94 <__malloc_lock+0xc>)
 8003d8c:	f7ff fe29 	bl	80039e2 <__retarget_lock_acquire_recursive>
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	2000110c 	.word	0x2000110c

08003d98 <__malloc_unlock>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4802      	ldr	r0, [pc, #8]	; (8003da4 <__malloc_unlock+0xc>)
 8003d9c:	f7ff fe22 	bl	80039e4 <__retarget_lock_release_recursive>
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	2000110c 	.word	0x2000110c

08003da8 <_read_r>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	0008      	movs	r0, r1
 8003dae:	0011      	movs	r1, r2
 8003db0:	001a      	movs	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	4d05      	ldr	r5, [pc, #20]	; (8003dcc <_read_r+0x24>)
 8003db6:	602b      	str	r3, [r5, #0]
 8003db8:	f7fc fc84 	bl	80006c4 <_read>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d103      	bne.n	8003dc8 <_read_r+0x20>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d000      	beq.n	8003dc8 <_read_r+0x20>
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	20001114 	.word	0x20001114

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
