
pwm_icu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08000f40  08000f40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fbc  08000fbc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fbc  08000fbc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fbc  08000fbc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000064  08001028  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08001028  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003042  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000933  00000000  00000000  000230ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00023ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a613  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fbf  00000000  00000000  0002e303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000321c2  00000000  00000000  000302c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00062484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b28  00000000  00000000  000624d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000f28 	.word	0x08000f28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08000f28 	.word	0x08000f28

08000108 <main>:

static void uart_callback();

int timestamp[100];int cnt=0;
int main()
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	tim3_pc8_output_compare_init();
 800010c:	f000 f8ca 	bl	80002a4 <tim3_pc8_output_compare_init>
	tim1_a8_input_compare_init();
 8000110:	f000 f91e 	bl	8000350 <tim1_a8_input_compare_init>
	printf("hello please enter A\n");
 8000114:	4b11      	ldr	r3, [pc, #68]	; (800015c <main+0x54>)
 8000116:	0018      	movs	r0, r3
 8000118:	f000 fa68 	bl	80005ec <puts>
	while(1)
	{
		while(!(TIM1->SR & TIM1_SR));//WAIT TILL CAPTURE HAPPENS
 800011c:	46c0      	nop			; (mov r8, r8)
 800011e:	4b10      	ldr	r3, [pc, #64]	; (8000160 <main+0x58>)
 8000120:	691b      	ldr	r3, [r3, #16]
 8000122:	2202      	movs	r2, #2
 8000124:	4013      	ands	r3, r2
 8000126:	d0fa      	beq.n	800011e <main+0x16>
		TIM1->SR &= ~TIM1_SR;
 8000128:	4b0d      	ldr	r3, [pc, #52]	; (8000160 <main+0x58>)
 800012a:	691a      	ldr	r2, [r3, #16]
 800012c:	4b0c      	ldr	r3, [pc, #48]	; (8000160 <main+0x58>)
 800012e:	2102      	movs	r1, #2
 8000130:	438a      	bics	r2, r1
 8000132:	611a      	str	r2, [r3, #16]
		timestamp[cnt++] = TIM1->CNT;
 8000134:	4b0a      	ldr	r3, [pc, #40]	; (8000160 <main+0x58>)
 8000136:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000138:	4b0a      	ldr	r3, [pc, #40]	; (8000164 <main+0x5c>)
 800013a:	681b      	ldr	r3, [r3, #0]
 800013c:	1c59      	adds	r1, r3, #1
 800013e:	4a09      	ldr	r2, [pc, #36]	; (8000164 <main+0x5c>)
 8000140:	6011      	str	r1, [r2, #0]
 8000142:	0001      	movs	r1, r0
 8000144:	4a08      	ldr	r2, [pc, #32]	; (8000168 <main+0x60>)
 8000146:	009b      	lsls	r3, r3, #2
 8000148:	5099      	str	r1, [r3, r2]
		if(cnt>99) cnt=0;
 800014a:	4b06      	ldr	r3, [pc, #24]	; (8000164 <main+0x5c>)
 800014c:	681b      	ldr	r3, [r3, #0]
 800014e:	2b63      	cmp	r3, #99	; 0x63
 8000150:	dde4      	ble.n	800011c <main+0x14>
 8000152:	4b04      	ldr	r3, [pc, #16]	; (8000164 <main+0x5c>)
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
		while(!(TIM1->SR & TIM1_SR));//WAIT TILL CAPTURE HAPPENS
 8000158:	e7e0      	b.n	800011c <main+0x14>
 800015a:	46c0      	nop			; (mov r8, r8)
 800015c:	08000f40 	.word	0x08000f40
 8000160:	40012c00 	.word	0x40012c00
 8000164:	20000080 	.word	0x20000080
 8000168:	20000090 	.word	0x20000090

0800016c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b086      	sub	sp, #24
 8000170:	af00      	add	r7, sp, #0
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	e00a      	b.n	8000194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800017e:	e000      	b.n	8000182 <_read+0x16>
 8000180:	bf00      	nop
 8000182:	0001      	movs	r1, r0
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	1c5a      	adds	r2, r3, #1
 8000188:	60ba      	str	r2, [r7, #8]
 800018a:	b2ca      	uxtb	r2, r1
 800018c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	3301      	adds	r3, #1
 8000192:	617b      	str	r3, [r7, #20]
 8000194:	697a      	ldr	r2, [r7, #20]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	429a      	cmp	r2, r3
 800019a:	dbf0      	blt.n	800017e <_read+0x12>
  }

  return len;
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	0018      	movs	r0, r3
 80001a0:	46bd      	mov	sp, r7
 80001a2:	b006      	add	sp, #24
 80001a4:	bd80      	pop	{r7, pc}

080001a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80001a6:	b580      	push	{r7, lr}
 80001a8:	b086      	sub	sp, #24
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	60f8      	str	r0, [r7, #12]
 80001ae:	60b9      	str	r1, [r7, #8]
 80001b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	0018      	movs	r0, r3
 80001c2:	f000 f91f 	bl	8000404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x12>
  }
  return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	0018      	movs	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	b006      	add	sp, #24
 80001dc:	bd80      	pop	{r7, pc}

080001de <_close>:

int _close(int file)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b082      	sub	sp, #8
 80001e2:	af00      	add	r7, sp, #0
 80001e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80001e6:	2301      	movs	r3, #1
 80001e8:	425b      	negs	r3, r3
}
 80001ea:	0018      	movs	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	b002      	add	sp, #8
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b082      	sub	sp, #8
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	6078      	str	r0, [r7, #4]
 80001fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	2280      	movs	r2, #128	; 0x80
 8000200:	0192      	lsls	r2, r2, #6
 8000202:	605a      	str	r2, [r3, #4]
  return 0;
 8000204:	2300      	movs	r3, #0
}
 8000206:	0018      	movs	r0, r3
 8000208:	46bd      	mov	sp, r7
 800020a:	b002      	add	sp, #8
 800020c:	bd80      	pop	{r7, pc}

0800020e <_isatty>:

int _isatty(int file)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000216:	2301      	movs	r3, #1
}
 8000218:	0018      	movs	r0, r3
 800021a:	46bd      	mov	sp, r7
 800021c:	b002      	add	sp, #8
 800021e:	bd80      	pop	{r7, pc}

08000220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800022c:	2300      	movs	r3, #0
}
 800022e:	0018      	movs	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	b004      	add	sp, #16
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <_sbrk+0x5c>)
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <_sbrk+0x60>)
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <_sbrk+0x64>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d102      	bne.n	800025a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <_sbrk+0x64>)
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <_sbrk+0x68>)
 8000258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <_sbrk+0x64>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	18d3      	adds	r3, r2, r3
 8000262:	693a      	ldr	r2, [r7, #16]
 8000264:	429a      	cmp	r2, r3
 8000266:	d207      	bcs.n	8000278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000268:	f000 f91c 	bl	80004a4 <__errno>
 800026c:	0003      	movs	r3, r0
 800026e:	220c      	movs	r2, #12
 8000270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000272:	2301      	movs	r3, #1
 8000274:	425b      	negs	r3, r3
 8000276:	e009      	b.n	800028c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <_sbrk+0x64>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <_sbrk+0x64>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	18d2      	adds	r2, r2, r3
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <_sbrk+0x64>)
 8000288:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	b006      	add	sp, #24
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20002000 	.word	0x20002000
 8000298:	00000400 	.word	0x00000400
 800029c:	20000084 	.word	0x20000084
 80002a0:	20000230 	.word	0x20000230

080002a4 <tim3_pc8_output_compare_init>:
	TIM3->CR1 |= TIM3_CNT_EN;
}


void tim3_pc8_output_compare_init()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/*enable clock access for gpio c*/
	RCC->AHBENR |= GPIOC_EN;
 80002a8:	4b23      	ldr	r3, [pc, #140]	; (8000338 <tim3_pc8_output_compare_init+0x94>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <tim3_pc8_output_compare_init+0x94>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	0309      	lsls	r1, r1, #12
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
	/*set pc8 to alternate function mode*/
	GPIOC->MODER &= ~(1<<16);
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b20      	ldr	r3, [pc, #128]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002bc:	4920      	ldr	r1, [pc, #128]	; (8000340 <tim3_pc8_output_compare_init+0x9c>)
 80002be:	400a      	ands	r2, r1
 80002c0:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1<<17);
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	0289      	lsls	r1, r1, #10
 80002cc:	430a      	orrs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
	/*set pc8 alternate function to tim3 ch3*/
	GPIOC->AFR[1] &= ~(1<<0);
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002d6:	2101      	movs	r1, #1
 80002d8:	438a      	bics	r2, r1
 80002da:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(1<<1);
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002e2:	2102      	movs	r1, #2
 80002e4:	438a      	bics	r2, r1
 80002e6:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(1<<2);
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <tim3_pc8_output_compare_init+0x98>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	438a      	bics	r2, r1
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
	/*enable clock*/
	RCC->APB1ENR |= TIM3_EN;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <tim3_pc8_output_compare_init+0x94>)
 80002f6:	69da      	ldr	r2, [r3, #28]
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <tim3_pc8_output_compare_init+0x94>)
 80002fa:	2102      	movs	r1, #2
 80002fc:	430a      	orrs	r2, r1
 80002fe:	61da      	str	r2, [r3, #28]
	/*set prescalar*/
	TIM3->PSC = 4800-1;//48000000/4800 = 10000
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <tim3_pc8_output_compare_init+0xa4>)
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
	/*set auto reload*/
	TIM3->ARR = 1000 -1; // 10000/10000 = 1HZ
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000308:	4a10      	ldr	r2, [pc, #64]	; (800034c <tim3_pc8_output_compare_init+0xa8>)
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
	/*set output compare toggle mode*/
	TIM3->CCMR2 = OC_TOGGLE;
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 800030e:	2230      	movs	r2, #48	; 0x30
 8000310:	61da      	str	r2, [r3, #28]
	//ena ble tim3 ch3 in compare mode//
	TIM3->CCER |= TIM3_CH3_OE;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0049      	lsls	r1, r1, #1
 800031c:	430a      	orrs	r2, r1
 800031e:	621a      	str	r2, [r3, #32]
	/*clear timer counter*/
	TIM3->CNT = 0;
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
	/*enable the timer*/
	TIM3->CR1 |= TIM3_CNT_EN;
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <tim3_pc8_output_compare_init+0xa0>)
 800032c:	2101      	movs	r1, #1
 800032e:	430a      	orrs	r2, r1
 8000330:	601a      	str	r2, [r3, #0]

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000
 800033c:	48000800 	.word	0x48000800
 8000340:	fffeffff 	.word	0xfffeffff
 8000344:	40000400 	.word	0x40000400
 8000348:	000012bf 	.word	0x000012bf
 800034c:	000003e7 	.word	0x000003e7

08000350 <tim1_a8_input_compare_init>:


void tim1_a8_input_compare_init()//tim1ch1
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	//enable clock to gpio a//
	RCC->AHBENR |= GPIOA_EN;
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <tim1_a8_input_compare_init+0xa4>)
 8000356:	695a      	ldr	r2, [r3, #20]
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <tim1_a8_input_compare_init+0xa4>)
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	0289      	lsls	r1, r1, #10
 800035e:	430a      	orrs	r2, r1
 8000360:	615a      	str	r2, [r3, #20]
	//pa8 to alternate fun//
	GPIOA->MODER &= ~(1<<16);
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	2390      	movs	r3, #144	; 0x90
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	4922      	ldr	r1, [pc, #136]	; (80003f8 <tim1_a8_input_compare_init+0xa8>)
 800036e:	400a      	ands	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1<<17);
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	2390      	movs	r3, #144	; 0x90
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	0289      	lsls	r1, r1, #10
 8000380:	430a      	orrs	r2, r1
 8000382:	601a      	str	r2, [r3, #0]
	//pa8 to tim1 ch1//
	GPIOA->AFR[1] &= ~(1<<0);
 8000384:	2390      	movs	r3, #144	; 0x90
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800038a:	2390      	movs	r3, #144	; 0x90
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	2101      	movs	r1, #1
 8000390:	438a      	bics	r2, r1
 8000392:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= (1<<1);
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800039a:	2390      	movs	r3, #144	; 0x90
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	2102      	movs	r1, #2
 80003a0:	430a      	orrs	r2, r1
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1<<2);
 80003a4:	2390      	movs	r3, #144	; 0x90
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003aa:	2390      	movs	r3, #144	; 0x90
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2104      	movs	r1, #4
 80003b0:	438a      	bics	r2, r1
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
	//enable clock access to tim1//
	RCC->APB2ENR |= TIM1_EN;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <tim1_a8_input_compare_init+0xa4>)
 80003b6:	699a      	ldr	r2, [r3, #24]
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <tim1_a8_input_compare_init+0xa4>)
 80003ba:	2180      	movs	r1, #128	; 0x80
 80003bc:	0109      	lsls	r1, r1, #4
 80003be:	430a      	orrs	r2, r1
 80003c0:	619a      	str	r2, [r3, #24]
	//set prescalar//
	TIM1->PSC = 4800-1;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <tim1_a8_input_compare_init+0xb0>)
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
	//set ch1 to capture at every edge//
	TIM1->CCMR1 |= TIM1_CCMR;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003ca:	699a      	ldr	r2, [r3, #24]
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003ce:	2101      	movs	r1, #1
 80003d0:	430a      	orrs	r2, r1
 80003d2:	619a      	str	r2, [r3, #24]
	//enabel ch1 to capture at rising edge//
	TIM1->CCER |= TIM1_RISING;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003d6:	6a1a      	ldr	r2, [r3, #32]
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003da:	2101      	movs	r1, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	621a      	str	r2, [r3, #32]
	//enable timer1//
	TIM1->CR1 |= TIM3_CNT_EN;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <tim1_a8_input_compare_init+0xac>)
 80003e6:	2101      	movs	r1, #1
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000
 80003f8:	fffeffff 	.word	0xfffeffff
 80003fc:	40012c00 	.word	0x40012c00
 8000400:	000012bf 	.word	0x000012bf

08000404 <__io_putchar>:
#define DMA_CH_2_SEL	(1U<<5)
#define DMA_CH_2_MINC	(1U<<7)
#define DMA_CH_DIR		(1U<<4)

int __io_putchar(int ch)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	b2db      	uxtb	r3, r3
 8000410:	0018      	movs	r0, r3
 8000412:	f000 f805 	bl	8000420 <uart1_write>
	return ch;
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}

08000420 <uart1_write>:
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

void uart1_write(uint8_t ch)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	0002      	movs	r2, r0
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	701a      	strb	r2, [r3, #0]

	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <uart1_write+0x2c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	4013      	ands	r3, r2
 8000436:	d0fa      	beq.n	800042e <uart1_write+0xe>
	USART1->TDR = (ch&0xff);
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <uart1_write+0x2c>)
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b29b      	uxth	r3, r3
 8000440:	8513      	strh	r3, [r2, #40]	; 0x28


}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40013800 	.word	0x40013800

08000450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000452:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000454:	e000      	b.n	8000458 <Reset_Handler+0x8>
 8000456:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047e:	f000 f817 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff fe41 	bl	8000108 <main>

08000486 <LoopForever>:

LoopForever:
  b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   r0, =_estack
 8000488:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000494:	08000fc4 	.word	0x08000fc4
  ldr r2, =_sbss
 8000498:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800049c:	20000230 	.word	0x20000230

080004a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC_IRQHandler>
	...

080004a4 <__errno>:
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <__errno+0x8>)
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000000 	.word	0x20000000

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2600      	movs	r6, #0
 80004b4:	4d0c      	ldr	r5, [pc, #48]	; (80004e8 <__libc_init_array+0x38>)
 80004b6:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <__libc_init_array+0x3c>)
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	2600      	movs	r6, #0
 80004c2:	f000 fd31 	bl	8000f28 <_init>
 80004c6:	4d0a      	ldr	r5, [pc, #40]	; (80004f0 <__libc_init_array+0x40>)
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <__libc_init_array+0x44>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	00b3      	lsls	r3, r6, #2
 80004d6:	58eb      	ldr	r3, [r5, r3]
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	00b3      	lsls	r3, r6, #2
 80004e0:	58eb      	ldr	r3, [r5, r3]
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000fbc 	.word	0x08000fbc
 80004ec:	08000fbc 	.word	0x08000fbc
 80004f0:	08000fbc 	.word	0x08000fbc
 80004f4:	08000fc0 	.word	0x08000fc0

080004f8 <memset>:
 80004f8:	0003      	movs	r3, r0
 80004fa:	1882      	adds	r2, r0, r2
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d100      	bne.n	8000502 <memset+0xa>
 8000500:	4770      	bx	lr
 8000502:	7019      	strb	r1, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	e7f9      	b.n	80004fc <memset+0x4>

08000508 <_puts_r>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	0005      	movs	r5, r0
 800050c:	000e      	movs	r6, r1
 800050e:	2800      	cmp	r0, #0
 8000510:	d004      	beq.n	800051c <_puts_r+0x14>
 8000512:	6983      	ldr	r3, [r0, #24]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d101      	bne.n	800051c <_puts_r+0x14>
 8000518:	f000 fa6e 	bl	80009f8 <__sinit>
 800051c:	69ab      	ldr	r3, [r5, #24]
 800051e:	68ac      	ldr	r4, [r5, #8]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_puts_r+0x22>
 8000524:	0028      	movs	r0, r5
 8000526:	f000 fa67 	bl	80009f8 <__sinit>
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <_puts_r+0xd8>)
 800052c:	429c      	cmp	r4, r3
 800052e:	d122      	bne.n	8000576 <_puts_r+0x6e>
 8000530:	686c      	ldr	r4, [r5, #4]
 8000532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000534:	07db      	lsls	r3, r3, #31
 8000536:	d405      	bmi.n	8000544 <_puts_r+0x3c>
 8000538:	89a3      	ldrh	r3, [r4, #12]
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	d402      	bmi.n	8000544 <_puts_r+0x3c>
 800053e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000540:	f000 fafb 	bl	8000b3a <__retarget_lock_acquire_recursive>
 8000544:	89a3      	ldrh	r3, [r4, #12]
 8000546:	071b      	lsls	r3, r3, #28
 8000548:	d502      	bpl.n	8000550 <_puts_r+0x48>
 800054a:	6923      	ldr	r3, [r4, #16]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d129      	bne.n	80005a4 <_puts_r+0x9c>
 8000550:	0021      	movs	r1, r4
 8000552:	0028      	movs	r0, r5
 8000554:	f000 f8aa 	bl	80006ac <__swsetup_r>
 8000558:	2800      	cmp	r0, #0
 800055a:	d023      	beq.n	80005a4 <_puts_r+0x9c>
 800055c:	2501      	movs	r5, #1
 800055e:	426d      	negs	r5, r5
 8000560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000562:	07db      	lsls	r3, r3, #31
 8000564:	d405      	bmi.n	8000572 <_puts_r+0x6a>
 8000566:	89a3      	ldrh	r3, [r4, #12]
 8000568:	059b      	lsls	r3, r3, #22
 800056a:	d402      	bmi.n	8000572 <_puts_r+0x6a>
 800056c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800056e:	f000 fae5 	bl	8000b3c <__retarget_lock_release_recursive>
 8000572:	0028      	movs	r0, r5
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <_puts_r+0xdc>)
 8000578:	429c      	cmp	r4, r3
 800057a:	d101      	bne.n	8000580 <_puts_r+0x78>
 800057c:	68ac      	ldr	r4, [r5, #8]
 800057e:	e7d8      	b.n	8000532 <_puts_r+0x2a>
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <_puts_r+0xe0>)
 8000582:	429c      	cmp	r4, r3
 8000584:	d1d5      	bne.n	8000532 <_puts_r+0x2a>
 8000586:	68ec      	ldr	r4, [r5, #12]
 8000588:	e7d3      	b.n	8000532 <_puts_r+0x2a>
 800058a:	3601      	adds	r6, #1
 800058c:	60a3      	str	r3, [r4, #8]
 800058e:	2b00      	cmp	r3, #0
 8000590:	da04      	bge.n	800059c <_puts_r+0x94>
 8000592:	69a2      	ldr	r2, [r4, #24]
 8000594:	429a      	cmp	r2, r3
 8000596:	dc16      	bgt.n	80005c6 <_puts_r+0xbe>
 8000598:	290a      	cmp	r1, #10
 800059a:	d014      	beq.n	80005c6 <_puts_r+0xbe>
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	6022      	str	r2, [r4, #0]
 80005a2:	7019      	strb	r1, [r3, #0]
 80005a4:	68a3      	ldr	r3, [r4, #8]
 80005a6:	7831      	ldrb	r1, [r6, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d1ed      	bne.n	800058a <_puts_r+0x82>
 80005ae:	60a3      	str	r3, [r4, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da0f      	bge.n	80005d4 <_puts_r+0xcc>
 80005b4:	0028      	movs	r0, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	310a      	adds	r1, #10
 80005ba:	f000 f821 	bl	8000600 <__swbuf_r>
 80005be:	250a      	movs	r5, #10
 80005c0:	1c43      	adds	r3, r0, #1
 80005c2:	d1cd      	bne.n	8000560 <_puts_r+0x58>
 80005c4:	e7ca      	b.n	800055c <_puts_r+0x54>
 80005c6:	0022      	movs	r2, r4
 80005c8:	0028      	movs	r0, r5
 80005ca:	f000 f819 	bl	8000600 <__swbuf_r>
 80005ce:	1c43      	adds	r3, r0, #1
 80005d0:	d1e8      	bne.n	80005a4 <_puts_r+0x9c>
 80005d2:	e7c3      	b.n	800055c <_puts_r+0x54>
 80005d4:	250a      	movs	r5, #10
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	6022      	str	r2, [r4, #0]
 80005dc:	701d      	strb	r5, [r3, #0]
 80005de:	e7bf      	b.n	8000560 <_puts_r+0x58>
 80005e0:	08000f7c 	.word	0x08000f7c
 80005e4:	08000f9c 	.word	0x08000f9c
 80005e8:	08000f5c 	.word	0x08000f5c

080005ec <puts>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <puts+0x10>)
 80005f0:	0001      	movs	r1, r0
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	f7ff ff88 	bl	8000508 <_puts_r>
 80005f8:	bd10      	pop	{r4, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000000 	.word	0x20000000

08000600 <__swbuf_r>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	0005      	movs	r5, r0
 8000604:	000e      	movs	r6, r1
 8000606:	0014      	movs	r4, r2
 8000608:	2800      	cmp	r0, #0
 800060a:	d004      	beq.n	8000616 <__swbuf_r+0x16>
 800060c:	6983      	ldr	r3, [r0, #24]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <__swbuf_r+0x16>
 8000612:	f000 f9f1 	bl	80009f8 <__sinit>
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <__swbuf_r+0xa0>)
 8000618:	429c      	cmp	r4, r3
 800061a:	d12e      	bne.n	800067a <__swbuf_r+0x7a>
 800061c:	686c      	ldr	r4, [r5, #4]
 800061e:	69a3      	ldr	r3, [r4, #24]
 8000620:	60a3      	str	r3, [r4, #8]
 8000622:	89a3      	ldrh	r3, [r4, #12]
 8000624:	071b      	lsls	r3, r3, #28
 8000626:	d532      	bpl.n	800068e <__swbuf_r+0x8e>
 8000628:	6923      	ldr	r3, [r4, #16]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d02f      	beq.n	800068e <__swbuf_r+0x8e>
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	6922      	ldr	r2, [r4, #16]
 8000632:	b2f7      	uxtb	r7, r6
 8000634:	1a98      	subs	r0, r3, r2
 8000636:	6963      	ldr	r3, [r4, #20]
 8000638:	b2f6      	uxtb	r6, r6
 800063a:	4283      	cmp	r3, r0
 800063c:	dc05      	bgt.n	800064a <__swbuf_r+0x4a>
 800063e:	0021      	movs	r1, r4
 8000640:	0028      	movs	r0, r5
 8000642:	f000 f937 	bl	80008b4 <_fflush_r>
 8000646:	2800      	cmp	r0, #0
 8000648:	d127      	bne.n	800069a <__swbuf_r+0x9a>
 800064a:	68a3      	ldr	r3, [r4, #8]
 800064c:	3001      	adds	r0, #1
 800064e:	3b01      	subs	r3, #1
 8000650:	60a3      	str	r3, [r4, #8]
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	6022      	str	r2, [r4, #0]
 8000658:	701f      	strb	r7, [r3, #0]
 800065a:	6963      	ldr	r3, [r4, #20]
 800065c:	4283      	cmp	r3, r0
 800065e:	d004      	beq.n	800066a <__swbuf_r+0x6a>
 8000660:	89a3      	ldrh	r3, [r4, #12]
 8000662:	07db      	lsls	r3, r3, #31
 8000664:	d507      	bpl.n	8000676 <__swbuf_r+0x76>
 8000666:	2e0a      	cmp	r6, #10
 8000668:	d105      	bne.n	8000676 <__swbuf_r+0x76>
 800066a:	0021      	movs	r1, r4
 800066c:	0028      	movs	r0, r5
 800066e:	f000 f921 	bl	80008b4 <_fflush_r>
 8000672:	2800      	cmp	r0, #0
 8000674:	d111      	bne.n	800069a <__swbuf_r+0x9a>
 8000676:	0030      	movs	r0, r6
 8000678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <__swbuf_r+0xa4>)
 800067c:	429c      	cmp	r4, r3
 800067e:	d101      	bne.n	8000684 <__swbuf_r+0x84>
 8000680:	68ac      	ldr	r4, [r5, #8]
 8000682:	e7cc      	b.n	800061e <__swbuf_r+0x1e>
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <__swbuf_r+0xa8>)
 8000686:	429c      	cmp	r4, r3
 8000688:	d1c9      	bne.n	800061e <__swbuf_r+0x1e>
 800068a:	68ec      	ldr	r4, [r5, #12]
 800068c:	e7c7      	b.n	800061e <__swbuf_r+0x1e>
 800068e:	0021      	movs	r1, r4
 8000690:	0028      	movs	r0, r5
 8000692:	f000 f80b 	bl	80006ac <__swsetup_r>
 8000696:	2800      	cmp	r0, #0
 8000698:	d0c9      	beq.n	800062e <__swbuf_r+0x2e>
 800069a:	2601      	movs	r6, #1
 800069c:	4276      	negs	r6, r6
 800069e:	e7ea      	b.n	8000676 <__swbuf_r+0x76>
 80006a0:	08000f7c 	.word	0x08000f7c
 80006a4:	08000f9c 	.word	0x08000f9c
 80006a8:	08000f5c 	.word	0x08000f5c

080006ac <__swsetup_r>:
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <__swsetup_r+0xe0>)
 80006ae:	b570      	push	{r4, r5, r6, lr}
 80006b0:	681d      	ldr	r5, [r3, #0]
 80006b2:	0006      	movs	r6, r0
 80006b4:	000c      	movs	r4, r1
 80006b6:	2d00      	cmp	r5, #0
 80006b8:	d005      	beq.n	80006c6 <__swsetup_r+0x1a>
 80006ba:	69ab      	ldr	r3, [r5, #24]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <__swsetup_r+0x1a>
 80006c0:	0028      	movs	r0, r5
 80006c2:	f000 f999 	bl	80009f8 <__sinit>
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <__swsetup_r+0xe4>)
 80006c8:	429c      	cmp	r4, r3
 80006ca:	d10f      	bne.n	80006ec <__swsetup_r+0x40>
 80006cc:	686c      	ldr	r4, [r5, #4]
 80006ce:	230c      	movs	r3, #12
 80006d0:	5ee2      	ldrsh	r2, [r4, r3]
 80006d2:	b293      	uxth	r3, r2
 80006d4:	0711      	lsls	r1, r2, #28
 80006d6:	d42d      	bmi.n	8000734 <__swsetup_r+0x88>
 80006d8:	06d9      	lsls	r1, r3, #27
 80006da:	d411      	bmi.n	8000700 <__swsetup_r+0x54>
 80006dc:	2309      	movs	r3, #9
 80006de:	2001      	movs	r0, #1
 80006e0:	6033      	str	r3, [r6, #0]
 80006e2:	3337      	adds	r3, #55	; 0x37
 80006e4:	4313      	orrs	r3, r2
 80006e6:	81a3      	strh	r3, [r4, #12]
 80006e8:	4240      	negs	r0, r0
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <__swsetup_r+0xe8>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d101      	bne.n	80006f6 <__swsetup_r+0x4a>
 80006f2:	68ac      	ldr	r4, [r5, #8]
 80006f4:	e7eb      	b.n	80006ce <__swsetup_r+0x22>
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <__swsetup_r+0xec>)
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d1e8      	bne.n	80006ce <__swsetup_r+0x22>
 80006fc:	68ec      	ldr	r4, [r5, #12]
 80006fe:	e7e6      	b.n	80006ce <__swsetup_r+0x22>
 8000700:	075b      	lsls	r3, r3, #29
 8000702:	d513      	bpl.n	800072c <__swsetup_r+0x80>
 8000704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000706:	2900      	cmp	r1, #0
 8000708:	d008      	beq.n	800071c <__swsetup_r+0x70>
 800070a:	0023      	movs	r3, r4
 800070c:	3344      	adds	r3, #68	; 0x44
 800070e:	4299      	cmp	r1, r3
 8000710:	d002      	beq.n	8000718 <__swsetup_r+0x6c>
 8000712:	0030      	movs	r0, r6
 8000714:	f000 fa80 	bl	8000c18 <_free_r>
 8000718:	2300      	movs	r3, #0
 800071a:	6363      	str	r3, [r4, #52]	; 0x34
 800071c:	2224      	movs	r2, #36	; 0x24
 800071e:	89a3      	ldrh	r3, [r4, #12]
 8000720:	4393      	bics	r3, r2
 8000722:	81a3      	strh	r3, [r4, #12]
 8000724:	2300      	movs	r3, #0
 8000726:	6063      	str	r3, [r4, #4]
 8000728:	6923      	ldr	r3, [r4, #16]
 800072a:	6023      	str	r3, [r4, #0]
 800072c:	2308      	movs	r3, #8
 800072e:	89a2      	ldrh	r2, [r4, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	81a3      	strh	r3, [r4, #12]
 8000734:	6923      	ldr	r3, [r4, #16]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10b      	bne.n	8000752 <__swsetup_r+0xa6>
 800073a:	21a0      	movs	r1, #160	; 0xa0
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	0089      	lsls	r1, r1, #2
 8000742:	0092      	lsls	r2, r2, #2
 8000744:	400b      	ands	r3, r1
 8000746:	4293      	cmp	r3, r2
 8000748:	d003      	beq.n	8000752 <__swsetup_r+0xa6>
 800074a:	0021      	movs	r1, r4
 800074c:	0030      	movs	r0, r6
 800074e:	f000 fa1f 	bl	8000b90 <__smakebuf_r>
 8000752:	220c      	movs	r2, #12
 8000754:	5ea3      	ldrsh	r3, [r4, r2]
 8000756:	2001      	movs	r0, #1
 8000758:	001a      	movs	r2, r3
 800075a:	b299      	uxth	r1, r3
 800075c:	4002      	ands	r2, r0
 800075e:	4203      	tst	r3, r0
 8000760:	d00f      	beq.n	8000782 <__swsetup_r+0xd6>
 8000762:	2200      	movs	r2, #0
 8000764:	60a2      	str	r2, [r4, #8]
 8000766:	6962      	ldr	r2, [r4, #20]
 8000768:	4252      	negs	r2, r2
 800076a:	61a2      	str	r2, [r4, #24]
 800076c:	2000      	movs	r0, #0
 800076e:	6922      	ldr	r2, [r4, #16]
 8000770:	4282      	cmp	r2, r0
 8000772:	d1ba      	bne.n	80006ea <__swsetup_r+0x3e>
 8000774:	060a      	lsls	r2, r1, #24
 8000776:	d5b8      	bpl.n	80006ea <__swsetup_r+0x3e>
 8000778:	2240      	movs	r2, #64	; 0x40
 800077a:	4313      	orrs	r3, r2
 800077c:	81a3      	strh	r3, [r4, #12]
 800077e:	3801      	subs	r0, #1
 8000780:	e7b3      	b.n	80006ea <__swsetup_r+0x3e>
 8000782:	0788      	lsls	r0, r1, #30
 8000784:	d400      	bmi.n	8000788 <__swsetup_r+0xdc>
 8000786:	6962      	ldr	r2, [r4, #20]
 8000788:	60a2      	str	r2, [r4, #8]
 800078a:	e7ef      	b.n	800076c <__swsetup_r+0xc0>
 800078c:	20000000 	.word	0x20000000
 8000790:	08000f7c 	.word	0x08000f7c
 8000794:	08000f9c 	.word	0x08000f9c
 8000798:	08000f5c 	.word	0x08000f5c

0800079c <__sflush_r>:
 800079c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800079e:	898b      	ldrh	r3, [r1, #12]
 80007a0:	0005      	movs	r5, r0
 80007a2:	000c      	movs	r4, r1
 80007a4:	071a      	lsls	r2, r3, #28
 80007a6:	d45f      	bmi.n	8000868 <__sflush_r+0xcc>
 80007a8:	684a      	ldr	r2, [r1, #4]
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	dc04      	bgt.n	80007b8 <__sflush_r+0x1c>
 80007ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	dc01      	bgt.n	80007b8 <__sflush_r+0x1c>
 80007b4:	2000      	movs	r0, #0
 80007b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80007b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d0fa      	beq.n	80007b4 <__sflush_r+0x18>
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	682e      	ldr	r6, [r5, #0]
 80007c4:	602a      	str	r2, [r5, #0]
 80007c6:	001a      	movs	r2, r3
 80007c8:	0149      	lsls	r1, r1, #5
 80007ca:	400a      	ands	r2, r1
 80007cc:	420b      	tst	r3, r1
 80007ce:	d034      	beq.n	800083a <__sflush_r+0x9e>
 80007d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	075b      	lsls	r3, r3, #29
 80007d6:	d506      	bpl.n	80007e6 <__sflush_r+0x4a>
 80007d8:	6863      	ldr	r3, [r4, #4]
 80007da:	1ac0      	subs	r0, r0, r3
 80007dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <__sflush_r+0x4a>
 80007e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e4:	1ac0      	subs	r0, r0, r3
 80007e6:	0002      	movs	r2, r0
 80007e8:	6a21      	ldr	r1, [r4, #32]
 80007ea:	2300      	movs	r3, #0
 80007ec:	0028      	movs	r0, r5
 80007ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80007f0:	47b8      	blx	r7
 80007f2:	89a1      	ldrh	r1, [r4, #12]
 80007f4:	1c43      	adds	r3, r0, #1
 80007f6:	d106      	bne.n	8000806 <__sflush_r+0x6a>
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	2b1d      	cmp	r3, #29
 80007fc:	d831      	bhi.n	8000862 <__sflush_r+0xc6>
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <__sflush_r+0x114>)
 8000800:	40da      	lsrs	r2, r3
 8000802:	07d3      	lsls	r3, r2, #31
 8000804:	d52d      	bpl.n	8000862 <__sflush_r+0xc6>
 8000806:	2300      	movs	r3, #0
 8000808:	6063      	str	r3, [r4, #4]
 800080a:	6923      	ldr	r3, [r4, #16]
 800080c:	6023      	str	r3, [r4, #0]
 800080e:	04cb      	lsls	r3, r1, #19
 8000810:	d505      	bpl.n	800081e <__sflush_r+0x82>
 8000812:	1c43      	adds	r3, r0, #1
 8000814:	d102      	bne.n	800081c <__sflush_r+0x80>
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__sflush_r+0x82>
 800081c:	6560      	str	r0, [r4, #84]	; 0x54
 800081e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000820:	602e      	str	r6, [r5, #0]
 8000822:	2900      	cmp	r1, #0
 8000824:	d0c6      	beq.n	80007b4 <__sflush_r+0x18>
 8000826:	0023      	movs	r3, r4
 8000828:	3344      	adds	r3, #68	; 0x44
 800082a:	4299      	cmp	r1, r3
 800082c:	d002      	beq.n	8000834 <__sflush_r+0x98>
 800082e:	0028      	movs	r0, r5
 8000830:	f000 f9f2 	bl	8000c18 <_free_r>
 8000834:	2000      	movs	r0, #0
 8000836:	6360      	str	r0, [r4, #52]	; 0x34
 8000838:	e7bd      	b.n	80007b6 <__sflush_r+0x1a>
 800083a:	2301      	movs	r3, #1
 800083c:	0028      	movs	r0, r5
 800083e:	6a21      	ldr	r1, [r4, #32]
 8000840:	47b8      	blx	r7
 8000842:	1c43      	adds	r3, r0, #1
 8000844:	d1c5      	bne.n	80007d2 <__sflush_r+0x36>
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0c2      	beq.n	80007d2 <__sflush_r+0x36>
 800084c:	2b1d      	cmp	r3, #29
 800084e:	d001      	beq.n	8000854 <__sflush_r+0xb8>
 8000850:	2b16      	cmp	r3, #22
 8000852:	d101      	bne.n	8000858 <__sflush_r+0xbc>
 8000854:	602e      	str	r6, [r5, #0]
 8000856:	e7ad      	b.n	80007b4 <__sflush_r+0x18>
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	89a2      	ldrh	r2, [r4, #12]
 800085c:	4313      	orrs	r3, r2
 800085e:	81a3      	strh	r3, [r4, #12]
 8000860:	e7a9      	b.n	80007b6 <__sflush_r+0x1a>
 8000862:	2340      	movs	r3, #64	; 0x40
 8000864:	430b      	orrs	r3, r1
 8000866:	e7fa      	b.n	800085e <__sflush_r+0xc2>
 8000868:	690f      	ldr	r7, [r1, #16]
 800086a:	2f00      	cmp	r7, #0
 800086c:	d0a2      	beq.n	80007b4 <__sflush_r+0x18>
 800086e:	680a      	ldr	r2, [r1, #0]
 8000870:	600f      	str	r7, [r1, #0]
 8000872:	1bd2      	subs	r2, r2, r7
 8000874:	9201      	str	r2, [sp, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	079b      	lsls	r3, r3, #30
 800087a:	d100      	bne.n	800087e <__sflush_r+0xe2>
 800087c:	694a      	ldr	r2, [r1, #20]
 800087e:	60a2      	str	r2, [r4, #8]
 8000880:	9b01      	ldr	r3, [sp, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dc00      	bgt.n	8000888 <__sflush_r+0xec>
 8000886:	e795      	b.n	80007b4 <__sflush_r+0x18>
 8000888:	003a      	movs	r2, r7
 800088a:	0028      	movs	r0, r5
 800088c:	9b01      	ldr	r3, [sp, #4]
 800088e:	6a21      	ldr	r1, [r4, #32]
 8000890:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000892:	47b0      	blx	r6
 8000894:	2800      	cmp	r0, #0
 8000896:	dc06      	bgt.n	80008a6 <__sflush_r+0x10a>
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	2001      	movs	r0, #1
 800089c:	89a2      	ldrh	r2, [r4, #12]
 800089e:	4240      	negs	r0, r0
 80008a0:	4313      	orrs	r3, r2
 80008a2:	81a3      	strh	r3, [r4, #12]
 80008a4:	e787      	b.n	80007b6 <__sflush_r+0x1a>
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	183f      	adds	r7, r7, r0
 80008aa:	1a1b      	subs	r3, r3, r0
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	e7e7      	b.n	8000880 <__sflush_r+0xe4>
 80008b0:	20400001 	.word	0x20400001

080008b4 <_fflush_r>:
 80008b4:	690b      	ldr	r3, [r1, #16]
 80008b6:	b570      	push	{r4, r5, r6, lr}
 80008b8:	0005      	movs	r5, r0
 80008ba:	000c      	movs	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_fflush_r+0x12>
 80008c0:	2500      	movs	r5, #0
 80008c2:	0028      	movs	r0, r5
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d004      	beq.n	80008d4 <_fflush_r+0x20>
 80008ca:	6983      	ldr	r3, [r0, #24]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <_fflush_r+0x20>
 80008d0:	f000 f892 	bl	80009f8 <__sinit>
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <_fflush_r+0x74>)
 80008d6:	429c      	cmp	r4, r3
 80008d8:	d11b      	bne.n	8000912 <_fflush_r+0x5e>
 80008da:	686c      	ldr	r4, [r5, #4]
 80008dc:	220c      	movs	r2, #12
 80008de:	5ea3      	ldrsh	r3, [r4, r2]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0ed      	beq.n	80008c0 <_fflush_r+0xc>
 80008e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80008e6:	07d2      	lsls	r2, r2, #31
 80008e8:	d404      	bmi.n	80008f4 <_fflush_r+0x40>
 80008ea:	059b      	lsls	r3, r3, #22
 80008ec:	d402      	bmi.n	80008f4 <_fflush_r+0x40>
 80008ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008f0:	f000 f923 	bl	8000b3a <__retarget_lock_acquire_recursive>
 80008f4:	0028      	movs	r0, r5
 80008f6:	0021      	movs	r1, r4
 80008f8:	f7ff ff50 	bl	800079c <__sflush_r>
 80008fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008fe:	0005      	movs	r5, r0
 8000900:	07db      	lsls	r3, r3, #31
 8000902:	d4de      	bmi.n	80008c2 <_fflush_r+0xe>
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	059b      	lsls	r3, r3, #22
 8000908:	d4db      	bmi.n	80008c2 <_fflush_r+0xe>
 800090a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800090c:	f000 f916 	bl	8000b3c <__retarget_lock_release_recursive>
 8000910:	e7d7      	b.n	80008c2 <_fflush_r+0xe>
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <_fflush_r+0x78>)
 8000914:	429c      	cmp	r4, r3
 8000916:	d101      	bne.n	800091c <_fflush_r+0x68>
 8000918:	68ac      	ldr	r4, [r5, #8]
 800091a:	e7df      	b.n	80008dc <_fflush_r+0x28>
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <_fflush_r+0x7c>)
 800091e:	429c      	cmp	r4, r3
 8000920:	d1dc      	bne.n	80008dc <_fflush_r+0x28>
 8000922:	68ec      	ldr	r4, [r5, #12]
 8000924:	e7da      	b.n	80008dc <_fflush_r+0x28>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	08000f7c 	.word	0x08000f7c
 800092c:	08000f9c 	.word	0x08000f9c
 8000930:	08000f5c 	.word	0x08000f5c

08000934 <std>:
 8000934:	2300      	movs	r3, #0
 8000936:	b510      	push	{r4, lr}
 8000938:	0004      	movs	r4, r0
 800093a:	6003      	str	r3, [r0, #0]
 800093c:	6043      	str	r3, [r0, #4]
 800093e:	6083      	str	r3, [r0, #8]
 8000940:	8181      	strh	r1, [r0, #12]
 8000942:	6643      	str	r3, [r0, #100]	; 0x64
 8000944:	0019      	movs	r1, r3
 8000946:	81c2      	strh	r2, [r0, #14]
 8000948:	6103      	str	r3, [r0, #16]
 800094a:	6143      	str	r3, [r0, #20]
 800094c:	6183      	str	r3, [r0, #24]
 800094e:	2208      	movs	r2, #8
 8000950:	305c      	adds	r0, #92	; 0x5c
 8000952:	f7ff fdd1 	bl	80004f8 <memset>
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <std+0x38>)
 8000958:	6263      	str	r3, [r4, #36]	; 0x24
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <std+0x3c>)
 800095c:	6224      	str	r4, [r4, #32]
 800095e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <std+0x40>)
 8000962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <std+0x44>)
 8000966:	6323      	str	r3, [r4, #48]	; 0x30
 8000968:	bd10      	pop	{r4, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	08000d8d 	.word	0x08000d8d
 8000970:	08000db5 	.word	0x08000db5
 8000974:	08000ded 	.word	0x08000ded
 8000978:	08000e19 	.word	0x08000e19

0800097c <_cleanup_r>:
 800097c:	b510      	push	{r4, lr}
 800097e:	4902      	ldr	r1, [pc, #8]	; (8000988 <_cleanup_r+0xc>)
 8000980:	f000 f8ba 	bl	8000af8 <_fwalk_reent>
 8000984:	bd10      	pop	{r4, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	080008b5 	.word	0x080008b5

0800098c <__sfmoreglue>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	2568      	movs	r5, #104	; 0x68
 8000990:	1e4a      	subs	r2, r1, #1
 8000992:	4355      	muls	r5, r2
 8000994:	000e      	movs	r6, r1
 8000996:	0029      	movs	r1, r5
 8000998:	3174      	adds	r1, #116	; 0x74
 800099a:	f000 f987 	bl	8000cac <_malloc_r>
 800099e:	1e04      	subs	r4, r0, #0
 80009a0:	d008      	beq.n	80009b4 <__sfmoreglue+0x28>
 80009a2:	2100      	movs	r1, #0
 80009a4:	002a      	movs	r2, r5
 80009a6:	6001      	str	r1, [r0, #0]
 80009a8:	6046      	str	r6, [r0, #4]
 80009aa:	300c      	adds	r0, #12
 80009ac:	60a0      	str	r0, [r4, #8]
 80009ae:	3268      	adds	r2, #104	; 0x68
 80009b0:	f7ff fda2 	bl	80004f8 <memset>
 80009b4:	0020      	movs	r0, r4
 80009b6:	bd70      	pop	{r4, r5, r6, pc}

080009b8 <__sfp_lock_acquire>:
 80009b8:	b510      	push	{r4, lr}
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <__sfp_lock_acquire+0xc>)
 80009bc:	f000 f8bd 	bl	8000b3a <__retarget_lock_acquire_recursive>
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	20000228 	.word	0x20000228

080009c8 <__sfp_lock_release>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <__sfp_lock_release+0xc>)
 80009cc:	f000 f8b6 	bl	8000b3c <__retarget_lock_release_recursive>
 80009d0:	bd10      	pop	{r4, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000228 	.word	0x20000228

080009d8 <__sinit_lock_acquire>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	4802      	ldr	r0, [pc, #8]	; (80009e4 <__sinit_lock_acquire+0xc>)
 80009dc:	f000 f8ad 	bl	8000b3a <__retarget_lock_acquire_recursive>
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000223 	.word	0x20000223

080009e8 <__sinit_lock_release>:
 80009e8:	b510      	push	{r4, lr}
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <__sinit_lock_release+0xc>)
 80009ec:	f000 f8a6 	bl	8000b3c <__retarget_lock_release_recursive>
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000223 	.word	0x20000223

080009f8 <__sinit>:
 80009f8:	b513      	push	{r0, r1, r4, lr}
 80009fa:	0004      	movs	r4, r0
 80009fc:	f7ff ffec 	bl	80009d8 <__sinit_lock_acquire>
 8000a00:	69a3      	ldr	r3, [r4, #24]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <__sinit+0x14>
 8000a06:	f7ff ffef 	bl	80009e8 <__sinit_lock_release>
 8000a0a:	bd13      	pop	{r0, r1, r4, pc}
 8000a0c:	64a3      	str	r3, [r4, #72]	; 0x48
 8000a0e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000a10:	6523      	str	r3, [r4, #80]	; 0x50
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <__sinit+0x68>)
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <__sinit+0x6c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d101      	bne.n	8000a24 <__sinit+0x2c>
 8000a20:	2301      	movs	r3, #1
 8000a22:	61a3      	str	r3, [r4, #24]
 8000a24:	0020      	movs	r0, r4
 8000a26:	f000 f81f 	bl	8000a68 <__sfp>
 8000a2a:	6060      	str	r0, [r4, #4]
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	f000 f81b 	bl	8000a68 <__sfp>
 8000a32:	60a0      	str	r0, [r4, #8]
 8000a34:	0020      	movs	r0, r4
 8000a36:	f000 f817 	bl	8000a68 <__sfp>
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	60e0      	str	r0, [r4, #12]
 8000a40:	6860      	ldr	r0, [r4, #4]
 8000a42:	f7ff ff77 	bl	8000934 <std>
 8000a46:	2201      	movs	r2, #1
 8000a48:	2109      	movs	r1, #9
 8000a4a:	68a0      	ldr	r0, [r4, #8]
 8000a4c:	f7ff ff72 	bl	8000934 <std>
 8000a50:	2202      	movs	r2, #2
 8000a52:	2112      	movs	r1, #18
 8000a54:	68e0      	ldr	r0, [r4, #12]
 8000a56:	f7ff ff6d 	bl	8000934 <std>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61a3      	str	r3, [r4, #24]
 8000a5e:	e7d2      	b.n	8000a06 <__sinit+0xe>
 8000a60:	08000f58 	.word	0x08000f58
 8000a64:	0800097d 	.word	0x0800097d

08000a68 <__sfp>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	0007      	movs	r7, r0
 8000a6c:	f7ff ffa4 	bl	80009b8 <__sfp_lock_acquire>
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <__sfp+0x88>)
 8000a72:	681e      	ldr	r6, [r3, #0]
 8000a74:	69b3      	ldr	r3, [r6, #24]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <__sfp+0x18>
 8000a7a:	0030      	movs	r0, r6
 8000a7c:	f7ff ffbc 	bl	80009f8 <__sinit>
 8000a80:	3648      	adds	r6, #72	; 0x48
 8000a82:	68b4      	ldr	r4, [r6, #8]
 8000a84:	6873      	ldr	r3, [r6, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	d504      	bpl.n	8000a94 <__sfp+0x2c>
 8000a8a:	6833      	ldr	r3, [r6, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d022      	beq.n	8000ad6 <__sfp+0x6e>
 8000a90:	6836      	ldr	r6, [r6, #0]
 8000a92:	e7f6      	b.n	8000a82 <__sfp+0x1a>
 8000a94:	220c      	movs	r2, #12
 8000a96:	5ea5      	ldrsh	r5, [r4, r2]
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d11a      	bne.n	8000ad2 <__sfp+0x6a>
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <__sfp+0x8c>)
 8000aa0:	3058      	adds	r0, #88	; 0x58
 8000aa2:	60e3      	str	r3, [r4, #12]
 8000aa4:	6665      	str	r5, [r4, #100]	; 0x64
 8000aa6:	f000 f847 	bl	8000b38 <__retarget_lock_init_recursive>
 8000aaa:	f7ff ff8d 	bl	80009c8 <__sfp_lock_release>
 8000aae:	0020      	movs	r0, r4
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	0029      	movs	r1, r5
 8000ab4:	6025      	str	r5, [r4, #0]
 8000ab6:	60a5      	str	r5, [r4, #8]
 8000ab8:	6065      	str	r5, [r4, #4]
 8000aba:	6125      	str	r5, [r4, #16]
 8000abc:	6165      	str	r5, [r4, #20]
 8000abe:	61a5      	str	r5, [r4, #24]
 8000ac0:	305c      	adds	r0, #92	; 0x5c
 8000ac2:	f7ff fd19 	bl	80004f8 <memset>
 8000ac6:	6365      	str	r5, [r4, #52]	; 0x34
 8000ac8:	63a5      	str	r5, [r4, #56]	; 0x38
 8000aca:	64a5      	str	r5, [r4, #72]	; 0x48
 8000acc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000ace:	0020      	movs	r0, r4
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad2:	3468      	adds	r4, #104	; 0x68
 8000ad4:	e7d7      	b.n	8000a86 <__sfp+0x1e>
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	0038      	movs	r0, r7
 8000ada:	f7ff ff57 	bl	800098c <__sfmoreglue>
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	6030      	str	r0, [r6, #0]
 8000ae2:	d1d5      	bne.n	8000a90 <__sfp+0x28>
 8000ae4:	f7ff ff70 	bl	80009c8 <__sfp_lock_release>
 8000ae8:	230c      	movs	r3, #12
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	e7ef      	b.n	8000ace <__sfp+0x66>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	08000f58 	.word	0x08000f58
 8000af4:	ffff0001 	.word	0xffff0001

08000af8 <_fwalk_reent>:
 8000af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000afa:	0004      	movs	r4, r0
 8000afc:	0006      	movs	r6, r0
 8000afe:	2700      	movs	r7, #0
 8000b00:	9101      	str	r1, [sp, #4]
 8000b02:	3448      	adds	r4, #72	; 0x48
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	68a5      	ldr	r5, [r4, #8]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	9b00      	ldr	r3, [sp, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	d504      	bpl.n	8000b1c <_fwalk_reent+0x24>
 8000b12:	6824      	ldr	r4, [r4, #0]
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d1f5      	bne.n	8000b04 <_fwalk_reent+0xc>
 8000b18:	0038      	movs	r0, r7
 8000b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000b1c:	89ab      	ldrh	r3, [r5, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d908      	bls.n	8000b34 <_fwalk_reent+0x3c>
 8000b22:	220e      	movs	r2, #14
 8000b24:	5eab      	ldrsh	r3, [r5, r2]
 8000b26:	3301      	adds	r3, #1
 8000b28:	d004      	beq.n	8000b34 <_fwalk_reent+0x3c>
 8000b2a:	0029      	movs	r1, r5
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	4798      	blx	r3
 8000b32:	4307      	orrs	r7, r0
 8000b34:	3568      	adds	r5, #104	; 0x68
 8000b36:	e7e8      	b.n	8000b0a <_fwalk_reent+0x12>

08000b38 <__retarget_lock_init_recursive>:
 8000b38:	4770      	bx	lr

08000b3a <__retarget_lock_acquire_recursive>:
 8000b3a:	4770      	bx	lr

08000b3c <__retarget_lock_release_recursive>:
 8000b3c:	4770      	bx	lr
	...

08000b40 <__swhatbuf_r>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	000e      	movs	r6, r1
 8000b44:	001d      	movs	r5, r3
 8000b46:	230e      	movs	r3, #14
 8000b48:	5ec9      	ldrsh	r1, [r1, r3]
 8000b4a:	0014      	movs	r4, r2
 8000b4c:	b096      	sub	sp, #88	; 0x58
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	da07      	bge.n	8000b62 <__swhatbuf_r+0x22>
 8000b52:	2300      	movs	r3, #0
 8000b54:	602b      	str	r3, [r5, #0]
 8000b56:	89b3      	ldrh	r3, [r6, #12]
 8000b58:	061b      	lsls	r3, r3, #24
 8000b5a:	d411      	bmi.n	8000b80 <__swhatbuf_r+0x40>
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	e00f      	b.n	8000b82 <__swhatbuf_r+0x42>
 8000b62:	466a      	mov	r2, sp
 8000b64:	f000 f984 	bl	8000e70 <_fstat_r>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	dbf2      	blt.n	8000b52 <__swhatbuf_r+0x12>
 8000b6c:	23f0      	movs	r3, #240	; 0xf0
 8000b6e:	9901      	ldr	r1, [sp, #4]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4019      	ands	r1, r3
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <__swhatbuf_r+0x4c>)
 8000b76:	18c9      	adds	r1, r1, r3
 8000b78:	424b      	negs	r3, r1
 8000b7a:	4159      	adcs	r1, r3
 8000b7c:	6029      	str	r1, [r5, #0]
 8000b7e:	e7ed      	b.n	8000b5c <__swhatbuf_r+0x1c>
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	2000      	movs	r0, #0
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	b016      	add	sp, #88	; 0x58
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	ffffe000 	.word	0xffffe000

08000b90 <__smakebuf_r>:
 8000b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b92:	2602      	movs	r6, #2
 8000b94:	898b      	ldrh	r3, [r1, #12]
 8000b96:	0005      	movs	r5, r0
 8000b98:	000c      	movs	r4, r1
 8000b9a:	4233      	tst	r3, r6
 8000b9c:	d006      	beq.n	8000bac <__smakebuf_r+0x1c>
 8000b9e:	0023      	movs	r3, r4
 8000ba0:	3347      	adds	r3, #71	; 0x47
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	6123      	str	r3, [r4, #16]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	6163      	str	r3, [r4, #20]
 8000baa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000bac:	466a      	mov	r2, sp
 8000bae:	ab01      	add	r3, sp, #4
 8000bb0:	f7ff ffc6 	bl	8000b40 <__swhatbuf_r>
 8000bb4:	9900      	ldr	r1, [sp, #0]
 8000bb6:	0007      	movs	r7, r0
 8000bb8:	0028      	movs	r0, r5
 8000bba:	f000 f877 	bl	8000cac <_malloc_r>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d108      	bne.n	8000bd4 <__smakebuf_r+0x44>
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	5ea3      	ldrsh	r3, [r4, r2]
 8000bc6:	059a      	lsls	r2, r3, #22
 8000bc8:	d4ef      	bmi.n	8000baa <__smakebuf_r+0x1a>
 8000bca:	2203      	movs	r2, #3
 8000bcc:	4393      	bics	r3, r2
 8000bce:	431e      	orrs	r6, r3
 8000bd0:	81a6      	strh	r6, [r4, #12]
 8000bd2:	e7e4      	b.n	8000b9e <__smakebuf_r+0xe>
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <__smakebuf_r+0x84>)
 8000bd6:	62ab      	str	r3, [r5, #40]	; 0x28
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	89a2      	ldrh	r2, [r4, #12]
 8000bdc:	6020      	str	r0, [r4, #0]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	81a3      	strh	r3, [r4, #12]
 8000be2:	9b00      	ldr	r3, [sp, #0]
 8000be4:	6120      	str	r0, [r4, #16]
 8000be6:	6163      	str	r3, [r4, #20]
 8000be8:	9b01      	ldr	r3, [sp, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00d      	beq.n	8000c0a <__smakebuf_r+0x7a>
 8000bee:	0028      	movs	r0, r5
 8000bf0:	230e      	movs	r3, #14
 8000bf2:	5ee1      	ldrsh	r1, [r4, r3]
 8000bf4:	f000 f94e 	bl	8000e94 <_isatty_r>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d006      	beq.n	8000c0a <__smakebuf_r+0x7a>
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	89a3      	ldrh	r3, [r4, #12]
 8000c00:	4393      	bics	r3, r2
 8000c02:	001a      	movs	r2, r3
 8000c04:	2301      	movs	r3, #1
 8000c06:	4313      	orrs	r3, r2
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	89a0      	ldrh	r0, [r4, #12]
 8000c0c:	4307      	orrs	r7, r0
 8000c0e:	81a7      	strh	r7, [r4, #12]
 8000c10:	e7cb      	b.n	8000baa <__smakebuf_r+0x1a>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	0800097d 	.word	0x0800097d

08000c18 <_free_r>:
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	0005      	movs	r5, r0
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d010      	beq.n	8000c42 <_free_r+0x2a>
 8000c20:	1f0c      	subs	r4, r1, #4
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da00      	bge.n	8000c2a <_free_r+0x12>
 8000c28:	18e4      	adds	r4, r4, r3
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	f000 f958 	bl	8000ee0 <__malloc_lock>
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <_free_r+0x90>)
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d105      	bne.n	8000c44 <_free_r+0x2c>
 8000c38:	6063      	str	r3, [r4, #4]
 8000c3a:	6014      	str	r4, [r2, #0]
 8000c3c:	0028      	movs	r0, r5
 8000c3e:	f000 f957 	bl	8000ef0 <__malloc_unlock>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <_free_r+0x42>
 8000c48:	6821      	ldr	r1, [r4, #0]
 8000c4a:	1860      	adds	r0, r4, r1
 8000c4c:	4283      	cmp	r3, r0
 8000c4e:	d1f3      	bne.n	8000c38 <_free_r+0x20>
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	1841      	adds	r1, r0, r1
 8000c56:	6021      	str	r1, [r4, #0]
 8000c58:	e7ee      	b.n	8000c38 <_free_r+0x20>
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <_free_r+0x4e>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d9f9      	bls.n	8000c5a <_free_r+0x42>
 8000c66:	6811      	ldr	r1, [r2, #0]
 8000c68:	1850      	adds	r0, r2, r1
 8000c6a:	42a0      	cmp	r0, r4
 8000c6c:	d10b      	bne.n	8000c86 <_free_r+0x6e>
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	1809      	adds	r1, r1, r0
 8000c72:	1850      	adds	r0, r2, r1
 8000c74:	6011      	str	r1, [r2, #0]
 8000c76:	4283      	cmp	r3, r0
 8000c78:	d1e0      	bne.n	8000c3c <_free_r+0x24>
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	1841      	adds	r1, r0, r1
 8000c80:	6011      	str	r1, [r2, #0]
 8000c82:	6053      	str	r3, [r2, #4]
 8000c84:	e7da      	b.n	8000c3c <_free_r+0x24>
 8000c86:	42a0      	cmp	r0, r4
 8000c88:	d902      	bls.n	8000c90 <_free_r+0x78>
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	602b      	str	r3, [r5, #0]
 8000c8e:	e7d5      	b.n	8000c3c <_free_r+0x24>
 8000c90:	6821      	ldr	r1, [r4, #0]
 8000c92:	1860      	adds	r0, r4, r1
 8000c94:	4283      	cmp	r3, r0
 8000c96:	d103      	bne.n	8000ca0 <_free_r+0x88>
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	1841      	adds	r1, r0, r1
 8000c9e:	6021      	str	r1, [r4, #0]
 8000ca0:	6063      	str	r3, [r4, #4]
 8000ca2:	6054      	str	r4, [r2, #4]
 8000ca4:	e7ca      	b.n	8000c3c <_free_r+0x24>
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000088 	.word	0x20000088

08000cac <_malloc_r>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	2303      	movs	r3, #3
 8000cb0:	1ccd      	adds	r5, r1, #3
 8000cb2:	439d      	bics	r5, r3
 8000cb4:	3508      	adds	r5, #8
 8000cb6:	0006      	movs	r6, r0
 8000cb8:	2d0c      	cmp	r5, #12
 8000cba:	d21f      	bcs.n	8000cfc <_malloc_r+0x50>
 8000cbc:	250c      	movs	r5, #12
 8000cbe:	42a9      	cmp	r1, r5
 8000cc0:	d81e      	bhi.n	8000d00 <_malloc_r+0x54>
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	f000 f90c 	bl	8000ee0 <__malloc_lock>
 8000cc8:	4925      	ldr	r1, [pc, #148]	; (8000d60 <_malloc_r+0xb4>)
 8000cca:	680a      	ldr	r2, [r1, #0]
 8000ccc:	0014      	movs	r4, r2
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d11a      	bne.n	8000d08 <_malloc_r+0x5c>
 8000cd2:	4f24      	ldr	r7, [pc, #144]	; (8000d64 <_malloc_r+0xb8>)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d104      	bne.n	8000ce4 <_malloc_r+0x38>
 8000cda:	0021      	movs	r1, r4
 8000cdc:	0030      	movs	r0, r6
 8000cde:	f000 f843 	bl	8000d68 <_sbrk_r>
 8000ce2:	6038      	str	r0, [r7, #0]
 8000ce4:	0029      	movs	r1, r5
 8000ce6:	0030      	movs	r0, r6
 8000ce8:	f000 f83e 	bl	8000d68 <_sbrk_r>
 8000cec:	1c43      	adds	r3, r0, #1
 8000cee:	d12b      	bne.n	8000d48 <_malloc_r+0x9c>
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	0030      	movs	r0, r6
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	f000 f8fb 	bl	8000ef0 <__malloc_unlock>
 8000cfa:	e003      	b.n	8000d04 <_malloc_r+0x58>
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	dade      	bge.n	8000cbe <_malloc_r+0x12>
 8000d00:	230c      	movs	r3, #12
 8000d02:	6033      	str	r3, [r6, #0]
 8000d04:	2000      	movs	r0, #0
 8000d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	1b5b      	subs	r3, r3, r5
 8000d0c:	d419      	bmi.n	8000d42 <_malloc_r+0x96>
 8000d0e:	2b0b      	cmp	r3, #11
 8000d10:	d903      	bls.n	8000d1a <_malloc_r+0x6e>
 8000d12:	6023      	str	r3, [r4, #0]
 8000d14:	18e4      	adds	r4, r4, r3
 8000d16:	6025      	str	r5, [r4, #0]
 8000d18:	e003      	b.n	8000d22 <_malloc_r+0x76>
 8000d1a:	6863      	ldr	r3, [r4, #4]
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	d10e      	bne.n	8000d3e <_malloc_r+0x92>
 8000d20:	600b      	str	r3, [r1, #0]
 8000d22:	0030      	movs	r0, r6
 8000d24:	f000 f8e4 	bl	8000ef0 <__malloc_unlock>
 8000d28:	0020      	movs	r0, r4
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	300b      	adds	r0, #11
 8000d2e:	1d23      	adds	r3, r4, #4
 8000d30:	4390      	bics	r0, r2
 8000d32:	1ac2      	subs	r2, r0, r3
 8000d34:	4298      	cmp	r0, r3
 8000d36:	d0e6      	beq.n	8000d06 <_malloc_r+0x5a>
 8000d38:	1a1b      	subs	r3, r3, r0
 8000d3a:	50a3      	str	r3, [r4, r2]
 8000d3c:	e7e3      	b.n	8000d06 <_malloc_r+0x5a>
 8000d3e:	6053      	str	r3, [r2, #4]
 8000d40:	e7ef      	b.n	8000d22 <_malloc_r+0x76>
 8000d42:	0022      	movs	r2, r4
 8000d44:	6864      	ldr	r4, [r4, #4]
 8000d46:	e7c2      	b.n	8000cce <_malloc_r+0x22>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	1cc4      	adds	r4, r0, #3
 8000d4c:	439c      	bics	r4, r3
 8000d4e:	42a0      	cmp	r0, r4
 8000d50:	d0e1      	beq.n	8000d16 <_malloc_r+0x6a>
 8000d52:	1a21      	subs	r1, r4, r0
 8000d54:	0030      	movs	r0, r6
 8000d56:	f000 f807 	bl	8000d68 <_sbrk_r>
 8000d5a:	1c43      	adds	r3, r0, #1
 8000d5c:	d1db      	bne.n	8000d16 <_malloc_r+0x6a>
 8000d5e:	e7c7      	b.n	8000cf0 <_malloc_r+0x44>
 8000d60:	20000088 	.word	0x20000088
 8000d64:	2000008c 	.word	0x2000008c

08000d68 <_sbrk_r>:
 8000d68:	2300      	movs	r3, #0
 8000d6a:	b570      	push	{r4, r5, r6, lr}
 8000d6c:	4d06      	ldr	r5, [pc, #24]	; (8000d88 <_sbrk_r+0x20>)
 8000d6e:	0004      	movs	r4, r0
 8000d70:	0008      	movs	r0, r1
 8000d72:	602b      	str	r3, [r5, #0]
 8000d74:	f7ff fa60 	bl	8000238 <_sbrk>
 8000d78:	1c43      	adds	r3, r0, #1
 8000d7a:	d103      	bne.n	8000d84 <_sbrk_r+0x1c>
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <_sbrk_r+0x1c>
 8000d82:	6023      	str	r3, [r4, #0]
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	2000022c 	.word	0x2000022c

08000d8c <__sread>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	000c      	movs	r4, r1
 8000d90:	250e      	movs	r5, #14
 8000d92:	5f49      	ldrsh	r1, [r1, r5]
 8000d94:	f000 f8b4 	bl	8000f00 <_read_r>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	db03      	blt.n	8000da4 <__sread+0x18>
 8000d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d9e:	181b      	adds	r3, r3, r0
 8000da0:	6563      	str	r3, [r4, #84]	; 0x54
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	4a02      	ldr	r2, [pc, #8]	; (8000db0 <__sread+0x24>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	81a3      	strh	r3, [r4, #12]
 8000dac:	e7f9      	b.n	8000da2 <__sread+0x16>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	ffffefff 	.word	0xffffefff

08000db4 <__swrite>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	001f      	movs	r7, r3
 8000db8:	898b      	ldrh	r3, [r1, #12]
 8000dba:	0005      	movs	r5, r0
 8000dbc:	000c      	movs	r4, r1
 8000dbe:	0016      	movs	r6, r2
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	d505      	bpl.n	8000dd0 <__swrite+0x1c>
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	5ec9      	ldrsh	r1, [r1, r3]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f000 f874 	bl	8000eb8 <_lseek_r>
 8000dd0:	89a3      	ldrh	r3, [r4, #12]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <__swrite+0x34>)
 8000dd4:	0028      	movs	r0, r5
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	81a3      	strh	r3, [r4, #12]
 8000dda:	0032      	movs	r2, r6
 8000ddc:	230e      	movs	r3, #14
 8000dde:	5ee1      	ldrsh	r1, [r4, r3]
 8000de0:	003b      	movs	r3, r7
 8000de2:	f000 f81f 	bl	8000e24 <_write_r>
 8000de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de8:	ffffefff 	.word	0xffffefff

08000dec <__sseek>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	000c      	movs	r4, r1
 8000df0:	250e      	movs	r5, #14
 8000df2:	5f49      	ldrsh	r1, [r1, r5]
 8000df4:	f000 f860 	bl	8000eb8 <_lseek_r>
 8000df8:	89a3      	ldrh	r3, [r4, #12]
 8000dfa:	1c42      	adds	r2, r0, #1
 8000dfc:	d103      	bne.n	8000e06 <__sseek+0x1a>
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <__sseek+0x28>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0152      	lsls	r2, r2, #5
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	81a3      	strh	r3, [r4, #12]
 8000e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8000e10:	e7f8      	b.n	8000e04 <__sseek+0x18>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	ffffefff 	.word	0xffffefff

08000e18 <__sclose>:
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	230e      	movs	r3, #14
 8000e1c:	5ec9      	ldrsh	r1, [r1, r3]
 8000e1e:	f000 f815 	bl	8000e4c <_close_r>
 8000e22:	bd10      	pop	{r4, pc}

08000e24 <_write_r>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	0004      	movs	r4, r0
 8000e28:	0008      	movs	r0, r1
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4d05      	ldr	r5, [pc, #20]	; (8000e48 <_write_r+0x24>)
 8000e32:	602b      	str	r3, [r5, #0]
 8000e34:	f7ff f9b7 	bl	80001a6 <_write>
 8000e38:	1c43      	adds	r3, r0, #1
 8000e3a:	d103      	bne.n	8000e44 <_write_r+0x20>
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d000      	beq.n	8000e44 <_write_r+0x20>
 8000e42:	6023      	str	r3, [r4, #0]
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	2000022c 	.word	0x2000022c

08000e4c <_close_r>:
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	b570      	push	{r4, r5, r6, lr}
 8000e50:	4d06      	ldr	r5, [pc, #24]	; (8000e6c <_close_r+0x20>)
 8000e52:	0004      	movs	r4, r0
 8000e54:	0008      	movs	r0, r1
 8000e56:	602b      	str	r3, [r5, #0]
 8000e58:	f7ff f9c1 	bl	80001de <_close>
 8000e5c:	1c43      	adds	r3, r0, #1
 8000e5e:	d103      	bne.n	8000e68 <_close_r+0x1c>
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <_close_r+0x1c>
 8000e66:	6023      	str	r3, [r4, #0]
 8000e68:	bd70      	pop	{r4, r5, r6, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	2000022c 	.word	0x2000022c

08000e70 <_fstat_r>:
 8000e70:	2300      	movs	r3, #0
 8000e72:	b570      	push	{r4, r5, r6, lr}
 8000e74:	4d06      	ldr	r5, [pc, #24]	; (8000e90 <_fstat_r+0x20>)
 8000e76:	0004      	movs	r4, r0
 8000e78:	0008      	movs	r0, r1
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	f7ff f9b8 	bl	80001f2 <_fstat>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	d103      	bne.n	8000e8e <_fstat_r+0x1e>
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d000      	beq.n	8000e8e <_fstat_r+0x1e>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	2000022c 	.word	0x2000022c

08000e94 <_isatty_r>:
 8000e94:	2300      	movs	r3, #0
 8000e96:	b570      	push	{r4, r5, r6, lr}
 8000e98:	4d06      	ldr	r5, [pc, #24]	; (8000eb4 <_isatty_r+0x20>)
 8000e9a:	0004      	movs	r4, r0
 8000e9c:	0008      	movs	r0, r1
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	f7ff f9b5 	bl	800020e <_isatty>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d103      	bne.n	8000eb0 <_isatty_r+0x1c>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d000      	beq.n	8000eb0 <_isatty_r+0x1c>
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	2000022c 	.word	0x2000022c

08000eb8 <_lseek_r>:
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	0004      	movs	r4, r0
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	4d05      	ldr	r5, [pc, #20]	; (8000edc <_lseek_r+0x24>)
 8000ec6:	602b      	str	r3, [r5, #0]
 8000ec8:	f7ff f9aa 	bl	8000220 <_lseek>
 8000ecc:	1c43      	adds	r3, r0, #1
 8000ece:	d103      	bne.n	8000ed8 <_lseek_r+0x20>
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d000      	beq.n	8000ed8 <_lseek_r+0x20>
 8000ed6:	6023      	str	r3, [r4, #0]
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	2000022c 	.word	0x2000022c

08000ee0 <__malloc_lock>:
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <__malloc_lock+0xc>)
 8000ee4:	f7ff fe29 	bl	8000b3a <__retarget_lock_acquire_recursive>
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000224 	.word	0x20000224

08000ef0 <__malloc_unlock>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <__malloc_unlock+0xc>)
 8000ef4:	f7ff fe22 	bl	8000b3c <__retarget_lock_release_recursive>
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000224 	.word	0x20000224

08000f00 <_read_r>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	0004      	movs	r4, r0
 8000f04:	0008      	movs	r0, r1
 8000f06:	0011      	movs	r1, r2
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4d05      	ldr	r5, [pc, #20]	; (8000f24 <_read_r+0x24>)
 8000f0e:	602b      	str	r3, [r5, #0]
 8000f10:	f7ff f92c 	bl	800016c <_read>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d103      	bne.n	8000f20 <_read_r+0x20>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d000      	beq.n	8000f20 <_read_r+0x20>
 8000f1e:	6023      	str	r3, [r4, #0]
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	2000022c 	.word	0x2000022c

08000f28 <_init>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2e:	bc08      	pop	{r3}
 8000f30:	469e      	mov	lr, r3
 8000f32:	4770      	bx	lr

08000f34 <_fini>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr
