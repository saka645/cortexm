
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002830  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a442  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2b  00000000  00000000  0002a476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f8b2  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c737  00000000  00000000  0003cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060c06  00000000  00000000  000494f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aa0ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000aa154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027c4 	.word	0x080027c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027c4 	.word	0x080027c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d106      	bne.n	8000240 <HAL_TIM_PeriodElapsedCallback+0x20>
        {
        //HAL_GPIO_TogglePin(GPIOC, LD4_Pin);
        HAL_UART_Transmit(&huart1, (uint8_t *)"hello", 5, 1000);
 8000232:	23fa      	movs	r3, #250	; 0xfa
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	4905      	ldr	r1, [pc, #20]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800023a:	2205      	movs	r2, #5
 800023c:	f001 ff32 	bl	80020a4 <HAL_UART_Transmit>
        }
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40000400 	.word	0x40000400
 800024c:	080027dc 	.word	0x080027dc
 8000250:	20000070 	.word	0x20000070

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fa66 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f82e 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f914 	bl	800048c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000264:	f000 f88c 	bl	8000380 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000268:	f000 f8e0 	bl	800042c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, LD3_Pin, GPIO_PIN_SET);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <main+0x5c>)
 8000272:	2201      	movs	r2, #1
 8000274:	0019      	movs	r1, r3
 8000276:	f000 fd2d 	bl	8000cd4 <HAL_GPIO_WritePin>

  HAL_PWR_EnableSleepOnExit();
 800027a:	f000 fd63 	bl	8000d44 <HAL_PWR_EnableSleepOnExit>
  /* USER CODE END 2 */
  TIM3->SR = 0;
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <main+0x60>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0x64>)
 8000286:	0018      	movs	r0, r3
 8000288:	f001 faa4 	bl	80017d4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <main+0x64>)
 800028e:	0018      	movs	r0, r3
 8000290:	f001 faf0 	bl	8001874 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, LD3_Pin);
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <main+0x5c>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f000 fd36 	bl	8000d0e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 faa2 	bl	80007f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LD3_Pin);
 80002ac:	e7f2      	b.n	8000294 <main+0x40>
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	48000800 	.word	0x48000800
 80002b4:	40000400 	.word	0x40000400
 80002b8:	20000028 	.word	0x20000028

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b095      	sub	sp, #84	; 0x54
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2420      	movs	r4, #32
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2330      	movs	r3, #48	; 0x30
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 fa71 	bl	80027b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	2310      	movs	r3, #16
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fa69 	bl	80027b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	003b      	movs	r3, r7
 80002e4:	0018      	movs	r0, r3
 80002e6:	2310      	movs	r3, #16
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 fa62 	bl	80027b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	0392      	lsls	r2, r2, #14
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fd1d 	bl	8000d60 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800032a:	f000 f90b 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	2110      	movs	r1, #16
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2202      	movs	r2, #2
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 f821 	bl	8001394 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000356:	f000 f8f5 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800035a:	003b      	movs	r3, r7
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f965 	bl	8001638 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000372:	f000 f8e7 	bl	8000544 <Error_Handler>
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b015      	add	sp, #84	; 0x54
 800037c:	bd90      	pop	{r4, r7, pc}
	...

08000380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	2308      	movs	r3, #8
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2310      	movs	r3, #16
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f002 fa0f 	bl	80027b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	2308      	movs	r3, #8
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f002 fa08 	bl	80027b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003a6:	4a1f      	ldr	r2, [pc, #124]	; (8000424 <MX_TIM3_Init+0xa4>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003ac:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <MX_TIM3_Init+0xa8>)
 80003ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003b8:	22f4      	movs	r2, #244	; 0xf4
 80003ba:	32ff      	adds	r2, #255	; 0xff
 80003bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fa01 	bl	80017d4 <HAL_TIM_Base_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80003d6:	f000 f8b5 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003da:	2108      	movs	r1, #8
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003e4:	187a      	adds	r2, r7, r1
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_TIM3_Init+0xa0>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fba4 	bl	8001b38 <HAL_TIM_ConfigClockSource>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80003f4:	f000 f8a6 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fe:	003b      	movs	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000404:	003a      	movs	r2, r7
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_TIM3_Init+0xa0>)
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fd8e 	bl	8001f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000414:	f000 f896 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b006      	add	sp, #24
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	40000400 	.word	0x40000400
 8000428:	0000bb80 	.word	0x0000bb80

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_USART1_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000438:	2296      	movs	r2, #150	; 0x96
 800043a:	0192      	lsls	r2, r2, #6
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fdc3 	bl	8001ffc <HAL_UART_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f863 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000070 	.word	0x20000070
 8000488:	40013800 	.word	0x40013800

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f002 f989 	bl	80027b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_GPIO_Init+0xac>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <MX_GPIO_Init+0xac>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0289      	lsls	r1, r1, #10
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <MX_GPIO_Init+0xac>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	029b      	lsls	r3, r3, #10
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0xac>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_GPIO_Init+0xac>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0309      	lsls	r1, r1, #12
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_GPIO_Init+0xac>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	031b      	lsls	r3, r3, #12
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004da:	23c0      	movs	r3, #192	; 0xc0
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4817      	ldr	r0, [pc, #92]	; (800053c <MX_GPIO_Init+0xb0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f000 fbf6 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <MX_GPIO_Init+0xb4>)
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	193a      	adds	r2, r7, r4
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fa76 	bl	80009f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000508:	0021      	movs	r1, r4
 800050a:	187b      	adds	r3, r7, r1
 800050c:	22c0      	movs	r2, #192	; 0xc0
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000524:	187b      	adds	r3, r7, r1
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <MX_GPIO_Init+0xb0>)
 8000528:	0019      	movs	r1, r3
 800052a:	0010      	movs	r0, r2
 800052c:	f000 fa62 	bl	80009f4 <HAL_GPIO_Init>

}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b009      	add	sp, #36	; 0x24
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48000800 	.word	0x48000800
 8000540:	10120000 	.word	0x10120000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_MspInit+0x44>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <HAL_TIM_Base_MspInit+0x44>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d113      	bne.n	80005d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_TIM_Base_MspInit+0x48>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_TIM_Base_MspInit+0x48>)
 80005b0:	2102      	movs	r1, #2
 80005b2:	430a      	orrs	r2, r1
 80005b4:	61da      	str	r2, [r3, #28]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_TIM_Base_MspInit+0x48>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	2202      	movs	r2, #2
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 f9e2 	bl	8000990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 f9f4 	bl	80009ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b004      	add	sp, #16
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40000400 	.word	0x40000400
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08b      	sub	sp, #44	; 0x2c
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	2414      	movs	r4, #20
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f002 f8dc 	bl	80027b4 <memset>
  if(huart->Instance==USART1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <HAL_UART_MspInit+0x94>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d133      	bne.n	800066e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <HAL_UART_MspInit+0x98>)
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <HAL_UART_MspInit+0x98>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	01c9      	lsls	r1, r1, #7
 8000610:	430a      	orrs	r2, r1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_UART_MspInit+0x98>)
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	01db      	lsls	r3, r3, #7
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_UART_MspInit+0x98>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_UART_MspInit+0x98>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0289      	lsls	r1, r1, #10
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_UART_MspInit+0x98>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	029b      	lsls	r3, r3, #10
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	22c0      	movs	r2, #192	; 0xc0
 8000642:	00d2      	lsls	r2, r2, #3
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2202      	movs	r2, #2
 800064c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2203      	movs	r2, #3
 8000658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	187a      	adds	r2, r7, r1
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 f9c3 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b00b      	add	sp, #44	; 0x2c
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40013800 	.word	0x40013800
 800067c:	40021000 	.word	0x40021000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f888 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <TIM3_IRQHandler+0x14>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f928 	bl	800190c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOC, LD4_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000028 	.word	0x20000028

080006c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490e      	ldr	r1, [pc, #56]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0b      	ldr	r4, [pc, #44]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fe:	f7ff ffe3 	bl	80006c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000702:	f002 f833 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fda5 	bl	8000254 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   r0, =_estack
 800070c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	200000f8 	.word	0x200000f8

08000724 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_IRQHandler>
	...

08000728 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_Init+0x24>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_Init+0x24>)
 8000732:	2110      	movs	r1, #16
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f809 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073e:	f7ff ff07 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_InitTick+0x5c>)
 800075a:	681c      	ldr	r4, [r3, #0]
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_InitTick+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	0019      	movs	r1, r3
 8000762:	23fa      	movs	r3, #250	; 0xfa
 8000764:	0098      	lsls	r0, r3, #2
 8000766:	f7ff fccf 	bl	8000108 <__udivsi3>
 800076a:	0003      	movs	r3, r0
 800076c:	0019      	movs	r1, r3
 800076e:	0020      	movs	r0, r4
 8000770:	f7ff fcca 	bl	8000108 <__udivsi3>
 8000774:	0003      	movs	r3, r0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f92f 	bl	80009da <HAL_SYSTICK_Config>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e00f      	b.n	80007a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d80b      	bhi.n	80007a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	2200      	movs	r2, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f8fc 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_InitTick+0x64>)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b003      	add	sp, #12
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	18d2      	adds	r2, r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_IncTick+0x20>)
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008
 80007d8:	200000f4 	.word	0x200000f4

080007dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	200000f4 	.word	0x200000f4

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff0 	bl	80007dc <HAL_GetTick>
 80007fc:	0003      	movs	r3, r0
 80007fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	d005      	beq.n	8000816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_Delay+0x44>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	001a      	movs	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	189b      	adds	r3, r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	f7ff ffe0 	bl	80007dc <HAL_GetTick>
 800081c:	0002      	movs	r2, r0
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f7      	bhi.n	8000818 <HAL_Delay+0x28>
  {
  }
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b7f      	cmp	r3, #127	; 0x7f
 800084a:	d809      	bhi.n	8000860 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	231f      	movs	r3, #31
 8000854:	401a      	ands	r2, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_EnableIRQ+0x30>)
 8000858:	2101      	movs	r1, #1
 800085a:	4091      	lsls	r1, r2
 800085c:	000a      	movs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
  }
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b7f      	cmp	r3, #127	; 0x7f
 8000880:	d828      	bhi.n	80008d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <__NVIC_SetPriority+0xd4>)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	589b      	ldr	r3, [r3, r2]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <__NVIC_SetPriority+0xd4>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	430a      	orrs	r2, r1
 80008cc:	33c0      	adds	r3, #192	; 0xc0
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d2:	e031      	b.n	8000938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0019      	movs	r1, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	400b      	ands	r3, r1
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	3306      	adds	r3, #6
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	3304      	adds	r3, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	; 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <__NVIC_SetPriority+0xd8>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001c      	movs	r4, r3
 8000924:	230f      	movs	r3, #15
 8000926:	4023      	ands	r3, r4
 8000928:	3b08      	subs	r3, #8
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	3306      	adds	r3, #6
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	3304      	adds	r3, #4
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	429a      	cmp	r2, r3
 800095a:	d301      	bcc.n	8000960 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095c:	2301      	movs	r3, #1
 800095e:	e010      	b.n	8000982 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SysTick_Config+0x44>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	3a01      	subs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000968:	2301      	movs	r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	2103      	movs	r1, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff7c 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x44>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	210f      	movs	r1, #15
 800099c:	187b      	adds	r3, r7, r1
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	0002      	movs	r2, r0
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff33 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffaf 	bl	8000948 <SysTick_Config>
 80009ea:	0003      	movs	r3, r0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e14f      	b.n	8000ca4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <HAL_GPIO_Init+0x28>
 8000a1a:	e140      	b.n	8000c9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d00b      	beq.n	8000a3c <HAL_GPIO_Init+0x48>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a30:	2b11      	cmp	r3, #17
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b12      	cmp	r3, #18
 8000a3a:	d130      	bne.n	8000a9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	43da      	mvns	r2, r3
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	0013      	movs	r3, r2
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a72:	2201      	movs	r2, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0xea>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	58d3      	ldr	r3, [r2, r3]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2207      	movs	r2, #7
 8000af0:	4013      	ands	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2107      	movs	r1, #7
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	6939      	ldr	r1, [r7, #16]
 8000b24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2203      	movs	r2, #3
 8000b44:	401a      	ands	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	055b      	lsls	r3, r3, #21
 8000b62:	4013      	ands	r3, r2
 8000b64:	d100      	bne.n	8000b68 <HAL_GPIO_Init+0x174>
 8000b66:	e09a      	b.n	8000c9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b54      	ldr	r3, [pc, #336]	; (8000cbc <HAL_GPIO_Init+0x2c8>)
 8000b6a:	699a      	ldr	r2, [r3, #24]
 8000b6c:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <HAL_GPIO_Init+0x2c8>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	619a      	str	r2, [r3, #24]
 8000b74:	4b51      	ldr	r3, [pc, #324]	; (8000cbc <HAL_GPIO_Init+0x2c8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a4f      	ldr	r2, [pc, #316]	; (8000cc0 <HAL_GPIO_Init+0x2cc>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	589b      	ldr	r3, [r3, r2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2203      	movs	r2, #3
 8000b92:	4013      	ands	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	2390      	movs	r3, #144	; 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d013      	beq.n	8000bd6 <HAL_GPIO_Init+0x1e2>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d00d      	beq.n	8000bd2 <HAL_GPIO_Init+0x1de>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d007      	beq.n	8000bce <HAL_GPIO_Init+0x1da>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_GPIO_Init+0x1d6>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e006      	b.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e004      	b.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e002      	b.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	2103      	movs	r1, #3
 8000bdc:	400a      	ands	r2, r1
 8000bde:	0092      	lsls	r2, r2, #2
 8000be0:	4093      	lsls	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000be8:	4935      	ldr	r1, [pc, #212]	; (8000cc0 <HAL_GPIO_Init+0x2cc>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	025b      	lsls	r3, r3, #9
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43da      	mvns	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	035b      	lsls	r3, r3, #13
 8000c62:	4013      	ands	r3, r2
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	039b      	lsls	r3, r3, #14
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	40da      	lsrs	r2, r3
 8000cac:	1e13      	subs	r3, r2, #0
 8000cae:	d000      	beq.n	8000cb2 <HAL_GPIO_Init+0x2be>
 8000cb0:	e6a8      	b.n	8000a04 <HAL_GPIO_Init+0x10>
  } 
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b006      	add	sp, #24
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	0008      	movs	r0, r1
 8000cde:	0011      	movs	r1, r2
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	1c02      	adds	r2, r0, #0
 8000ce4:	801a      	strh	r2, [r3, #0]
 8000ce6:	1c7b      	adds	r3, r7, #1
 8000ce8:	1c0a      	adds	r2, r1, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	1c7b      	adds	r3, r7, #1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf4:	1cbb      	adds	r3, r7, #2
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e003      	b.n	8000d06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	000a      	movs	r2, r1
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	041a      	lsls	r2, r3, #16
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	1cb9      	adds	r1, r7, #2
 8000d32:	8809      	ldrh	r1, [r1, #0]
 8000d34:	400b      	ands	r3, r1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	619a      	str	r2, [r3, #24]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_PWR_EnableSleepOnExit+0x18>)
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_PWR_EnableSleepOnExit+0x18>)
 8000d4e:	2102      	movs	r1, #2
 8000d50:	430a      	orrs	r2, r1
 8000d52:	611a      	str	r2, [r3, #16]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e301      	b.n	8001376 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2201      	movs	r2, #1
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d100      	bne.n	8000d7e <HAL_RCC_OscConfig+0x1e>
 8000d7c:	e08d      	b.n	8000e9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d7e:	4bc3      	ldr	r3, [pc, #780]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	220c      	movs	r2, #12
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d00e      	beq.n	8000da8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8a:	4bc0      	ldr	r3, [pc, #768]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	220c      	movs	r2, #12
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x64>
 8000d96:	4bbd      	ldr	r3, [pc, #756]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	025b      	lsls	r3, r3, #9
 8000d9e:	401a      	ands	r2, r3
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d10d      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	4bb8      	ldr	r3, [pc, #736]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	029b      	lsls	r3, r3, #10
 8000db0:	4013      	ands	r3, r2
 8000db2:	d100      	bne.n	8000db6 <HAL_RCC_OscConfig+0x56>
 8000db4:	e070      	b.n	8000e98 <HAL_RCC_OscConfig+0x138>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d000      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x60>
 8000dbe:	e06b      	b.n	8000e98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e2d8      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d107      	bne.n	8000ddc <HAL_RCC_OscConfig+0x7c>
 8000dcc:	4baf      	ldr	r3, [pc, #700]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4bae      	ldr	r3, [pc, #696]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02f      	b.n	8000e3c <HAL_RCC_OscConfig+0xdc>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x9e>
 8000de4:	4ba9      	ldr	r3, [pc, #676]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4ba8      	ldr	r3, [pc, #672]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000dea:	49a9      	ldr	r1, [pc, #676]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	4ba6      	ldr	r3, [pc, #664]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4ba5      	ldr	r3, [pc, #660]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000df6:	49a7      	ldr	r1, [pc, #668]	; (8001094 <HAL_RCC_OscConfig+0x334>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e01e      	b.n	8000e3c <HAL_RCC_OscConfig+0xdc>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d10e      	bne.n	8000e24 <HAL_RCC_OscConfig+0xc4>
 8000e06:	4ba1      	ldr	r3, [pc, #644]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	02c9      	lsls	r1, r1, #11
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	4b9d      	ldr	r3, [pc, #628]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b9c      	ldr	r3, [pc, #624]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xdc>
 8000e24:	4b99      	ldr	r3, [pc, #612]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b98      	ldr	r3, [pc, #608]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	4999      	ldr	r1, [pc, #612]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4b96      	ldr	r3, [pc, #600]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b95      	ldr	r3, [pc, #596]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e36:	4997      	ldr	r1, [pc, #604]	; (8001094 <HAL_RCC_OscConfig+0x334>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d014      	beq.n	8000e6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fcca 	bl	80007dc <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4e:	f7ff fcc5 	bl	80007dc <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e28a      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e60:	4b8a      	ldr	r3, [pc, #552]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	029b      	lsls	r3, r3, #10
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0xee>
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fcb5 	bl	80007dc <HAL_GetTick>
 8000e72:	0003      	movs	r3, r0
 8000e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fcb0 	bl	80007dc <HAL_GetTick>
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e275      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	4b80      	ldr	r3, [pc, #512]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x118>
 8000e96:	e000      	b.n	8000e9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x146>
 8000ea4:	e069      	b.n	8000f7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea6:	4b79      	ldr	r3, [pc, #484]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	220c      	movs	r2, #12
 8000eac:	4013      	ands	r3, r2
 8000eae:	d00b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb0:	4b76      	ldr	r3, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d11c      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x196>
 8000ebc:	4b73      	ldr	r3, [pc, #460]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d116      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec8:	4b70      	ldr	r3, [pc, #448]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d005      	beq.n	8000ede <HAL_RCC_OscConfig+0x17e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e24b      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b6b      	ldr	r3, [pc, #428]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	22f8      	movs	r2, #248	; 0xf8
 8000ee4:	4393      	bics	r3, r2
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	00da      	lsls	r2, r3, #3
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef4:	e041      	b.n	8000f7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d024      	beq.n	8000f48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b62      	ldr	r3, [pc, #392]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc67 	bl	80007dc <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc62 	bl	80007dc <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e227      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f26:	4b59      	ldr	r3, [pc, #356]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d0f1      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	22f8      	movs	r2, #248	; 0xf8
 8000f36:	4393      	bics	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e018      	b.n	8000f7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f48:	4b50      	ldr	r3, [pc, #320]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b4f      	ldr	r3, [pc, #316]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc42 	bl	80007dc <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc3d 	bl	80007dc <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e202      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2202      	movs	r2, #2
 8000f76:	4013      	ands	r3, r2
 8000f78:	d1f1      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2208      	movs	r2, #8
 8000f80:	4013      	ands	r3, r2
 8000f82:	d036      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d019      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f90:	4b3e      	ldr	r3, [pc, #248]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fc20 	bl	80007dc <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fc1b 	bl	80007dc <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1e0      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d0f1      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x242>
 8000fbe:	e018      	b.n	8000ff2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	438a      	bics	r2, r1
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fc06 	bl	80007dc <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc01 	bl	80007dc <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1c6      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d1f1      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x29e>
 8000ffc:	e0b4      	b.n	8001168 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffe:	201f      	movs	r0, #31
 8001000:	183b      	adds	r3, r7, r0
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001008:	69da      	ldr	r2, [r3, #28]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	4013      	ands	r3, r2
 8001010:	d110      	bne.n	8001034 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001014:	69da      	ldr	r2, [r3, #28]
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0549      	lsls	r1, r1, #21
 800101c:	430a      	orrs	r2, r1
 800101e:	61da      	str	r2, [r3, #28]
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800102e:	183b      	adds	r3, r7, r0
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4013      	ands	r3, r2
 800103e:	d11a      	bne.n	8001076 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_RCC_OscConfig+0x338>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_RCC_OscConfig+0x338>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	0049      	lsls	r1, r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104e:	f7ff fbc5 	bl	80007dc <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001058:	f7ff fbc0 	bl	80007dc <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e185      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x338>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4013      	ands	r3, r2
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10e      	bne.n	800109c <HAL_RCC_OscConfig+0x33c>
 800107e:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	621a      	str	r2, [r3, #32]
 800108a:	e035      	b.n	80010f8 <HAL_RCC_OscConfig+0x398>
 800108c:	40021000 	.word	0x40021000
 8001090:	fffeffff 	.word	0xfffeffff
 8001094:	fffbffff 	.word	0xfffbffff
 8001098:	40007000 	.word	0x40007000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x35e>
 80010a4:	4bb6      	ldr	r3, [pc, #728]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4bb5      	ldr	r3, [pc, #724]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	438a      	bics	r2, r1
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	4bb3      	ldr	r3, [pc, #716]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4bb2      	ldr	r3, [pc, #712]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	e01c      	b.n	80010f8 <HAL_RCC_OscConfig+0x398>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x380>
 80010c6:	4bae      	ldr	r3, [pc, #696]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	4bad      	ldr	r3, [pc, #692]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	621a      	str	r2, [r3, #32]
 80010d2:	4bab      	ldr	r3, [pc, #684]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	4baa      	ldr	r3, [pc, #680]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	621a      	str	r2, [r3, #32]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x398>
 80010e0:	4ba7      	ldr	r3, [pc, #668]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4ba6      	ldr	r3, [pc, #664]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	621a      	str	r2, [r3, #32]
 80010ec:	4ba4      	ldr	r3, [pc, #656]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4ba3      	ldr	r3, [pc, #652]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	438a      	bics	r2, r1
 80010f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d014      	beq.n	800112a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fb6c 	bl	80007dc <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e009      	b.n	800111e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb67 	bl	80007dc <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a9b      	ldr	r2, [pc, #620]	; (8001384 <HAL_RCC_OscConfig+0x624>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e12b      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111e:	4b98      	ldr	r3, [pc, #608]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x3aa>
 8001128:	e013      	b.n	8001152 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fb57 	bl	80007dc <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	e009      	b.n	8001148 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001134:	f7ff fb52 	bl	80007dc <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	4a91      	ldr	r2, [pc, #580]	; (8001384 <HAL_RCC_OscConfig+0x624>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e116      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	4b8d      	ldr	r3, [pc, #564]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001152:	231f      	movs	r3, #31
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d105      	bne.n	8001168 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115c:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	4b87      	ldr	r3, [pc, #540]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001162:	4989      	ldr	r1, [pc, #548]	; (8001388 <HAL_RCC_OscConfig+0x628>)
 8001164:	400a      	ands	r2, r1
 8001166:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2210      	movs	r2, #16
 800116e:	4013      	ands	r3, r2
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d12a      	bne.n	80011d0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800117a:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001180:	2104      	movs	r1, #4
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001186:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fb23 	bl	80007dc <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800119c:	f7ff fb1e 	bl	80007dc <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0e3      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f1      	beq.n	800119c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011b8:	4b71      	ldr	r3, [pc, #452]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	22f8      	movs	r2, #248	; 0xf8
 80011be:	4393      	bics	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
 80011ce:	e034      	b.n	800123a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	3305      	adds	r3, #5
 80011d6:	d111      	bne.n	80011fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011de:	2104      	movs	r1, #4
 80011e0:	438a      	bics	r2, r1
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e4:	4b66      	ldr	r3, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	22f8      	movs	r2, #248	; 0xf8
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001202:	2104      	movs	r1, #4
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001208:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800120e:	2101      	movs	r1, #1
 8001210:	438a      	bics	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff fae2 	bl	80007dc <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800121e:	f7ff fadd 	bl	80007dc <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0a2      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	2202      	movs	r2, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d1f1      	bne.n	800121e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x4e4>
 8001242:	e097      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	2b08      	cmp	r3, #8
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x4f2>
 8001250:	e06b      	b.n	800132a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d14c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001260:	494a      	ldr	r1, [pc, #296]	; (800138c <HAL_RCC_OscConfig+0x62c>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fab9 	bl	80007dc <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fab4 	bl	80007dc <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e079      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	220f      	movs	r2, #15
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <HAL_RCC_OscConfig+0x630>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4b32      	ldr	r3, [pc, #200]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0449      	lsls	r1, r1, #17
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fa87 	bl	80007dc <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fa82 	bl	80007dc <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e047      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	049b      	lsls	r3, r3, #18
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x574>
 80012f2:	e03f      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 80012fa:	4924      	ldr	r1, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x62c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fa6c 	bl	80007dc <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fa67 	bl	80007dc <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e02c      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	049b      	lsls	r3, r3, #18
 8001324:	4013      	ands	r3, r2
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x5aa>
 8001328:	e024      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e01f      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_RCC_OscConfig+0x620>)
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	429a      	cmp	r2, r3
 8001350:	d10e      	bne.n	8001370 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	220f      	movs	r2, #15
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	23f0      	movs	r3, #240	; 0xf0
 8001364:	039b      	lsls	r3, r3, #14
 8001366:	401a      	ands	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b008      	add	sp, #32
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40021000 	.word	0x40021000
 8001384:	00001388 	.word	0x00001388
 8001388:	efffffff 	.word	0xefffffff
 800138c:	feffffff 	.word	0xfeffffff
 8001390:	ffc2ffff 	.word	0xffc2ffff

08001394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b3      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d911      	bls.n	80013da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4393      	bics	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d001      	beq.n	80013da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e09a      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d015      	beq.n	8001410 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2204      	movs	r2, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d006      	beq.n	80013fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80013f4:	21e0      	movs	r1, #224	; 0xe0
 80013f6:	00c9      	lsls	r1, r1, #3
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	22f0      	movs	r2, #240	; 0xf0
 8001402:	4393      	bics	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	d040      	beq.n	800149c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d114      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06e      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	049b      	lsls	r3, r3, #18
 8001442:	4013      	ands	r3, r2
 8001444:	d108      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e062      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e05b      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4393      	bics	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff f9b6 	bl	80007dc <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001474:	e009      	b.n	800148a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001476:	f7ff f9b1 	bl	80007dc <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_RCC_ClockConfig+0x18c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e042      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	220c      	movs	r2, #12
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1ec      	bne.n	8001476 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d211      	bcs.n	80014ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4393      	bics	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_RCC_ClockConfig+0x184>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e020      	b.n	8001510 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d009      	beq.n	80014ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_RCC_ClockConfig+0x190>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014ec:	f000 f820 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80014f0:	0001      	movs	r1, r0
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x188>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	220f      	movs	r2, #15
 80014fa:	4013      	ands	r3, r2
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_RCC_ClockConfig+0x194>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	000a      	movs	r2, r1
 8001502:	40da      	lsrs	r2, r3
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_ClockConfig+0x198>)
 8001506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff f921 	bl	8000750 <HAL_InitTick>
  
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000
 800151c:	40021000 	.word	0x40021000
 8001520:	00001388 	.word	0x00001388
 8001524:	fffff8ff 	.word	0xfffff8ff
 8001528:	08002804 	.word	0x08002804
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08f      	sub	sp, #60	; 0x3c
 8001534:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001536:	2314      	movs	r3, #20
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800153c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800153e:	c313      	stmia	r3!, {r0, r1, r4}
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800154a:	c313      	stmia	r3!, {r0, r1, r4}
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b04      	cmp	r3, #4
 8001572:	d002      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x4a>
 8001574:	2b08      	cmp	r3, #8
 8001576:	d003      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x50>
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800157e:	e02d      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	220f      	movs	r2, #15
 8001586:	4013      	ands	r3, r2
 8001588:	2214      	movs	r2, #20
 800158a:	18ba      	adds	r2, r7, r2
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	220f      	movs	r2, #15
 8001596:	4013      	ands	r3, r2
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800159e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	4013      	ands	r3, r2
 80015a6:	d009      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015ac:	f7fe fdac 	bl	8000108 <__udivsi3>
 80015b0:	0003      	movs	r3, r0
 80015b2:	001a      	movs	r2, r3
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	4353      	muls	r3, r2
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
 80015ba:	e009      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015be:	000a      	movs	r2, r1
 80015c0:	0152      	lsls	r2, r2, #5
 80015c2:	1a52      	subs	r2, r2, r1
 80015c4:	0193      	lsls	r3, r2, #6
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	185b      	adds	r3, r3, r1
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80015d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015d4:	e002      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b00f      	add	sp, #60	; 0x3c
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	080027e4 	.word	0x080027e4
 80015ec:	080027f4 	.word	0x080027f4
 80015f0:	40021000 	.word	0x40021000
 80015f4:	007a1200 	.word	0x007a1200

080015f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001610:	f7ff fff2 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 8001614:	0001      	movs	r1, r0
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	2207      	movs	r2, #7
 800161e:	4013      	ands	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	40d9      	lsrs	r1, r3
 8001626:	000b      	movs	r3, r1
}    
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	08002814 	.word	0x08002814

08001638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001654:	e08e      	b.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2017      	movs	r0, #23
 8001658:	183b      	adds	r3, r7, r0
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b57      	ldr	r3, [pc, #348]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	055b      	lsls	r3, r3, #21
 8001666:	4013      	ands	r3, r2
 8001668:	d110      	bne.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	0549      	lsls	r1, r1, #21
 8001674:	430a      	orrs	r2, r1
 8001676:	61da      	str	r2, [r3, #28]
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	055b      	lsls	r3, r3, #21
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	183b      	adds	r3, r7, r0
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d11a      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0049      	lsls	r1, r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff f899 	bl	80007dc <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	e008      	b.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff f894 	bl	80007dc <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e077      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	23c0      	movs	r3, #192	; 0xc0
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d034      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d02c      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0249      	lsls	r1, r1, #9
 8001704:	430a      	orrs	r2, r1
 8001706:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800170e:	492e      	ldr	r1, [pc, #184]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001710:	400a      	ands	r2, r1
 8001712:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f85b 	bl	80007dc <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e009      	b.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f856 	bl	80007dc <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e038      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d0f0      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800175a:	430a      	orrs	r2, r1
 800175c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800175e:	2317      	movs	r3, #23
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800176e:	4918      	ldr	r1, [pc, #96]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001770:	400a      	ands	r2, r1
 8001772:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	4013      	ands	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	2203      	movs	r2, #3
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800178e:	430a      	orrs	r2, r1
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2220      	movs	r2, #32
 8001798:	4013      	ands	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	2210      	movs	r2, #16
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b006      	add	sp, #24
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffffcff 	.word	0xfffffcff
 80017c8:	fffeffff 	.word	0xfffeffff
 80017cc:	00001388 	.word	0x00001388
 80017d0:	efffffff 	.word	0xefffffff

080017d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e042      	b.n	800186c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	223d      	movs	r2, #61	; 0x3d
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	223c      	movs	r2, #60	; 0x3c
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7fe fecb 	bl	8000598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223d      	movs	r2, #61	; 0x3d
 8001806:	2102      	movs	r1, #2
 8001808:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	0019      	movs	r1, r3
 8001814:	0010      	movs	r0, r2
 8001816:	f000 fa79 	bl	8001d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2246      	movs	r2, #70	; 0x46
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	223e      	movs	r2, #62	; 0x3e
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2241      	movs	r2, #65	; 0x41
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2242      	movs	r2, #66	; 0x42
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2243      	movs	r2, #67	; 0x43
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2244      	movs	r2, #68	; 0x44
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2245      	movs	r2, #69	; 0x45
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	223d      	movs	r2, #61	; 0x3d
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	223d      	movs	r2, #61	; 0x3d
 8001880:	5c9b      	ldrb	r3, [r3, r2]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d001      	beq.n	800188c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e035      	b.n	80018f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	223d      	movs	r2, #61	; 0x3d
 8001890:	2102      	movs	r1, #2
 8001892:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_TIM_Base_Start_IT+0x8c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d009      	beq.n	80018c2 <HAL_TIM_Base_Start_IT+0x4e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_TIM_Base_Start_IT+0x90>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d004      	beq.n	80018c2 <HAL_TIM_Base_Start_IT+0x4e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_TIM_Base_Start_IT+0x94>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d111      	bne.n	80018e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2207      	movs	r2, #7
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	d010      	beq.n	80018f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2101      	movs	r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e4:	e007      	b.n	80018f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40000400 	.word	0x40000400
 8001908:	40014000 	.word	0x40014000

0800190c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d124      	bne.n	800196c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	2b02      	cmp	r3, #2
 800192e:	d11d      	bne.n	800196c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2203      	movs	r2, #3
 8001936:	4252      	negs	r2, r2
 8001938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2203      	movs	r2, #3
 8001948:	4013      	ands	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f9c4 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001954:	e007      	b.n	8001966 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f9b7 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 f9c3 	bl	8001cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
 8001976:	2b04      	cmp	r3, #4
 8001978:	d125      	bne.n	80019c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	2b04      	cmp	r3, #4
 8001986:	d11e      	bne.n	80019c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2205      	movs	r2, #5
 800198e:	4252      	negs	r2, r2
 8001990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f997 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 80019ae:	e007      	b.n	80019c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f98a 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 f996 	bl	8001cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2208      	movs	r2, #8
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d124      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2208      	movs	r2, #8
 80019dc:	4013      	ands	r3, r2
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11d      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2209      	movs	r2, #9
 80019e8:	4252      	negs	r2, r2
 80019ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2203      	movs	r2, #3
 80019fa:	4013      	ands	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f96b 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001a06:	e007      	b.n	8001a18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 f95e 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f96a 	bl	8001cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2210      	movs	r2, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d125      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2210      	movs	r2, #16
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d11e      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2211      	movs	r2, #17
 8001a40:	4252      	negs	r2, r2
 8001a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2208      	movs	r2, #8
 8001a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d004      	beq.n	8001a62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f93e 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001a60:	e007      	b.n	8001a72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 f931 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f93d 	bl	8001cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10f      	bne.n	8001aa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4252      	negs	r2, r2
 8001a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe fbbd 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b80      	cmp	r3, #128	; 0x80
 8001ac0:	d108      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2281      	movs	r2, #129	; 0x81
 8001ac8:	4252      	negs	r2, r2
 8001aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 fa8c 	bl	8001fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b40      	cmp	r3, #64	; 0x40
 8001ae0:	d10f      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d108      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2241      	movs	r2, #65	; 0x41
 8001af6:	4252      	negs	r2, r2
 8001af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f8fd 	bl	8001cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d10f      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d108      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2221      	movs	r2, #33	; 0x21
 8001b24:	4252      	negs	r2, r2
 8001b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fa56 	bl	8001fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223c      	movs	r2, #60	; 0x3c
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_TIM_ConfigClockSource+0x18>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x188>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	223c      	movs	r2, #60	; 0x3c
 8001b54:	2101      	movs	r1, #1
 8001b56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	223d      	movs	r2, #61	; 0x3d
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2277      	movs	r2, #119	; 0x77
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a55      	ldr	r2, [pc, #340]	; (8001cc8 <HAL_TIM_ConfigClockSource+0x190>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0192      	lsls	r2, r2, #6
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d040      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xd6>
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0192      	lsls	r2, r2, #6
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d900      	bls.n	8001b96 <HAL_TIM_ConfigClockSource+0x5e>
 8001b94:	e088      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0152      	lsls	r2, r2, #5
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d100      	bne.n	8001ba0 <HAL_TIM_ConfigClockSource+0x68>
 8001b9e:	e085      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x174>
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0152      	lsls	r2, r2, #5
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d900      	bls.n	8001baa <HAL_TIM_ConfigClockSource+0x72>
 8001ba8:	e07e      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001baa:	2b70      	cmp	r3, #112	; 0x70
 8001bac:	d018      	beq.n	8001be0 <HAL_TIM_ConfigClockSource+0xa8>
 8001bae:	d900      	bls.n	8001bb2 <HAL_TIM_ConfigClockSource+0x7a>
 8001bb0:	e07a      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bb2:	2b60      	cmp	r3, #96	; 0x60
 8001bb4:	d04f      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x11e>
 8001bb6:	d900      	bls.n	8001bba <HAL_TIM_ConfigClockSource+0x82>
 8001bb8:	e076      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bba:	2b50      	cmp	r3, #80	; 0x50
 8001bbc:	d03b      	beq.n	8001c36 <HAL_TIM_ConfigClockSource+0xfe>
 8001bbe:	d900      	bls.n	8001bc2 <HAL_TIM_ConfigClockSource+0x8a>
 8001bc0:	e072      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d057      	beq.n	8001c76 <HAL_TIM_ConfigClockSource+0x13e>
 8001bc6:	d900      	bls.n	8001bca <HAL_TIM_ConfigClockSource+0x92>
 8001bc8:	e06e      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bca:	2b30      	cmp	r3, #48	; 0x30
 8001bcc:	d063      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15e>
 8001bce:	d86b      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d060      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15e>
 8001bd4:	d868      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d05d      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15e>
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d05b      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bde:	e063      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f000 f97c 	bl	8001eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2277      	movs	r2, #119	; 0x77
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]
      break;
 8001c0c:	e04f      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f000 f965 	bl	8001eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	01c9      	lsls	r1, r1, #7
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
      break;
 8001c34:	e03b      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	001a      	movs	r2, r3
 8001c44:	f000 f8d8 	bl	8001df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2150      	movs	r1, #80	; 0x50
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f932 	bl	8001eb8 <TIM_ITRx_SetConfig>
      break;
 8001c54:	e02b      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6859      	ldr	r1, [r3, #4]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	001a      	movs	r2, r3
 8001c64:	f000 f8f6 	bl	8001e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2160      	movs	r1, #96	; 0x60
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f922 	bl	8001eb8 <TIM_ITRx_SetConfig>
      break;
 8001c74:	e01b      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	001a      	movs	r2, r3
 8001c84:	f000 f8b8 	bl	8001df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 f912 	bl	8001eb8 <TIM_ITRx_SetConfig>
      break;
 8001c94:	e00b      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f000 f909 	bl	8001eb8 <TIM_ITRx_SetConfig>
        break;
 8001ca6:	e002      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	e000      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001cac:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223d      	movs	r2, #61	; 0x3d
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223c      	movs	r2, #60	; 0x3c
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	ffff00ff 	.word	0xffff00ff

08001ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <TIM_Base_SetConfig+0xd0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0x20>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <TIM_Base_SetConfig+0xd4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d108      	bne.n	8001d3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2270      	movs	r2, #112	; 0x70
 8001d30:	4393      	bics	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <TIM_Base_SetConfig+0xd0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <TIM_Base_SetConfig+0xd4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <TIM_Base_SetConfig+0xd8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <TIM_Base_SetConfig+0xdc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <TIM_Base_SetConfig+0xe0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <TIM_Base_SetConfig+0xe4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <TIM_Base_SetConfig+0xe8>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	4393      	bics	r3, r2
 8001d86:	001a      	movs	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <TIM_Base_SetConfig+0xd0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00b      	beq.n	8001dc6 <TIM_Base_SetConfig+0xba>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <TIM_Base_SetConfig+0xdc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <TIM_Base_SetConfig+0xba>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <TIM_Base_SetConfig+0xe0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_Base_SetConfig+0xba>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <TIM_Base_SetConfig+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d103      	bne.n	8001dce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	615a      	str	r2, [r3, #20]
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b004      	add	sp, #16
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40002000 	.word	0x40002000
 8001de8:	40014000 	.word	0x40014000
 8001dec:	40014400 	.word	0x40014400
 8001df0:	40014800 	.word	0x40014800
 8001df4:	fffffcff 	.word	0xfffffcff

08001df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4393      	bics	r3, r2
 8001e12:	001a      	movs	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	22f0      	movs	r2, #240	; 0xf0
 8001e22:	4393      	bics	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	220a      	movs	r2, #10
 8001e34:	4393      	bics	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	621a      	str	r2, [r3, #32]
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b006      	add	sp, #24
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2210      	movs	r2, #16
 8001e66:	4393      	bics	r3, r2
 8001e68:	001a      	movs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <TIM_TI2_ConfigInputStage+0x60>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	031b      	lsls	r3, r3, #12
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	22a0      	movs	r2, #160	; 0xa0
 8001e90:	4393      	bics	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	621a      	str	r2, [r3, #32]
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	ffff0fff 	.word	0xffff0fff

08001eb8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2270      	movs	r2, #112	; 0x70
 8001ecc:	4393      	bics	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	609a      	str	r2, [r3, #8]
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <TIM_ETR_SetConfig+0x3c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	021a      	lsls	r2, r3, #8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	609a      	str	r2, [r3, #8]
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b006      	add	sp, #24
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	ffff00ff 	.word	0xffff00ff

08001f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223c      	movs	r2, #60	; 0x3c
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e041      	b.n	8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223c      	movs	r2, #60	; 0x3c
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	223d      	movs	r2, #61	; 0x3d
 8001f50:	2102      	movs	r1, #2
 8001f52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2270      	movs	r2, #112	; 0x70
 8001f68:	4393      	bics	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	223d      	movs	r2, #61	; 0x3d
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223c      	movs	r2, #60	; 0x3c
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40014000 	.word	0x40014000

08001fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e044      	b.n	8002098 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2274      	movs	r2, #116	; 0x74
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe fadf 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	438a      	bics	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f8da 	bl	80021f8 <UART_SetConfig>
 8002044:	0003      	movs	r3, r0
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e024      	b.n	8002098 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fa0d 	bl	8002478 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	490d      	ldr	r1, [pc, #52]	; (80020a0 <HAL_UART_Init+0xa4>)
 800206a:	400a      	ands	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2108      	movs	r1, #8
 800207a:	438a      	bics	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 faa5 	bl	80025e0 <UART_CheckIdleState>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	fffff7ff 	.word	0xfffff7ff

080020a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d000      	beq.n	80020be <HAL_UART_Transmit+0x1a>
 80020bc:	e096      	b.n	80021ec <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_UART_Transmit+0x28>
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e08e      	b.n	80021ee <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	015b      	lsls	r3, r3, #5
 80020d8:	429a      	cmp	r2, r3
 80020da:	d109      	bne.n	80020f0 <HAL_UART_Transmit+0x4c>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07e      	b.n	80021ee <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2274      	movs	r2, #116	; 0x74
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Transmit+0x5a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e077      	b.n	80021ee <HAL_UART_Transmit+0x14a>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2274      	movs	r2, #116	; 0x74
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	2100      	movs	r1, #0
 800210c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2221      	movs	r2, #33	; 0x21
 8002112:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002114:	f7fe fb62 	bl	80007dc <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1dba      	adds	r2, r7, #6
 8002120:	2150      	movs	r1, #80	; 0x50
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1dba      	adds	r2, r7, #6
 800212a:	2152      	movs	r1, #82	; 0x52
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	015b      	lsls	r3, r3, #5
 8002138:	429a      	cmp	r2, r3
 800213a:	d108      	bne.n	800214e <HAL_UART_Transmit+0xaa>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d104      	bne.n	800214e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	e003      	b.n	8002156 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2274      	movs	r2, #116	; 0x74
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800215e:	e02d      	b.n	80021bc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	0013      	movs	r3, r2
 800216a:	2200      	movs	r2, #0
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	f000 fa7f 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d001      	beq.n	800217a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e039      	b.n	80021ee <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	05d2      	lsls	r2, r2, #23
 800218a:	0dd2      	lsrs	r2, r2, #23
 800218c:	b292      	uxth	r2, r2
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	3302      	adds	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	e008      	b.n	80021aa <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b292      	uxth	r2, r2
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2252      	movs	r2, #82	; 0x52
 80021ae:	5a9b      	ldrh	r3, [r3, r2]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b299      	uxth	r1, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2252      	movs	r2, #82	; 0x52
 80021ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2252      	movs	r2, #82	; 0x52
 80021c0:	5a9b      	ldrh	r3, [r3, r2]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1cb      	bne.n	8002160 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	0013      	movs	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	f000 fa4b 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e005      	b.n	80021ee <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b008      	add	sp, #32
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002200:	231e      	movs	r3, #30
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a8d      	ldr	r2, [pc, #564]	; (800245c <UART_SetConfig+0x264>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a88      	ldr	r2, [pc, #544]	; (8002460 <UART_SetConfig+0x268>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <UART_SetConfig+0x26c>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7b      	ldr	r2, [pc, #492]	; (8002468 <UART_SetConfig+0x270>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d127      	bne.n	80022ce <UART_SetConfig+0xd6>
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <UART_SetConfig+0x274>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	2203      	movs	r2, #3
 8002284:	4013      	ands	r3, r2
 8002286:	2b03      	cmp	r3, #3
 8002288:	d00d      	beq.n	80022a6 <UART_SetConfig+0xae>
 800228a:	d81b      	bhi.n	80022c4 <UART_SetConfig+0xcc>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d014      	beq.n	80022ba <UART_SetConfig+0xc2>
 8002290:	d818      	bhi.n	80022c4 <UART_SetConfig+0xcc>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <UART_SetConfig+0xa4>
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00a      	beq.n	80022b0 <UART_SetConfig+0xb8>
 800229a:	e013      	b.n	80022c4 <UART_SetConfig+0xcc>
 800229c:	231f      	movs	r3, #31
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e021      	b.n	80022ea <UART_SetConfig+0xf2>
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e01c      	b.n	80022ea <UART_SetConfig+0xf2>
 80022b0:	231f      	movs	r3, #31
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2204      	movs	r2, #4
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e017      	b.n	80022ea <UART_SetConfig+0xf2>
 80022ba:	231f      	movs	r3, #31
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2208      	movs	r2, #8
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e012      	b.n	80022ea <UART_SetConfig+0xf2>
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2210      	movs	r2, #16
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e00d      	b.n	80022ea <UART_SetConfig+0xf2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a67      	ldr	r2, [pc, #412]	; (8002470 <UART_SetConfig+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d104      	bne.n	80022e2 <UART_SetConfig+0xea>
 80022d8:	231f      	movs	r3, #31
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e003      	b.n	80022ea <UART_SetConfig+0xf2>
 80022e2:	231f      	movs	r3, #31
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2210      	movs	r2, #16
 80022e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d15d      	bne.n	80023b2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80022f6:	231f      	movs	r3, #31
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d015      	beq.n	800232c <UART_SetConfig+0x134>
 8002300:	dc18      	bgt.n	8002334 <UART_SetConfig+0x13c>
 8002302:	2b04      	cmp	r3, #4
 8002304:	d00d      	beq.n	8002322 <UART_SetConfig+0x12a>
 8002306:	dc15      	bgt.n	8002334 <UART_SetConfig+0x13c>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <UART_SetConfig+0x11a>
 800230c:	2b02      	cmp	r3, #2
 800230e:	d005      	beq.n	800231c <UART_SetConfig+0x124>
 8002310:	e010      	b.n	8002334 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002312:	f7ff f97b 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 8002316:	0003      	movs	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]
        break;
 800231a:	e012      	b.n	8002342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800231c:	4b55      	ldr	r3, [pc, #340]	; (8002474 <UART_SetConfig+0x27c>)
 800231e:	61bb      	str	r3, [r7, #24]
        break;
 8002320:	e00f      	b.n	8002342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002322:	f7ff f905 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 8002326:	0003      	movs	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
        break;
 800232a:	e00a      	b.n	8002342 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	61bb      	str	r3, [r7, #24]
        break;
 8002332:	e006      	b.n	8002342 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002338:	231e      	movs	r3, #30
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
        break;
 8002340:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d100      	bne.n	800234a <UART_SetConfig+0x152>
 8002348:	e07b      	b.n	8002442 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	18d2      	adds	r2, r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0019      	movs	r1, r3
 800235c:	0010      	movs	r0, r2
 800235e:	f7fd fed3 	bl	8000108 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	b29b      	uxth	r3, r3
 8002366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d91c      	bls.n	80023a8 <UART_SetConfig+0x1b0>
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	025b      	lsls	r3, r3, #9
 8002374:	429a      	cmp	r2, r3
 8002376:	d217      	bcs.n	80023a8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	b29a      	uxth	r2, r3
 800237c:	200e      	movs	r0, #14
 800237e:	183b      	adds	r3, r7, r0
 8002380:	210f      	movs	r1, #15
 8002382:	438a      	bics	r2, r1
 8002384:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	2207      	movs	r2, #7
 800238e:	4013      	ands	r3, r2
 8002390:	b299      	uxth	r1, r3
 8002392:	183b      	adds	r3, r7, r0
 8002394:	183a      	adds	r2, r7, r0
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	183a      	adds	r2, r7, r0
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	e04c      	b.n	8002442 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80023a8:	231e      	movs	r3, #30
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e047      	b.n	8002442 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d015      	beq.n	80023e8 <UART_SetConfig+0x1f0>
 80023bc:	dc18      	bgt.n	80023f0 <UART_SetConfig+0x1f8>
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00d      	beq.n	80023de <UART_SetConfig+0x1e6>
 80023c2:	dc15      	bgt.n	80023f0 <UART_SetConfig+0x1f8>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <UART_SetConfig+0x1d6>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d005      	beq.n	80023d8 <UART_SetConfig+0x1e0>
 80023cc:	e010      	b.n	80023f0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023ce:	f7ff f91d 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]
        break;
 80023d6:	e012      	b.n	80023fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <UART_SetConfig+0x27c>)
 80023da:	61bb      	str	r3, [r7, #24]
        break;
 80023dc:	e00f      	b.n	80023fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023de:	f7ff f8a7 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]
        break;
 80023e6:	e00a      	b.n	80023fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	61bb      	str	r3, [r7, #24]
        break;
 80023ee:	e006      	b.n	80023fe <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023f4:	231e      	movs	r3, #30
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
        break;
 80023fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01e      	beq.n	8002442 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	085a      	lsrs	r2, r3, #1
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	18d2      	adds	r2, r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0019      	movs	r1, r3
 8002414:	0010      	movs	r0, r2
 8002416:	f7fd fe77 	bl	8000108 <__udivsi3>
 800241a:	0003      	movs	r3, r0
 800241c:	b29b      	uxth	r3, r3
 800241e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d909      	bls.n	800243a <UART_SetConfig+0x242>
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	429a      	cmp	r2, r3
 800242e:	d204      	bcs.n	800243a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	e003      	b.n	8002442 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800243a:	231e      	movs	r3, #30
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800244e:	231e      	movs	r3, #30
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b008      	add	sp, #32
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffff69f3 	.word	0xffff69f3
 8002460:	ffffcfff 	.word	0xffffcfff
 8002464:	fffff4ff 	.word	0xfffff4ff
 8002468:	40013800 	.word	0x40013800
 800246c:	40021000 	.word	0x40021000
 8002470:	40004400 	.word	0x40004400
 8002474:	007a1200 	.word	0x007a1200

08002478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d00b      	beq.n	80024a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <UART_AdvFeatureConfig+0x144>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a43      	ldr	r2, [pc, #268]	; (80025c0 <UART_AdvFeatureConfig+0x148>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d00b      	beq.n	80024e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <UART_AdvFeatureConfig+0x14c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2208      	movs	r2, #8
 80024ec:	4013      	ands	r3, r2
 80024ee:	d00b      	beq.n	8002508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <UART_AdvFeatureConfig+0x150>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2210      	movs	r2, #16
 800250e:	4013      	ands	r3, r2
 8002510:	d00b      	beq.n	800252a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <UART_AdvFeatureConfig+0x154>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2220      	movs	r2, #32
 8002530:	4013      	ands	r3, r2
 8002532:	d00b      	beq.n	800254c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <UART_AdvFeatureConfig+0x158>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	4013      	ands	r3, r2
 8002554:	d01d      	beq.n	8002592 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <UART_AdvFeatureConfig+0x15c>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	035b      	lsls	r3, r3, #13
 8002576:	429a      	cmp	r2, r3
 8002578:	d10b      	bne.n	8002592 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <UART_AdvFeatureConfig+0x160>)
 8002582:	4013      	ands	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	4013      	ands	r3, r2
 800259a:	d00b      	beq.n	80025b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <UART_AdvFeatureConfig+0x164>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
  }
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	fffdffff 	.word	0xfffdffff
 80025c0:	fffeffff 	.word	0xfffeffff
 80025c4:	fffbffff 	.word	0xfffbffff
 80025c8:	ffff7fff 	.word	0xffff7fff
 80025cc:	ffffefff 	.word	0xffffefff
 80025d0:	ffffdfff 	.word	0xffffdfff
 80025d4:	ffefffff 	.word	0xffefffff
 80025d8:	ff9fffff 	.word	0xff9fffff
 80025dc:	fff7ffff 	.word	0xfff7ffff

080025e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	2100      	movs	r1, #0
 80025ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025f0:	f7fe f8f4 	bl	80007dc <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2208      	movs	r2, #8
 8002600:	4013      	ands	r3, r2
 8002602:	2b08      	cmp	r3, #8
 8002604:	d10c      	bne.n	8002620 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0391      	lsls	r1, r2, #14
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <UART_CheckIdleState+0x8c>)
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	f000 f82c 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e021      	b.n	8002664 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	2b04      	cmp	r3, #4
 800262c:	d10c      	bne.n	8002648 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	03d1      	lsls	r1, r2, #15
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <UART_CheckIdleState+0x8c>)
 8002638:	9200      	str	r2, [sp, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	f000 f818 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d001      	beq.n	8002648 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e00d      	b.n	8002664 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2274      	movs	r2, #116	; 0x74
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	01ffffff 	.word	0x01ffffff

08002670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002680:	e05e      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3301      	adds	r3, #1
 8002686:	d05b      	beq.n	8002740 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7fe f8a8 	bl	80007dc <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11b      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	492f      	ldr	r1, [pc, #188]	; (8002768 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2274      	movs	r2, #116	; 0x74
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e044      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d02e      	beq.n	8002740 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	401a      	ands	r2, r3
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d124      	bne.n	8002740 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4917      	ldr	r1, [pc, #92]	; (8002768 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800270c:	400a      	ands	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2101      	movs	r1, #1
 800271c:	438a      	bics	r2, r1
 800271e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	2120      	movs	r1, #32
 8002732:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2274      	movs	r2, #116	; 0x74
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e00f      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	425a      	negs	r2, r3
 8002750:	4153      	adcs	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	001a      	movs	r2, r3
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d091      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fffffe5f 	.word	0xfffffe5f

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2600      	movs	r6, #0
 8002770:	4d0c      	ldr	r5, [pc, #48]	; (80027a4 <__libc_init_array+0x38>)
 8002772:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <__libc_init_array+0x3c>)
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	42a6      	cmp	r6, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	2600      	movs	r6, #0
 800277e:	f000 f821 	bl	80027c4 <_init>
 8002782:	4d0a      	ldr	r5, [pc, #40]	; (80027ac <__libc_init_array+0x40>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <__libc_init_array+0x44>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	42a6      	cmp	r6, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	00b3      	lsls	r3, r6, #2
 8002792:	58eb      	ldr	r3, [r5, r3]
 8002794:	4798      	blx	r3
 8002796:	3601      	adds	r6, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	00b3      	lsls	r3, r6, #2
 800279c:	58eb      	ldr	r3, [r5, r3]
 800279e:	4798      	blx	r3
 80027a0:	3601      	adds	r6, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	0800281c 	.word	0x0800281c
 80027a8:	0800281c 	.word	0x0800281c
 80027ac:	0800281c 	.word	0x0800281c
 80027b0:	08002820 	.word	0x08002820

080027b4 <memset>:
 80027b4:	0003      	movs	r3, r0
 80027b6:	1882      	adds	r2, r0, r2
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d100      	bne.n	80027be <memset+0xa>
 80027bc:	4770      	bx	lr
 80027be:	7019      	strb	r1, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	e7f9      	b.n	80027b8 <memset+0x4>

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
